USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: SP_PKG_MASTER_SELECT_PRODUCT_LOTTECARD
■ DESCRIPTION				: 롯데카드 상품연동 TEXT 생성 LotteCardProductMakeText
■ INPUT PARAMETER			: 
	@MASTER_CODE_STRING		: 마스터 코드
■ OUTPUT PARAMETER			: 
■ EXEC						: 

	exec SP_PKG_MASTER_SELECT_PRODUCT_LOTTECARD 'APF303'
	
	exec SP_PKG_MASTER_SELECT_PRODUCT_LOTTECARD ''

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
2015-06-30			김성호			신규생성
2015-07-29			김성호			형식변경 - 월별 최저가 포함
2015-08-13			김성호			형식변경 - 자리수 및 최저가 없는 경우 공백 리턴
2015-09-14			김성호			박수추가
2016-01-05			김성호			최저가 유류할증료 포함 계산으로 수정
================================================================================================================*/ 
CREATE PROC [dbo].[SP_PKG_MASTER_SELECT_PRODUCT_LOTTECARD]
	@MASTER_CODE_STRING VARCHAR(1000)
AS
BEGIN
	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @TODAY DATE

	SELECT @TODAY = GETDATE();

	--DECLARE @SQLSTRING NVARCHAR(4000), @PARMDEFINITION NVARCHAR(100), @TODAY DATE

	--SELECT @SQLSTRING = N'WHERE A.LAST_DATE > GETDATE() AND A.SHOW_YN = ''Y''', @TODAY = GETDATE();

	--IF ISNULL(@MASTER_CODE_STRING, '') <> ''
	--BEGIN
	--	SET @SQLSTRING = @SQLSTRING + N' AND A.MASTER_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@MASTER_CODE_STRING, '',''))'
	--END

	WITH MASTER_LIST AS
	(
		SELECT
			UPPER(A.MASTER_CODE) AS  MASTER_CODE
		FROM PKG_MASTER A WITH(NOLOCK)
		WHERE A.LAST_DATE > @TODAY AND A.SHOW_YN = 'Y' AND (@MASTER_CODE_STRING = '' OR A.MASTER_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@MASTER_CODE_STRING, ',')))
	), CITY_LIST AS
	(
		SELECT A.MASTER_CODE, D.REGION_CODE, C.NATION_CODE, B.CITY_CODE
		FROM MASTER_LIST Z
		INNER JOIN PKG_DETAIL A WITH(NOLOCK) ON A.DEP_DATE > @TODAY AND Z.MASTER_CODE = A.MASTER_CODE --AND A.SHOW_YN = ''Y''
		INNER JOIN PKG_DETAIL_SCH_CITY B WITH(NOLOCK) ON A.PRO_CODE = B.PRO_CODE
		INNER JOIN PUB_CITY C WITH(NOLOCK) ON B.CITY_CODE = C.CITY_CODE
		INNER JOIN PUB_NATION D WITH(NOLOCK) ON C.NATION_CODE = D.NATION_CODE
		WHERE B.MAINCITY_YN = 'Y'
		GROUP BY A.MASTER_CODE, D.REGION_CODE, C.NATION_CODE, B.CITY_CODE
	), PRICE_LIST AS
	(
		SELECT A.MASTER_CODE, B.TOUR_DAY, B.PRO_CODE, B.DEP_DATE
			, DBO.XN_PRO_SALE_PRICE_CUTTING(C.ADT_PRICE + C.ADT_TAX + (CASE C.QCHARGE_TYPE WHEN 0 THEN 0 WHEN 1 THEN [dbo].[XN_PRO_DETAIL_QCHARGE_PRICE](B.PRO_CODE) ELSE C.ADT_QCHARGE END)) AS [ADT_ALL_PRICE]
		FROM MASTER_LIST A
		INNER JOIN PKG_DETAIL B WITH(NOLOCK) ON A.MASTER_CODE = B.MASTER_CODE
		INNER JOIN PKG_DETAIL_PRICE C WITH(NOLOCK) ON B.PRO_CODE = C.PRO_CODE
		WHERE B.DEP_DATE > @TODAY AND B.DEP_DATE < DATEADD(M, 6, @TODAY)
	), SUMMARY_LIST AS
	(
		SELECT P.*
		FROM (
			SELECT A.MASTER_CODE, A.TOUR_DAY, A.M_DATE, CONVERT(CHAR(10), ISNULL(CONVERT(CHAR(10), (CASE WHEN B.MIN_PRICE = 0 THEN NULL ELSE B.MIN_PRICE END)), '')) AS [MIN_PRICE]
			FROM (
				SELECT A.MASTER_CODE, A.TOUR_DAY, B.M_DATE
				FROM (
					SELECT A.MASTER_CODE, B.TOUR_DAY
					FROM MASTER_LIST A
					INNER JOIN PKG_DETAIL B WITH(NOLOCK) ON A.MASTER_CODE = B.MASTER_CODE
					WHERE B.DEP_DATE > @TODAY AND B.DEP_DATE < DATEADD(M, 6, @TODAY)
					GROUP BY A.MASTER_CODE, B.TOUR_DAY
				) A
				CROSS JOIN (
					SELECT 0 AS [M_DATE] UNION
					SELECT 1 UNION
					SELECT 2 UNION
					SELECT 3 UNION
					SELECT 4 UNION
					SELECT 5
				) B
			) A
			LEFT JOIN (
				SELECT A.MASTER_CODE, A.TOUR_DAY, DATEDIFF(MONTH, @TODAY, A.DEP_DATE) AS [M_DATE], A.ADT_ALL_PRICE AS [MIN_PRICE]
				FROM (
					SELECT ROW_NUMBER() OVER (PARTITION BY A.MASTER_CODE, A.TOUR_DAY, DATEDIFF(MONTH, @TODAY, A.DEP_DATE) ORDER BY A.ADT_ALL_PRICE) AS [ROWNUMBER]
						, A.MASTER_CODE, A.TOUR_DAY, A.PRO_CODE, A.DEP_DATE, A.ADT_ALL_PRICE
					FROM PRICE_LIST A
				) A
				WHERE A.ROWNUMBER = 1
			) B ON A.MASTER_CODE = B.MASTER_CODE AND A.TOUR_DAY = B.TOUR_DAY AND A.M_DATE = B.M_DATE
		) A
		PIVOT (MIN(A.MIN_PRICE) FOR A.M_DATE IN ([0], [1], [2], [3], [4], [5])) AS P
	)
	SELECT --A.MASTER_CODE, A.ATT_CODE, B.REGION_CODE, B.NATION_CODE, B.CITY_CODE, A.NEXT_DATE, A.LAST_DATE, A.LOW_PRICE, A.HIGH_PRICE, A.MASTER_NAME, 
		(CONVERT(CHAR(13), A.MASTER_CODE) +
		CONVERT(CHAR(5), B.ATT_CODE) + 
		CONVERT(CHAR(5), C.REGION_CODE) +
		CONVERT(CHAR(3), C.NATION_CODE) +
		CONVERT(CHAR(5), C.CITY_CODE) +
		CONVERT(CHAR(6), B.NEXT_DATE, 112) +
		CONVERT(CHAR(6), B.LAST_DATE, 112) +
		CONVERT(CHAR(2), D.TOUR_DAY) +
		ISNULL(D.[0], '') + 
		ISNULL(D.[1], '') + 
		ISNULL(D.[2], '') + 
		ISNULL(D.[3], '') + 
		ISNULL(D.[4], '') + 
		ISNULL(D.[5], '') + 
		CONVERT(CHAR(200), B.MASTER_NAME)) AS [DATA_STRING]
	FROM MASTER_LIST A
	INNER JOIN PKG_MASTER B WITH(NOLOCK, INDEX(IDX_PKG_MASTER_6)) ON A.MASTER_CODE = B.MASTER_CODE
	INNER JOIN CITY_LIST C ON A.MASTER_CODE = C.MASTER_CODE
	INNER JOIN SUMMARY_LIST D ON A.MASTER_CODE = D.MASTER_CODE
	ORDER BY A.MASTER_CODE, D.TOUR_DAY;

END


GO
