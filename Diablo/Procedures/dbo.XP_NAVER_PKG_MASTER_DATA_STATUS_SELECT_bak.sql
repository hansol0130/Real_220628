USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: XP_NAVER_PKG_MASTER_DATA_STATUS_SELECT
■ DESCRIPTION				: 2019 네이버 패키지 상품연동 상품 조회  - 마스터 서머리 
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: [XP_NAVER_PKG_MASTER_DATA_STATUS_SELECT] '2019-06-01' , '2019-12-31' , '유럽_지중해/인도/아프리카'


■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
2019-05-29			박형만			
2019-08-21			박형만		좌석통계추가 
================================================================================================================*/ 
CREATE  PROC [dbo].[XP_NAVER_PKG_MASTER_DATA_STATUS_SELECT_bak]
	@START_DATE DATETIME,
	@END_DATE DATETIME, 
	@TEAM_CODE VARCHAR(50) = NULL 

AS
BEGIN

--DECLARE @START_DATE DATETIME 
--DECLARE @END_DATE DATETIME 
--DECLARE @TEAM_CODE VARCHAR(50) 
--SET @START_DATE='2019-08-22'
--SET @END_DATE='2020-01-01'
--SET @TEAM_CODE = '542' 


	SELECT  T2.* ,
	( SELECT TOP 1 CITYLIST FROM NAVEr_PKG_DETAIL WHERE MSTCODE = NPM.MSTCODE  AND BEGINDATE > GETDATE()  ORDER BY BEGINDATE , CHILDCODE ) AS CITY_CODES  ,
	( SELECT TOP 1 COUNTRYLIST FROM NAVEr_PKG_DETAIL WHERE MSTCODE = NPM.MSTCODE  AND BEGINDATE > GETDATE()  ORDER BY BEGINDATE , CHILDCODE ) AS NATION_CODES ,
	NPM.mstCode , 
	NPM.mstTitle , 
	NPM.updateDate , 
	NPM.updateChildCount,
	NPM.productFamilyRank , 
	CONVERT(DECIMAL(5,1),(1.0 - (CONVERT(DECIMAL,INOUT_NO_CNT)  / CONVERT(DECIMAL,SHOW_CNT) ) ) * 100.0)  AS INOUT_PRO_CODE_PER ,
	CONVERT(DECIMAL(5,1),(1.0 - (CONVERT(DECIMAL,SELLPOINT_NO_CNT)  / CONVERT(DECIMAL,SHOW_CNT) ) )* 100.0) AS SELLPOINT_NO_CNT_PER ,
	CONVERT(DECIMAL(5,1),(1.0 - (CONVERT(DECIMAL,SELLPOINT_EX_CNT)  / CONVERT(DECIMAL,SHOW_CNT) ) )* 100.0) AS SELLPOINT_EX_CNT_PER ,
	CONVERT(DECIMAL(5,1),(1.0 - (CONVERT(DECIMAL,PRO_POINT_NO_CNT)  / CONVERT(DECIMAL,SHOW_CNT) )  )* 100.0) AS PRO_POINT_NO_CNT_PER ,
	CONVERT(DECIMAL(5,1),(1.0 - (CONVERT(DECIMAL,SEAT_TIME_NO_CNT)  / CONVERT(DECIMAL,SHOW_CNT) )  )* 100.0) AS SEAT_TIME_NO_CNT_PER ,
	CONVERT(DECIMAL(5,1),(1.0 - (CONVERT(DECIMAL,SCH_NO_CNT)  / CONVERT(DECIMAL,SHOW_CNT) )  )* 100.0) AS SCH_NO_CNT_PER 
	FROM 
	(
		-- 1 행사 입력 정보 
		SELECT 
		SEQ_NO ,
		--TEAM_NAME,
		MASTER_CODE , 
		MIN( PRO_CODE ) AS PRO_CODE , 
		--COUNT(*) AS PRO_CNT, 
		SUM(CASE WHEN SHOW_YN ='Y' THEN 1 ELSE 0 END ) AS SHOW_CNT,

		USE_YN ,
		CASE WHEN SUM(INOUT_NO) = 0 AND SUM(SELLPOINT_NO) = 0 AND SUM(SELLPOINT_EX) = 0  AND SUM(PRO_POINT_NO) = 0 AND SUM(SCH_NO) = 0 THEN 'Y' ELSE 'N' END AS OK_YN,
		SEAT_YN , 
		SEAT_REMARK ,
		REMARK,
		USER_RANK,
		SUM(INOUT_NO) AS INOUT_NO_CNT  ,
		MIN(INOUT_NO_PRO_CODE) AS INOUT_NO_PRO_CODE,
		SUM(SELLPOINT_NO) AS SELLPOINT_NO_CNT  ,
		MIN(SELLPOINT_NO_PRO_CODE) AS SELLPOINT_NO_PRO_CODE,
		SUM(SELLPOINT_EX) AS SELLPOINT_EX_CNT  ,
		MIN(SELLPOINT_EX_PRO_CODE) AS SELLPOINT_EX_PRO_CODE,
		MAX(SELLPOINT) AS SELLPOINT_TEXT  ,
		SUM(PRO_POINT_NO) AS PRO_POINT_NO_CNT  ,
		MIN(PRO_POINT_NO_PRO_CODE) AS PRO_POINT_NO_PRO_CODE  ,

		SUM(SEAT_TIME_NO) AS SEAT_TIME_NO_CNT  ,
		MIN(SEAT_TIME_NO_PRO_CODE) AS SEAT_TIME_NO_PRO_CODE  ,

		SUM(SCH_NO) AS SCH_NO_CNT  ,
		MIN(SCH_NO_PRO_CODE) AS SCH_NO_PRO_CODE ,
	
		MIN(TEAM_CODE) AS TEAM_CODE ,
		MIN(TEAM_NAME) AS TEAM_NAME ,
 
		MIN(NEW_NAME) AS NEW_NAME 

		
		FROM 
		( 
			--- 행사 가격 상세  원본 데이터 
			SELECT 
				AA.SEQ_NO , 
				AA.USE_YN ,
				AA.MASTER_CODE , 
				AA.SEAT_YN , 
				AA.SEAT_REMARK , 
				AA.REMARK,
				AA.USER_RANK,
				
				CC.PRO_CODE , 
				DD.PRICE_SEQ , 
				CC.SHOW_YN , 
				CC.RES_ADD_YN , 
				CASE WHEN (SELECT COUNT(*)
					FROM PKG_DETAIL_PRICE_INOUT WITH(NOLOCK)
					WHERE PRO_CODE = CC.PRO_CODE AND PRICE_SEQ = DD.PRICE_SEQ ) = 0 THEN 1 ELSE 0 END  AS INOUT_NO ,

				CASE WHEN (SELECT COUNT(*)
					FROM PKG_DETAIL_PRICE_INOUT WITH(NOLOCK)
					WHERE PRO_CODE = CC.PRO_CODE AND PRICE_SEQ = DD.PRICE_SEQ ) = 0 THEN CC.PRO_CODE ELSE NULL END  AS INOUT_NO_PRO_CODE ,

				CASE WHEN ISNULL(PKG_SUMMARY,'') = '' THEN 1 ELSE 0 END   SELLPOINT_NO ,
				CASE WHEN ISNULL(PKG_SUMMARY,'') = '' THEN CC.PRO_CODE ELSE NULL END   SELLPOINT_NO_PRO_CODE ,

				CASE WHEN   CHARINDEX( CHAR(13) , PKG_SUMMARY ) = 0 
						AND CHARINDEX( CHAR(10) , PKG_SUMMARY ) = 0 
						AND LEN ( ISNULL(PKG_SUMMARY,'') ) > 80   THEN 1 ELSE 0 END as SELLPOINT_EX ,
				CASE WHEN   CHARINDEX( CHAR(13) , PKG_SUMMARY ) = 0 
							AND CHARINDEX( CHAR(10) , PKG_SUMMARY ) = 0 
							AND LEN ( ISNULL(PKG_SUMMARY,'') ) > 80   THEN CC.PRO_CODE ELSE null END as SELLPOINT_EX_PRO_CODE ,

				CASE WHEN   CHARINDEX( CHAR(13) , PKG_SUMMARY ) = 0 
						AND CHARINDEX( CHAR(10) , PKG_SUMMARY ) = 0 
						AND LEN ( ISNULL(PKG_SUMMARY,'') ) > 80   THEN PKG_SUMMARY ELSE NULL END as SELLPOINT ,
	
				CASE WHEN ISNULL(EE.TRAFFIC_POINT,'') = ''
					AND ISNULL(EE.STAY_POINT,'') = ''
					AND ISNULL(EE.TOUR_POINT,'') = ''
					AND ISNULL(EE.EAT_POINT,'') = ''
					AND ISNULL(EE.DISCOUNT_POINT,'') = ''
					AND ISNULL(EE.OTHER_POINT,'') = '' THEN 1 ELSE 0 END AS PRO_POINT_NO ,
				CASE WHEN ISNULL(EE.TRAFFIC_POINT,'') = ''
					AND ISNULL(EE.STAY_POINT,'') = ''
					AND ISNULL(EE.TOUR_POINT,'') = ''
					AND ISNULL(EE.EAT_POINT,'') = ''
					AND ISNULL(EE.DISCOUNT_POINT,'') = ''
					AND ISNULL(EE.OTHER_POINT,'') = '' THEN  CC.PRO_CODE ELSE NULL END AS PRO_POINT_NO_PRO_CODE ,

				CASE WHEN DBO.FN_GET_MINUTE_BY_TIME (ST.DEP_SPEND_TIME) <= 0 
					OR DBO.FN_GET_MINUTE_BY_TIME (ST.ARR_SPEND_TIME) <= 0 
				THEN 1 ELSE 0 END AS SEAT_TIME_NO , 
				CASE WHEN DBO.FN_GET_MINUTE_BY_TIME (ST.DEP_SPEND_TIME) <= 0 
					OR DBO.FN_GET_MINUTE_BY_TIME (ST.ARR_SPEND_TIME) <= 0 
				THEN CC.PRO_CODE ELSE NULL END AS SEAT_TIME_NO_PRO_CODE , 


				CASE WHEN (SELECT COUNT(*)
					FROM NAVER_PKG_DETAIL_SCH_CONTENT WITH(NOLOCK)
					WHERE PRO_CODE = CC.PRO_CODE AND PRICE_SEQ = DD.PRICE_SEQ ) = 0 THEN 1 ELSE 0 END  AS SCH_NO ,

				CASE WHEN (SELECT COUNT(*)
					FROM NAVER_PKG_DETAIL_SCH_CONTENT WITH(NOLOCK)
					WHERE PRO_CODE = CC.PRO_CODE AND PRICE_SEQ = DD.PRICE_SEQ ) = 0 THEN CC.PRO_CODE ELSE NULL END AS SCH_NO_PRO_CODE ,

				CC.NEW_CODE , EM.KOR_NAME AS NEW_NAME , 
				ET.TEAM_CODE , ET.TEAM_NAME 

			FROM TMP_NAVER_MASTER AA WITH(NOLOCK)
			INNER JOIN PKG_DETAIL CC WITH(NOLOCK)
				ON AA.MASTER_CODE = CC.MASTER_CODE 
				AND CC.DEP_DATE >= @START_DATE
				AND CC.DEP_DATE < DATEADD(D,1,@END_DATE)
			INNER JOIN PKG_DETAIL_PRICE DD WITH(NOLOCK)
				ON CC.PRO_CODE = DD.PRO_CODE 
			
			INNER JOIN EMP_MASTER EM WITH(NOLOCK)
				ON CC.NEW_CODE = EM.EMP_CODE 
			INNER JOIN EMP_TEAM ET WITH(NOLOCK)
				ON EM.TEAM_CODE = ET.TEAM_CODE 

			LEFT JOIN PRO_TRANS_SEAT ST WITH(NOLOCK)  
				ON CC.SEAT_CODE = ST.SEAT_CODE 

			LEFT JOIN PKG_DETAIL_SELL_POINT EE WITH(NOLOCK) 
				ON DD.PRO_CODE = EE.PRO_CODE 
			
		
			--ORDER BY CC.PRO_CODE
			--WHERE AA.TEAM_COMP_YN ='Y'  
			WHERE CC.SHOW_YN ='Y'  
			AND (AA.DEL_YN IS NULL OR AA.DEL_YN <>'Y' )
			--AND AA.DEL_YN IS NOT NULL AND AA.DEL_YN <> 'Y'
			AND (ET.TEAM_CODE = @TEAM_CODE OR ISNULL(@TEAM_CODE ,'') = '' ) 
			--AND AA.MASTER_CODE ='CPP915' 
	--ORDER BY CC.PRO_CODE 
		) T1 
	 
		GROUP BY T1.MASTER_CODE  ,SEQ_NO ,USE_YN , TEAM_NAME ,SEAT_YN , SEAT_REMARK ,REMARK , USER_RANK
		--ORDER BY SEQ_NO 
	) T2 

	LEFT JOIN NAVER_PKG_MASTER NPM
		ON T2.MASTER_CODE = NPM.MSTCODE 

	ORDER BY SEQ_NO  , PRO_CODE  
	--ORDER BY TEAM_NAME  , PRO_CODE  

END 

GO
