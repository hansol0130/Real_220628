USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*================================================================================================================
■ USP_NAME					: XP_ARG_GUIDE_LIST_SELECT
■ DESCRIPTION				: 대외업무시스템 랜드사 가이드 리스트 검색
■ INPUT PARAMETER			: 
	@AGT_CODE   VARCHAR(10)	: 랜드사코드
	@GUIDE_NAME	VARCHAR(20)	: 가이드명
	@ARG_CODE	INT			: 수배번호
■ OUTPUT PARAMETER			: 
   
■ EXEC						: 
	exec XP_ARG_GUIDE_LIST_SELECT @AGT_CODE='93002',@GUIDE_NAME='',@ARG_CODE=''
	exec XP_ARG_GUIDE_LIST_SELECT '12005', '', 4038

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2013-05-28		김완기			최초생성    
   2014-04-09		정지용			새로운 스키마에 맞추어서 수정
================================================================================================================*/ 

 CREATE  PROCEDURE [dbo].[XP_ARG_GUIDE_LIST_SELECT]
(
	@AGT_CODE		VARCHAR(10),
	@GUIDE_NAME		VARCHAR(20),
	@ARG_CODE		VARCHAR(12)
)

AS  
BEGIN

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @SQLSTRING NVARCHAR(MAX), @PARMDEFINITION NVARCHAR(1000);
	DECLARE @WHERE NVARCHAR(1000);

	SET @WHERE = '';

	-- WHERE 조건 만들기
	IF ISNULL(@GUIDE_NAME, '') <> '' -- 가이드명
		BEGIN
			SET @WHERE = @WHERE + ' AND A.KOR_NAME LIKE ''%'' + @GUIDE_NAME + ''%'''
		END

	SET @SQLSTRING = N'			
				SELECT 
						Z.ARG_CODE,
						A.AGT_CODE,
						A.MEM_CODE, 
						A.KOR_NAME, 
						MAX(A.WORK_TYPE) AS WORK_TYPE,
						(SELECT COUNT(DISTINCT(G.PRO_CODE))
							FROM OTR_POL_MASTER F WITH(NOLOCK)
							INNER JOIN OTR_MASTER G WITH(NOLOCK) ON (F.OTR_SEQ = G.OTR_SEQ AND G.OTR_STATE = ''3'')
							WHERE F.AGT_CODE = A.AGT_CODE AND ISNULL(F.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND F.GUIDE_NAME = A.KOR_NAME) AS G_COUNT,
						(SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
							FROM OTR_MASTER H WITH(NOLOCK)
							INNER JOIN dbo.OTR_POL_MASTER I WITH(NOLOCK) ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''2''
							INNER JOIN dbo.OTR_POL_QUESTION J WITH(NOLOCK) ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1''
							INNER JOIN dbo.OTR_POL_ANSWER K WITH(NOLOCK) ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
							INNER JOIN dbo.OTR_POL_DETAIL L WITH(NOLOCK) ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
							WHERE H.OTR_STATE = ''3'' AND I.AGT_CODE = A.AGT_CODE AND ISNULL(I.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND I.GUIDE_NAME = A.KOR_NAME) AS AVG_NUM ,
						(SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
							FROM OTR_MASTER H WITH(NOLOCK)
							INNER JOIN dbo.OTR_POL_MASTER I WITH(NOLOCK) ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''2''
							INNER JOIN dbo.OTR_POL_QUESTION J WITH(NOLOCK) ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1''
							INNER JOIN dbo.OTR_POL_ANSWER K WITH(NOLOCK) ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
							INNER JOIN dbo.OTR_POL_DETAIL L WITH(NOLOCK) ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
							WHERE H.OTR_STATE = ''3'' AND H.PRO_CODE = MAX(D.PRO_CODE) AND I.AGT_CODE = A.AGT_CODE AND ISNULL(I.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND I.GUIDE_NAME = A.KOR_NAME) AS AVG_NUM_LAST ,
						(SELECT DEP_DATE FROM PKG_DETAIL WITH(NOLOCK) WHERE PRO_CODE = MAX(D.PRO_CODE)) AS LAST_DEP_DATE,
						(SELECT COUNT(ARG_GUIDE_SEQ) FROM ARG_GUIDE WITH(NOLOCK) WHERE ARG_CODE = @ARG_CODE) AS COUNT_GUIDE,
						CASE WHEN COUNT(E.ARG_GUIDE_SEQ) = 0 THEN ''N'' ELSE ''Y'' END AS ARRANGE_YN
						,MAX(Z.DEP_DATE) AS DEP_DATE
						,MAX(Z.ARR_DATE) AS ARR_DATE
						,CASE WHEN ISNULL((SELECT  COUNT(O.ARG_GUIDE_SEQ)
						                     FROM  ARG_GUIDE O WITH(NOLOCK)
						                    INNER  JOIN (
												SELECT 
													A.ARG_CODE, MAX(B.DEP_DATE) AS DEP_DATE, MAX(B.ARR_DATE) AS ARR_DATE
												FROM ARG_MASTER A WITH(NOLOCK)
												INNER JOIN ARG_DETAIL B WITH(NOLOCK) ON A.ARG_CODE = B.ARG_CODE
												GROUP BY A.ARG_CODE
											) P ON (O.ARG_CODE = P.ARG_CODE AND ((P.DEP_DATE <= MAX(Z.DEP_DATE) AND P.ARR_DATE >= MAX(Z.DEP_DATE)) OR (P.DEP_DATE <= MAX(Z.ARR_DATE) AND P.ARR_DATE >= MAX(Z.ARR_DATE))))
						                    WHERE  O.AGT_CODE = A.AGT_CODE AND O.MEM_CODE = A.MEM_CODE), 0) > 0 THEN ''N''
							  ELSE ''Y'' END AS ARRANGE_ABLE
				FROM AGT_MEMBER A WITH(NOLOCK)
				INNER JOIN AGT_MASTER B WITH(NOLOCK) ON (A.AGT_CODE = B.AGT_CODE AND B.SHOW_YN = ''Y'')
				 LEFT OUTER JOIN OTR_POL_MASTER C WITH(NOLOCK) ON (A.AGT_CODE = C.AGT_CODE AND A.MEM_CODE = C.MEM_CODE)
				 LEFT OUTER JOIN OTR_MASTER D WITH(NOLOCK) ON (C.OTR_SEQ = D.OTR_SEQ AND D.OTR_STATE = ''3'')
				 LEFT OUTER JOIN ARG_GUIDE E WITH(NOLOCK) ON (E.ARG_CODE = @ARG_CODE AND A.AGT_CODE = E.AGT_CODE AND A.MEM_CODE = E.MEM_CODE)
				 LEFT OUTER JOIN (
					SELECT 
						A.ARG_CODE, MAX(B.DEP_DATE) AS DEP_DATE ,MAX(B.ARR_DATE) AS ARR_DATE 
					FROM ARG_MASTER A WITH(NOLOCK) 
					INNER JOIN ARG_DETAIL B WITH(NOLOCK) ON A.ARG_CODE = B.ARG_CODE
					GROUP BY A.ARG_CODE
				 ) Z ON Z.ARG_CODE = @ARG_CODE
				WHERE A.MEM_TYPE =''1'' AND A.WORK_TYPE != ''5'' AND A.AGT_CODE = @AGT_CODE' + @WHERE + '
				GROUP BY Z.ARG_CODE, A.AGT_CODE, A.MEM_CODE, A.KOR_NAME '

/*
	SET @SQLSTRING = N'			
				SELECT A.AGT_CODE,
						A.MEM_CODE, 
						A.KOR_NAME, 
						MAX(A.WORK_TYPE) AS WORK_TYPE,
						(SELECT COUNT(DISTINCT(G.PRO_CODE))
							FROM OTR_POL_MASTER F WITH(NOLOCK)
							INNER JOIN OTR_MASTER G WITH(NOLOCK) ON (F.OTR_SEQ = G.OTR_SEQ AND G.OTR_STATE = ''3'')
							WHERE F.AGT_CODE = A.AGT_CODE AND ISNULL(F.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND F.GUIDE_NAME = A.KOR_NAME) AS G_COUNT,
						(SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
							FROM OTR_MASTER H WITH(NOLOCK)
							INNER JOIN dbo.OTR_POL_MASTER I WITH(NOLOCK) ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''2''
							INNER JOIN dbo.OTR_POL_QUESTION J WITH(NOLOCK) ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1''
							INNER JOIN dbo.OTR_POL_ANSWER K WITH(NOLOCK) ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
							INNER JOIN dbo.OTR_POL_DETAIL L WITH(NOLOCK) ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
							WHERE H.OTR_STATE = ''3'' AND I.AGT_CODE = A.AGT_CODE AND ISNULL(I.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND I.GUIDE_NAME = A.KOR_NAME) AS AVG_NUM ,
						(SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
							FROM OTR_MASTER H WITH(NOLOCK)
							INNER JOIN dbo.OTR_POL_MASTER I WITH(NOLOCK) ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''2''
							INNER JOIN dbo.OTR_POL_QUESTION J WITH(NOLOCK) ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1''
							INNER JOIN dbo.OTR_POL_ANSWER K WITH(NOLOCK) ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
							INNER JOIN dbo.OTR_POL_DETAIL L WITH(NOLOCK) ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
							WHERE H.OTR_STATE = ''3'' AND H.PRO_CODE = MAX(D.PRO_CODE) AND I.AGT_CODE = A.AGT_CODE AND ISNULL(I.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND I.GUIDE_NAME = A.KOR_NAME) AS AVG_NUM_LAST ,
						(SELECT DEP_DATE FROM PKG_DETAIL WITH(NOLOCK) WHERE PRO_CODE = MAX(D.PRO_CODE)) AS LAST_DEP_DATE,
						(SELECT COUNT(ARG_GUIDE_SEQ) FROM ARG_GUIDE WITH(NOLOCK) WHERE ARG_CODE = @ARG_CODE) AS COUNT_GUIDE,
						CASE WHEN COUNT(E.ARG_GUIDE_SEQ) = 0 THEN ''N'' ELSE ''Y'' END AS ARRANGE_YN
						,MAX(Z.DEP_DATE) AS DEP_DATE
						,MAX(Z.ARR_DATE) AS ARR_DATE
						,CASE WHEN ISNULL((SELECT  COUNT(O.ARG_GUIDE_SEQ)
						                     FROM  ARG_GUIDE O WITH(NOLOCK)
						                    INNER  JOIN ARG_MASTER P WITH(NOLOCK) ON (O.ARG_CODE = P.ARG_CODE AND ((P.DEP_DATE <= MAX(Z.DEP_DATE) AND P.ARR_DATE >= MAX(Z.DEP_DATE)) OR (P.DEP_DATE <= MAX(Z.ARR_DATE) AND P.ARR_DATE >= MAX(Z.ARR_DATE))))
						                    WHERE  O.AGT_CODE = A.AGT_CODE AND O.MEM_CODE = A.MEM_CODE), 0) > 0 THEN ''N''
							  ELSE ''Y'' END AS ARRANGE_ABLE
				FROM AGT_MEMBER A WITH(NOLOCK)
				INNER JOIN AGT_MASTER B WITH(NOLOCK) ON (A.AGT_CODE = B.AGT_CODE AND B.SHOW_YN = ''Y'')
				 LEFT OUTER JOIN OTR_POL_MASTER C WITH(NOLOCK) ON (A.AGT_CODE = C.AGT_CODE AND A.MEM_CODE = C.MEM_CODE)
				 LEFT OUTER JOIN OTR_MASTER D WITH(NOLOCK) ON (C.OTR_SEQ = D.OTR_SEQ AND D.OTR_STATE = ''3'')
				 LEFT OUTER JOIN ARG_GUIDE E WITH(NOLOCK) ON (E.ARG_CODE = @ARG_CODE AND A.AGT_CODE = E.AGT_CODE AND A.MEM_CODE = E.MEM_CODE)
				 LEFT OUTER JOIN ARG_MASTER Z WITH(NOLOCK) ON (Z.ARG_CODE = @ARG_CODE)
				WHERE A.MEM_TYPE =''1'' AND A.WORK_TYPE != ''5'' AND A.AGT_CODE = @AGT_CODE' + @WHERE + '
				GROUP BY A.AGT_CODE, A.MEM_CODE, A.KOR_NAME '
		*/

				 
	SET @PARMDEFINITION = N'@AGT_CODE VARCHAR(10), @GUIDE_NAME VARCHAR(20), @ARG_CODE VARCHAR(12)';

	PRINT @SQLSTRING
		
	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, @AGT_CODE, @GUIDE_NAME, @ARG_CODE;

END

GO
