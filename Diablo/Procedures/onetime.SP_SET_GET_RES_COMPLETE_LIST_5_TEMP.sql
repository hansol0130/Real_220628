USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*-------------------------------------------------------------------------------------------------
■ Function_Name				: SP_SET_GET_RES_COMPLETE_LIST_5
■ Description				: 행사코드의 모든 예약들에 대한 수익현황을 가져온다. (지점수익 변경 적용)
■ Input Parameter			: 
■ Output Parameter			: 
■ Output Value				: 
■ Exec						: 


--SET STATISTICS IO OFF

	EXEC SP_SET_GET_RES_COMPLETE_LIST_5 @DATE_TYPE = 0, @EMP_TYPE = 0, @START_DATE = '2019-01-01', @END_DATE = '2019-01-02'
	, @REGION = '', @NATION_CODE = '', @CITY_CODE = '', @MASTER_CODE = '', @ATTRIBUTE = '', @TEAM_CODE = '', @EMP_CODE = '', @GROUP = 0, @ORDER = 0, @LIST_TYPE = 0


	SELECT * FROM RES_MASTER_DAMO WHERE PRO_CODE = 'EPP4389-190120'

	SELECT * FROM EMP_TEAM A WITH(NOLOCK) WHERE A.TEAM_NAME LIKE '%인도차이나%'

	SELECT * FROM EMP_MASTER_DAMO A WITH(NOLOCK) WHERE A.KOR_NAME LIKE '%유수연%'

	EPP4389-190120

	6	625800.00
19	-1526450.00

---------------------------------------------------------------------------------------------------
■ Change History                   
---------------------------------------------------------------------------------------------------
	Date			Author			Description           
---------------------------------------------------------------------------------------------------
	2019-01-07		김성호			최초생성
	2019-09-10		김성호			수익 지점 분산시 담당자 조건을 RES_MASTER에서 PKG_DETAIL로 수정
	2021-05-27		김성호			대리점 수수료 예외처리 (네이버 PROVIDER=41 판매가 기준)
-------------------------------------------------------------------------------------------------*/ 
CREATE PROCEDURE [onetime].[SP_SET_GET_RES_COMPLETE_LIST_5_TEMP]
(
	@DATE_TYPE	INT,				-- DATE_TYPE(0 출발일, 1 - 도착일)
	@EMP_TYPE	INT,				-- EMP_TYPE (0 수익담당자, 1 판매담당자)
	@START_DATE	DATETIME,			-- 기준 시작일
	@END_DATE	DATETIME,			-- 기준 종료일
	@REGION	CHAR(1),				-- 지역코드
	@NATION_CODE	VARCHAR(30),	-- 국가코드
	@CITY_CODE	VARCHAR(30),		-- 도시코드
	@MASTER_CODE	VARCHAR(20),	-- 마스터코드
	@ATTRIBUTE	CHAR(1),			-- 속성
	@TEAM_CODE	 VARCHAR(3),		-- 팀코드
	@EMP_CODE	VARCHAR(7),			-- 사원코드
	@GROUP	INT,					-- 그룹 기준 (0 행사코드, 1 마스터코드)
	@ORDER	INT,					-- 정렬 기준 (0 지역, 1 부서)
	@LIST_TYPE INT = 0				-- 리스트 타입 (0 행사, 1 지상비, 2 행사 + 지상비)
)
AS
BEGIN

	SET NOCOUNT ON

	DECLARE @SQLSTRING NVARCHAR(MAX) = '', 	@PARMDEFINITION NVARCHAR(1000) = '',
		@TABLE_RES_LIST NVARCHAR(MAX) = '',
		@TABLE_RES_TOTAL_PRICE_LIST NVARCHAR(MAX) = '',
		@TABLE_ONE_PROFIT_PRICE_LIST NVARCHAR(MAX) = '',
		@TABLE_BRANCH_LIST NVARCHAR(MAX) = '',
		@TABLE_GROUP_LIST NVARCHAR(MAX) = '',
		@TABLE_LAND_LIST VARCHAR(MAX) = '',
		@WHERE1 NVARCHAR(4000) = '',	-- 예약 조회 조건
		@WHERE2 NVARCHAR(4000) = '',	-- 예약없는 지상비 조회 조건
		@WHERE3 NVARCHAR(1000) = ''		-- 최종 조건 부서, 직원 조건

	-- 조건 설정 ---------------------------------------------------------------------------------------------------
	-- 종료일자 조정
	SET @END_DATE = DATEADD(D, 1, @END_DATE);

	-- 조건문
	-- DATE_TYPE(0 출발일, 1 - 도착일)
	IF @DATE_TYPE = 0
	BEGIN
		SET @WHERE1 = 'WHERE A.DEP_DATE >= @START_DATE AND A.DEP_DATE < @END_DATE'
		SET @WHERE2 = 'WHERE A.DEP_DATE >= @START_DATE AND A.DEP_DATE < @END_DATE'
	END
	ELSE
	BEGIN
		SET @WHERE1 = 'WHERE A.ARR_DATE >= @START_DATE AND A.ARR_DATE < @END_DATE'
		SET @WHERE2 = 'WHERE A.ARR_DATE >= @START_DATE AND A.ARR_DATE < @END_DATE'
	END

	SET @WHERE1 = @WHERE1 + ' AND B.RES_STATE <= 7 AND EXISTS (SELECT 1 FROM RES_CUSTOMER_damo AA WITH(NOLOCK) WHERE AA.RES_CODE = B.RES_CODE AND AA.RES_STATE IN (0,3,4))'
	SET @WHERE2 = @WHERE2 + ' AND EXISTS(SELECT 1 FROM SET_LAND_AGENT Z WITH(NOLOCK) WHERE Z.PRO_CODE = A.PRO_CODE AND Z.DOC_YN = ''Y'' )'


	-- EMP_TYPE (0 수익담당자, 1 판매담당자)
	IF LEN(@EMP_CODE) > 0
	BEGIN
		IF @EMP_TYPE = 0
		BEGIN
			-- 수익 지점 분산시 담당자 조건을 RES_MASTER에서 PKG_DETAIL로 수정 190910
			SET @WHERE1 = @WHERE1 + ' AND (B.PROFIT_EMP_CODE = @EMP_CODE OR (D.PROFIT_RATE <> 100 AND C.NEW_CODE = @EMP_CODE))'
		END
		ELSE
		BEGIN
			SET @WHERE1 = @WHERE1 + ' AND B.SALE_EMP_CODE = @EMP_CODE'
		END

		SET @WHERE2 = @WHERE2 + ' AND B.NEW_CODE = @EMP_CODE'
		SET @WHERE3 = 'WHERE A.PROFIT_EMP_CODE = @EMP_CODE'
	END
	-- EMP_TYPE (0 수익팀, 1 판매팀)
	ELSE IF LEN(@TEAM_CODE) > 0
	BEGIN
		IF @EMP_TYPE = 0
		BEGIN
			SET @WHERE1 = @WHERE1 + ' AND (B.PROFIT_TEAM_CODE = @TEAM_CODE OR (D.PROFIT_RATE <> 100 AND B.NEW_TEAM_CODE = @TEAM_CODE))'
		END
		ELSE
		BEGIN
			SET @WHERE1 = @WHERE1 + ' AND B.SALE_TEAM_CODE = @TEAM_CODE'
		END

		SET @WHERE2 = @WHERE2 + ' AND D.TEAM_CODE = @EMP_CODE'
		SET @WHERE3 = 'WHERE A.PROFIT_TEAM_CODE = @TEAM_CODE'
	END

	IF LEN(@ATTRIBUTE) > 0
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND C.ATT_CODE = @ATTRIBUTE'
		SET @WHERE2 = @WHERE2 + ' AND C.ATT_CODE = @ATTRIBUTE'
	END

	IF LEN(@REGION) > 0
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND C.SIGN_CODE = @REGION'
		SET @WHERE2 = @WHERE2 + ' AND C.SIGN_CODE = @REGION'
	END

	IF LEN(@CITY_CODE) > 0
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND EXISTS (
				SELECT 1
				FROM PKG_DETAIL_PRICE AA WITH(NOLOCK)
				INNER JOIN PKG_DETAIL_SCH_CITY BB WITH(NOLOCK) ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ
				WHERE AA.PRO_CODE = A.PRO_CODE AND BB.CITY_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@CITY_CODE, '','') BBB WHERE BBB.Data <> '''')
			)'
		SET @WHERE2 = @WHERE2 + ' AND EXISTS (
				SELECT 1
				FROM PKG_DETAIL_PRICE AA WITH(NOLOCK)
				INNER JOIN PKG_DETAIL_SCH_CITY BB WITH(NOLOCK) ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ
				WHERE AA.PRO_CODE = A.PRO_CODE AND BB.CITY_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@CITY_CODE, '','') BBB WHERE BBB.Data <> '''')
			)'
	END
	ELSE IF LEN(@NATION_CODE) > 0
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND EXISTS (
				SELECT 1
				FROM PKG_DETAIL_PRICE AA WITH(NOLOCK)
				INNER JOIN PKG_DETAIL_SCH_CITY BB WITH(NOLOCK) ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ
				WHERE AA.PRO_CODE = A.PRO_CODE AND BB.CITY_CODE IN (
					SELECT CITY_CODE 
					FROM PUB_CITY AAA WITH(NOLOCK) 
					WHERE AAA.NATION_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@NATION_CODE, '','') BBB WHERE BBB.Data <> '''')
			))'
		SET @WHERE2 = @WHERE2 + ' AND EXISTS (
				SELECT 1
				FROM PKG_DETAIL_PRICE AA WITH(NOLOCK)
				INNER JOIN PKG_DETAIL_SCH_CITY BB WITH(NOLOCK) ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ
				WHERE AA.PRO_CODE = A.PRO_CODE AND BB.CITY_CODE IN (
					SELECT CITY_CODE 
					FROM PUB_CITY AAA WITH(NOLOCK) 
					WHERE AAA.NATION_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@NATION_CODE, '','') BBB WHERE BBB.Data <> '''')
			))'
	END

	--PRINT @WHERE1
	--PRINT @WHERE2

	--SET @WHERE1 = 'WHERE A.PRO_CODE = ''IPF667-181107TW'''
	--SET @WHERE2 = @WHERE1

	-- 조건 설정 ---------------------------------------------------------------------------------------------------


IF @LIST_TYPE IN (0, 2)
BEGIN
		-- 임시테이블 생성
	SET @SQLSTRING = N'
		IF (OBJECT_ID(''tempdb..#LAST_LIST'') IS NOT NULL)
		BEGIN
			DROP TABLE #LAST_LIST;
		END
		CREATE TABLE #LAST_LIST (MASTER_CODE VARCHAR(10) NOT NULL, PRO_CODE VARCHAR(20) NOT NULL, RES_CODE VARCHAR(20) NOT NULL, SIGN_CODE CHAR(1), 
			RES_COUNT INT, TOTAL_SALE_PRICE DECIMAL, ONE_PROFIT_PRICE DECIMAL, SET_TYPE VARCHAR(10), SET_RATE INT);
		CREATE NONCLUSTERED INDEX #IDX_LAST_LIST ON #LAST_LIST (MASTER_CODE, PRO_CODE, RES_CODE);
		'

		-- 대상 예약 검색
	SET @TABLE_RES_LIST = N'
			-- 대상예약조회
			SELECT
				A.MASTER_CODE, A.PRO_CODE, B.RES_CODE, C.SIGN_CODE,
				(CASE WHEN D.BRANCH_RATE > 0 THEN ''NEW'' WHEN D.PROFIT_RATE < 100 THEN ''OLD'' ELSE ''NORMAL'' END) AS [SET_TYPE],
				(CASE WHEN D.BRANCH_RATE > 0 THEN D.BRANCH_RATE WHEN D.PROFIT_RATE < 100 THEN D.PROFIT_RATE ELSE 0 END) AS [SET_RATE]
			FROM SET_MASTER A WITH(NOLOCK)
			INNER JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.PRO_CODE = B.PRO_CODE
			INNER JOIN PKG_MASTER C WITH(NOLOCK) ON A.MASTER_CODE = C.MASTER_CODE
			LEFT JOIN SET_PROFIT D WITH(NOLOCK) ON B.RES_CODE = D.RES_CODE
			' + @WHERE1 + N'
		'

		-- 전체행사의 판매가 및 예약자 수
	SET @TABLE_RES_TOTAL_PRICE_LIST = N'
			SELECT MAX(B.PRO_CODE) AS [PRO_CODE]
				, (SELECT COUNT(*) FROM RES_CUSTOMER_damo RC WITH(NOLOCK) WHERE RC.RES_CODE = A.RES_CODE AND RC.RES_STATE IN (0, 3, 4)) AS [RES_COUNT]
				, (MAX(ISNULL(A.SALE_PRICE, 0)) + MAX(ISNULL(A.CHG_PRICE, 0)) - MAX(ISNULL(A.DC_PRICE, 0)) + MAX(ISNULL(A.TAX_PRICE, 0)) + MAX(ISNULL(A.PENALTY_PRICE, 0)) + 0.0) AS [TOTAL_SALE_PRICE]
			FROM RES_HTL_ROOM_MASTER A WITH(NOLOCK)
			INNER JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE AND B.RES_STATE <= 7
			INNER JOIN (
				' + @TABLE_RES_LIST + N'
			) C ON A.RES_CODE = C.RES_CODE
			GROUP BY A.RES_CODE
			UNION ALL
			SELECT MAX(B.PRO_CODE) AS [PRO_CODE], A.RES_CODE
				, SUM(CASE WHEN A.RES_STATE IN (0, 3, 4) THEN 1 ELSE 0 END) AS [RES_COUNT]
				, (SUM(ISNULL(A.SALE_PRICE, 0)) + SUM(ISNULL(A.CHG_PRICE, 0)) - SUM(ISNULL(A.DC_PRICE, 0)) + SUM(ISNULL(A.TAX_PRICE, 0)) + SUM(ISNULL(A.PENALTY_PRICE, 0)) + 0.0) AS [TOTAL_SALE_PRICE]
			FROM RES_CUSTOMER_DAMO A WITH(NOLOCK)
			INNER JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
			INNER JOIN (
				' + @TABLE_RES_LIST + N'
			) C ON A.RES_CODE = C.RES_CODE
			WHERE B.PRO_TYPE < 3
			GROUP BY A.RES_CODE
			'

		-- 행사별 1인 수익
	SET @TABLE_ONE_PROFIT_PRICE_LIST = N'
			SELECT A.PRO_CODE,
				(((CASE WHEN A.알선수익 > 0 THEN (A.알선수익/1.1) ELSE A.알선수익 END) + A.항공수익 + A.기타수익 - A.기타경비) / A.TOTAL_RES_COUNT) AS [ONE_PROFIT_PRICE]
			FROM (
				SELECT A.PRO_CODE, A.TOTAL_RES_COUNT,
					(ISNULL(SALE_PRICE,0) - (ISNULL(AIR_PRICE,0) + ISNULL(LAND_PRICE,0) + ISNULL(PERSON_PRICE,0) + ISNULL(GROUP_PRICE,0) + ISNULL(AIR_PROFIT,0) + ISNULL(AIR_ETC_PRICE,0))) AS [알선수익],
					(ISNULL(AIR_PROFIT,0) + ISNULL(AIR_ETC_COM_PROFIT,0) - ISNULL(AIR_ETC_COM_PRICE,0)) AS [항공수익],
					(ISNULL(PERSON_PROFIT,0) + ISNULL(AIR_ETC_PROFIT,0)) AS [기타수익],
					(ISNULL(PERSON_ETC_PRICE,0) + ISNULL(AGENT_COM_PRICE,0) + ISNULL(PAY_COM_PRICE,0)) AS [기타경비]
				FROM (
					SELECT
						A.PRO_CODE, A.TOTAL_RES_COUNT,
						A.TOTAL_PRICE AS [SALE_PRICE],
						ISNULL(B_1.AIR_PROFIT, 0) AS AIR_PROFIT, ISNULL(B_1.AIR_PRICE, 0) AS AIR_PRICE, 
						ISNULL(B_1.AIR_SALE_PRICE, 0) AS AIR_SALE_PRICE, ISNULL(C.LAND_COM_PRICE, 0) AS LAND_COM_PRICE, 
						ISNULL(C.LAND_PRICE, 0) AS LAND_PRICE, ISNULL(D.GROUP_PRICE, 0) AS GROUP_PRICE, ISNULL(D.GROUP_PROFIT, 0) AS GROUP_PROFIT, 
						ISNULL(E.PERSON_PRICE, 0) AS PERSON_PRICE, ISNULL(E.PERSON_PROFIT, 0) AS PERSON_PROFIT, ISNULL(E.PERSON_ETC_PRICE, 0) AS PERSON_ETC_PRICE, 
						ISNULL(F.AGENT_COM_PRICE, 0) AS AGENT_COM_PRICE, ISNULL(G.PAY_COM_PRICE, 0) AS PAY_COM_PRICE, 
						ISNULL(H.AIR_ETC_PROFIT, 0) AS AIR_ETC_PROFIT, ISNULL(H.AIR_ETC_PRICE, 0) AS AIR_ETC_PRICE, dbo.FN_PRO_GET_RES_COUNT(A.PRO_CODE) AS RES_COUNT, 
						H.AIR_ETC_COM_PRICE, H.AIR_ETC_COM_PROFIT--, A.PROFIT_TEAM_CODE, A.PROFIT_TEAM_NAME, A.DEP_DATE, A.ARR_DATE
					FROM (
						SELECT A.PRO_CODE, SUM(CONVERT(DECIMAL, A.TOTAL_SALE_PRICE)) AS [TOTAL_PRICE], SUM(A.RES_COUNT) AS [TOTAL_RES_COUNT]
						FROM (
							' + @TABLE_RES_TOTAL_PRICE_LIST + N'
						) A
						GROUP BY A.PRO_CODE
					) A
					LEFT OUTER JOIN (
					-- 항공기 거래처별 고객
						SELECT
							PRO_CODE, SUM(ISNULL(COMM_PRICE, 0)) AS AIR_PROFIT, SUM(ISNULL(PAY_PRICE, 0)) AS AIR_PRICE, SUM(ISNULL(NET_PRICE, 0) + ISNULL(TAX_PRICE, 0)) AS AIR_SALE_PRICE
						FROM dbo.SET_AIR_CUSTOMER WITH(NOLOCK)
						GROUP BY PRO_CODE
					) AS B_1 ON B_1.PRO_CODE = A.PRO_CODE
					LEFT OUTER JOIN (
					-- 지상비 거래처
						SELECT
							PRO_CODE, SUM(ISNULL(COM_PRICE, 0)) AS LAND_COM_PRICE, SUM(ISNULL(PAY_PRICE, 0) + ISNULL(VAT_PRICE, 0)) AS LAND_PRICE
						FROM dbo.SET_LAND_AGENT WITH(NOLOCK)
						GROUP BY PRO_CODE
					) AS C ON C.PRO_CODE = A.PRO_CODE
					LEFT OUTER JOIN (
					-- 공동 경비
						SELECT
							PRO_CODE, SUM(CASE WHEN PROFIT_YN = ''N'' THEN ISNULL(PRICE, 0) ELSE 0 END) AS GROUP_PRICE, 
							SUM(CASE WHEN PROFIT_YN = ''Y'' THEN ISNULL(PRICE, 0) ELSE 0 END) AS GROUP_PROFIT
						FROM dbo.SET_GROUP WITH(NOLOCK)
						GROUP BY PRO_CODE
					) AS D ON D.PRO_CODE = A.PRO_CODE
					LEFT OUTER JOIN (
					-- 개인 경비
						SELECT
							PRO_CODE, SUM(ISNULL(INS_PRICE, 0) + ISNULL(PASS_PRICE, 0) + ISNULL(VISA_PRICE, 0) + ISNULL(TAX_PRICE, 0)) AS PERSON_PRICE, 
							SUM(ISNULL(ETC_PROFIT, 0)) AS PERSON_PROFIT, SUM(ISNULL(ETC_PRICE, 0)) AS PERSON_ETC_PRICE
						FROM dbo.SET_CUSTOMER WITH(NOLOCK)
					GROUP BY PRO_CODE
					) AS E ON E.PRO_CODE = A.PRO_CODE
					LEFT OUTER JOIN (
						SELECT
							PRO_CODE, ISNULL(AGENT_COM_PRICE, 0) AS AGENT_COM_PRICE
						FROM (
							SELECT
								PRO_CODE, SUM(
									CASE
										WHEN COMM_RATE = 0 THEN ISNULL(COMM_AMT, 0) 
										ELSE ISNULL(COMM_RATE, 0) * 0.01 * ISNULL((
											-- 네이버 대리점 수수료 예외처리
											CASE
												WHEN PROVIDER = 41 THEN dbo.FN_RES_GET_TOTAL_PRICE(RES_CODE)
												ELSE dbo.FN_RES_GET_SALE_PRICE(RES_CODE)
											END), 0)
									END) AS AGENT_COM_PRICE
							FROM dbo.RES_MASTER_DAMO WITH (NOLOCK)
							WHERE (RES_STATE NOT IN (8, 9))
							GROUP BY PRO_CODE
						) AS X
					) AS F ON F.PRO_CODE = A.PRO_CODE
					LEFT OUTER JOIN (
						-- 입금내역
						SELECT
							B.PRO_CODE, SUM(CASE WHEN A.COM_RATE = 0 AND A.COM_PRICE <> 0 AND A.PAY_TYPE = 12 THEN A.COM_PRICE ELSE ISNULL(ISNULL(A.COM_RATE, 0) * ISNULL(B.PART_PRICE, 0) * 0.01, 0) END) AS PAY_COM_PRICE
						FROM dbo.PAY_MASTER_damo AS A WITH (NOLOCK)
						INNER JOIN dbo.PAY_MATCHING AS B WITH (NOLOCK) ON B.PAY_SEQ = A.PAY_SEQ
						WHERE (B.CXL_YN = ''N'')
						GROUP BY B.PRO_CODE
					) AS G ON G.PRO_CODE = A.PRO_CODE
					LEFT OUTER JOIN (
						-- 항공비 거래처
						SELECT
							PRO_CODE, SUM(ISNULL(AIR_ETC_PROFIT, 0)) AS AIR_ETC_PROFIT, SUM(ISNULL(AIR_ETC_PRICE, 0)) AS AIR_ETC_PRICE, 
							SUM(CASE WHEN COM_RATE > 0 THEN - 1 * ISNULL(COM_RATE, 0) * 0.01 * ISNULL(AIR_ETC_PRICE, 0) ELSE ISNULL(CASE WHEN COMM_PRICE < 0 THEN COMM_PRICE ELSE 0 END, 0) END) AS AIR_ETC_COM_PRICE, 
							SUM(CASE WHEN COM_RATE > 0 THEN ISNULL(COM_RATE, 0) * 0.01 * ISNULL(AIR_ETC_PROFIT, 0) ELSE ISNULL(CASE WHEN COMM_PRICE > 0 THEN COMM_PRICE ELSE 0 END, 0) END) AS AIR_ETC_COM_PROFIT
						FROM dbo.SET_AIR_AGENT WITH (NOLOCK)
						GROUP BY PRO_CODE
					) AS H ON H.PRO_CODE = A.PRO_CODE
				) A
			) A
			'
	SET @SQLSTRING = @SQLSTRING + N'
		
		INSERT INTO #LAST_LIST (MASTER_CODE, PRO_CODE, RES_CODE, SIGN_CODE, RES_COUNT, TOTAL_SALE_PRICE, ONE_PROFIT_PRICE, SET_TYPE, SET_RATE)
		SELECT A.MASTER_CODE, A.PRO_CODE, A.RES_CODE, A.SIGN_CODE, B.RES_COUNT, B.TOTAL_SALE_PRICE, C.ONE_PROFIT_PRICE, A.SET_TYPE, A.SET_RATE
		FROM (' + @TABLE_RES_LIST + N') A
		INNER JOIN (' + @TABLE_RES_TOTAL_PRICE_LIST + N') B ON A.RES_CODE = B.RES_CODE
		INNER JOIN (' + @TABLE_ONE_PROFIT_PRICE_LIST + N') C ON A.PRO_CODE = C.PRO_CODE;'


	PRINT CAST(@SQLSTRING AS TEXT);


		-- 조회쿼리
	SET @TABLE_BRANCH_LIST = N'
			SELECT A.MASTER_CODE, A.PRO_CODE, A.RES_CODE, A.RES_COUNT, A.SIGN_CODE, A.TOTAL_SALE_PRICE, A.SET_TYPE, A.SET_RATE, A.ONE_PROFIT_PRICE,
				(
					CASE A.SET_TYPE
						WHEN ''NEW'' THEN DBO.FN_SET_GET_RES_BRANCH_PRICE(A.RES_CODE)
						WHEN ''OLD'' THEN (A.ONE_PROFIT_PRICE * A.RES_COUNT * (ISNULL(A.SET_RATE, 0) * 0.01))
					END
				) AS [BRANCH_PROFIT]
			FROM #LAST_LIST A
			WHERE A.SET_TYPE <> ''NORMAL''
			'

	SET @TABLE_GROUP_LIST = N'
			SELECT 1 AS BRANCH_ORDER, A.ONE_PROFIT_PRICE,
				(CASE A.SET_TYPE WHEN ''NORMAL'' THEN A.RES_COUNT ELSE 0 END) AS [RES_COUNT],
				--A.RES_COUNT,
				A.TOTAL_SALE_PRICE,
				A.MASTER_CODE, A.PRO_CODE, A.RES_CODE, A.SIGN_CODE,
				(
					CASE A.SET_TYPE
						WHEN ''NEW'' THEN (A.ONE_PROFIT_PRICE * A.RES_COUNT - C.BRANCH_PROFIT)
						WHEN ''OLD'' THEN (A.ONE_PROFIT_PRICE * A.RES_COUNT * ((100 - A.SET_RATE) * 0.01))
						ELSE A.ONE_PROFIT_PRICE * A.RES_COUNT
					END
				) AS [BRANCH_PROFIT],
				(A.ONE_PROFIT_PRICE * A.RES_COUNT) AS TOTAL_PROFIT_PRICE,
				A.SET_TYPE,
				(100 - A.SET_RATE) AS [SET_RATE],
				(CASE WHEN @EMP_TYPE = 0 THEN (CASE A.SET_TYPE WHEN ''NORMAL'' THEN B.PROFIT_EMP_CODE ELSE B.NEW_CODE END) ELSE B.SALE_EMP_CODE END) AS [PROFIT_EMP_CODE],
				(CASE WHEN @EMP_TYPE = 0 THEN (CASE A.SET_TYPE WHEN ''NORMAL'' THEN B.PROFIT_TEAM_CODE ELSE B.NEW_TEAM_CODE END) ELSE B.SALE_TEAM_CODE END) AS [PROFIT_TEAM_CODE],
				(CASE WHEN @EMP_TYPE = 0 THEN (CASE A.SET_TYPE WHEN ''NORMAL'' THEN B.PROFIT_TEAM_NAME ELSE B.NEW_TEAM_NAME END) ELSE B.SALE_TEAM_NAME END) AS [PROFIT_TEAM_NAME]
			FROM #LAST_LIST A
			INNER JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
			LEFT JOIN (' + @TABLE_BRANCH_LIST + N') C ON A.RES_CODE = C.RES_CODE
			UNION
			SELECT 2 AS BRANCH_ORDER, A.ONE_PROFIT_PRICE,
				A.RES_COUNT,
				A.TOTAL_SALE_PRICE, 
				A.MASTER_CODE, A.PRO_CODE, A.RES_CODE, A.SIGN_CODE,
				A.BRANCH_PROFIT,
				(A.ONE_PROFIT_PRICE * A.RES_COUNT) AS TOTAL_PROFIT_PRICE,
				A.SET_TYPE,
				A.SET_RATE,
				(CASE WHEN @EMP_TYPE = 0 THEN B.PROFIT_EMP_CODE ELSE B.SALE_EMP_CODE END) AS [PROFIT_EMP_CODE],
				(CASE WHEN @EMP_TYPE = 0 THEN B.PROFIT_TEAM_CODE ELSE B.SALE_TEAM_CODE END) AS [PROFIT_TEAM_CODE],
				(CASE WHEN @EMP_TYPE = 0 THEN B.PROFIT_TEAM_NAME ELSE B.SALE_TEAM_NAME END) AS [PROFIT_TEAM_NAME]
			FROM (' + @TABLE_BRANCH_LIST + N') A
			INNER JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
			'
END


IF @LIST_TYPE = 2
BEGIN
	SET @TABLE_LAND_LIST = N'
		UNION
		'
END

IF @LIST_TYPE IN (1, 2)
BEGIN
	SET @TABLE_LAND_LIST = @TABLE_LAND_LIST + N'
		SELECT 3 AS [BRANCH_ORDER], 0 AS [ONE_PROFIT_PRICE],
			0 AS [RES_COUNT],
			MAX(A.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE],
			MAX(A.MASTER_CODE) AS MASTER_CODE, A.PRO_CODE, '''' AS [RES_CODE], MAX(A.SIGN_CODE) AS [SIGN_CODE], 
			SUM(ISNULL(A.TOTAL_SALE_PRICE, 0) - (ISNULL(PAY_PRICE, 0) + ISNULL(VAT_PRICE, 0))) AS [BRANCH_PROFIT],
			0 AS [TOTAL_PROFIT_PRICE],
			''NORMAL'' AS [SET_TYPE],
			0 AS [SET_RATE],
			MAX(A.PROFIT_EMP_CODE) AS [PROFIT_EMP_CODE],
			MAX(A.PROFIT_TEAM_CODE) AS [PROFIT_TEAM_CODE],
			MAX(A.PROFIT_TEAM_NAME) AS [PROFIT_TEAM_NAME]
		FROM (
			SELECT
				A.MASTER_CODE, A.PRO_CODE, C.SIGN_CODE, ISNULL(dbo.FN_PRO_GET_TOTAL_PRICE(A.PRO_CODE), 0) AS TOTAL_SALE_PRICE,
				A.NEW_CODE AS [PROFIT_EMP_CODE], A.PROFIT_TEAM_CODE, A.PROFIT_TEAM_NAME
			FROM SET_MASTER A WITH(NOLOCK)
			INNER JOIN PKG_DETAIL B WITH(NOLOCK) ON A.PRO_CODE = B.PRO_CODE
			INNER JOIN PKG_MASTER C WITH(NOLOCK) ON A.MASTER_CODE = C.MASTER_CODE
			INNER JOIN EMP_MASTER_damo D WITH(NOLOCK) ON B.NEW_CODE = D.EMP_CODE
			' + @WHERE2 + N'
		) A
		INNER JOIN SET_LAND_AGENT B WITH(NOLOCK) ON A.PRO_CODE = B.PRO_CODE
		WHERE (
			SELECT COUNT(*) 
			FROM RES_MASTER_damo Z WITH(NOLOCK) 
			INNER JOIN RES_CUSTOMER_damo Y WITH(NOLOCK) ON Z.RES_CODE = Y.RES_CODE 
			WHERE Z.PRO_CODE = A.PRO_CODE AND Z.RES_STATE <= 7 AND Y.RES_STATE IN (0, 3, 4)
		) = 0
		GROUP BY A.PRO_CODE
		'
END

	-- 본사, 지점, 지상비 결합
	SET @TABLE_GROUP_LIST = N'
		' + @TABLE_GROUP_LIST + N'
		' + @TABLE_LAND_LIST

--	PRINT CAST(@TABLE_GROUP_LIST AS TEXT);

-- 그룹 기준 (0 행사코드, 1 마스터코드)
IF @GROUP = 0
BEGIN
	SET @SQLSTRING = @SQLSTRING + N'
	SELECT 
		ISNULL(A.PRO_CODE, '''') AS [PRO_CODE], 
		ISNULL(A.REGION_NAME, '''') AS [REGION_NAME],
		ISNULL(A.PRO_NAME, ''소계'') AS [PRO_NAME], 
		A.DEP_DATE,
		A.ARR_DATE,
		SUM(ISNULL(A.RES_COUNT, 0)) AS [RES_COUNT],
		SUM(ISNULL(A.BRANCH_PROFIT, 0)) AS [PROFIT],
		SUM(ISNULL(A.TOTAL_SALE_PRICE, 0)) AS [SALE_PRICE],
		ISNULL(A.PROFIT_EMP_CODE, '''') AS [PROFIT_EMP_CODE],
		ISNULL(A.PROFIT_TEAM_CODE, '''') AS [PROFIT_TEAM_CODE],
		ISNULL(A.PROFIT_TEAM_NAME, '''') AS [PROFIT_TEAM_NAME],
		ISNULL(A.SET_TYPE, '''') AS [SET_TYPE],
		ISNULL(A.BRANCH_ORDER, 0) AS [BRANCH_ORDER],
		ISNULL(A.GROUP_ORDER, 2) AS [GROUP_ORDER]
	FROM (
		SELECT
			A.PRO_CODE,
			(CASE WHEN @ORDER = 0 THEN (SELECT Z.KOR_NAME FROM PUB_REGION Z WITH(NOLOCK) WHERE Z.SIGN = MAX(A.SIGN_CODE)) ELSE A.PROFIT_TEAM_NAME END) AS [REGION_NAME],
			MAX(B.PRO_NAME) AS [PRO_NAME],
			--CONVERT(VARCHAR(10), MAX(B.DEP_DATE), 120) AS [DEP_DATE],
			MAX(B.DEP_DATE) AS [DEP_DATE],
			MAX(B.ARR_DATE) AS [ARR_DATE],
			--SUM(A.RES_COUNT) AS [RES_COUNT],
			MAX(C.RES_COUNT) AS [RES_COUNT],
			SUM(A.BRANCH_PROFIT) AS [BRANCH_PROFIT],
			--SUM(A.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE],
			MAX(C.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE],
			--MAX(A.TOTAL_PROFIT_PRICE) AS [TOTAL_PROFIT_PRICE],
			--MAX(A.ONE_PROFIT_PRICE) AS [ONE_PROFIT_PRICE],
			MAX(A.PROFIT_EMP_CODE) AS [PROFIT_EMP_CODE],
			MAX(A.PROFIT_TEAM_CODE) AS [PROFIT_TEAM_CODE],
			A.PROFIT_TEAM_NAME,
			MAX(A.SET_TYPE) AS [SET_TYPE],
			MAX(A.BRANCH_ORDER) AS [BRANCH_ORDER],
			1 AS [GROUP_ORDER]
		FROM (' + @TABLE_GROUP_LIST + N') A
		INNER JOIN PKG_DETAIL B WITH(NOLOCK) ON A.PRO_CODE = B.PRO_CODE
		INNER JOIN (
			SELECT AA.PRO_CODE, AA.PROFIT_TEAM_NAME, SUM(AA.RES_COUNT) AS [RES_COUNT], SUM(AA.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
			FROM (
				SELECT MAX(AA.PRO_CODE) AS [PRO_CODE], AA.RES_CODE, AA.PROFIT_TEAM_NAME, MAX(AA.RES_COUNT) AS [RES_COUNT], MAX(AA.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
				FROM (' + @TABLE_GROUP_LIST + N') AA
				GROUP BY AA.RES_CODE, AA.PROFIT_TEAM_NAME
			) AA
			GROUP BY AA.PRO_CODE, AA.PROFIT_TEAM_NAME
		) C ON A.PRO_CODE = C.PRO_CODE AND A.PROFIT_TEAM_NAME = C.PROFIT_TEAM_NAME
		' + @WHERE3 + N'
		GROUP BY A.PRO_CODE, A.PROFIT_TEAM_NAME
	) A
	GROUP BY GROUPING SETS ((A.PRO_CODE, A.REGION_NAME, A.PRO_NAME, A.DEP_DATE, A.ARR_DATE, A.RES_COUNT, A.BRANCH_PROFIT, A.TOTAL_SALE_PRICE, A.PROFIT_EMP_CODE, A.PROFIT_TEAM_CODE, A.PROFIT_TEAM_NAME, A.SET_TYPE, A.BRANCH_ORDER, A.GROUP_ORDER), (A.REGION_NAME))
	--ORDER BY (CASE WHEN @ORDER = 0 THEN MAX(A.SIGN_CODE) ELSE A.PROFIT_TEAM_NAME END), MAX(B.DEP_DATE), A.PRO_CODE, MAX(A.BRANCH_ORDER) DESC
	ORDER BY A.REGION_NAME, ISNULL(A.GROUP_ORDER, 2), A.DEP_DATE, A.PRO_CODE, A.BRANCH_ORDER DESC;
	
	-- 요약
	SELECT COUNT(*) AS [TOTAL_COUNT], SUM(A.RES_COUNT) AS [TOTAL_RES_COUNT], SUM(A.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE], SUM(A.BRANCH_PROFIT) AS [TOTAL_PROFIT_PRICE]
	FROM (
		SELECT
			A.PRO_CODE,
			--MAX(B.RES_COUNT) AS [RES_COUNT],
			SUM(A.RES_COUNT) AS [RES_COUNT],
			SUM(A.BRANCH_PROFIT) AS [BRANCH_PROFIT],
			MAX(B.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
		FROM (' + @TABLE_GROUP_LIST + N') A
		INNER JOIN (
			SELECT AA.PRO_CODE, AA.PROFIT_TEAM_NAME, SUM(AA.RES_COUNT) AS [RES_COUNT], SUM(AA.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
			FROM (
				SELECT MAX(AA.PRO_CODE) AS [PRO_CODE], AA.RES_CODE, AA.PROFIT_TEAM_NAME, MAX(AA.RES_COUNT) AS [RES_COUNT], MAX(AA.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
				FROM (' + @TABLE_GROUP_LIST + N') AA
				GROUP BY AA.RES_CODE, AA.PROFIT_TEAM_NAME
			) AA
			GROUP BY AA.PRO_CODE, AA.PROFIT_TEAM_NAME
		) B ON A.PRO_CODE = B.PRO_CODE AND A.PROFIT_TEAM_NAME = B.PROFIT_TEAM_NAME
		' + @WHERE3 + N'
		GROUP BY A.PRO_CODE
	) A;
	'
END
ELSE
BEGIN
	SET @SQLSTRING = @SQLSTRING + N'
	SELECT 
		ISNULL(A.PRO_CODE, '''') AS [PRO_CODE], 
		ISNULL(A.REGION_NAME, ''소계'') AS [REGION_NAME],
		ISNULL(A.PRO_NAME, '''') AS [PRO_NAME], 
		A.DEP_DATE,
		A.ARR_DATE,
		SUM(ISNULL(A.RES_COUNT, 0)) AS [RES_COUNT],
		SUM(ISNULL(A.BRANCH_PROFIT, 0)) AS [PROFIT],
		SUM(ISNULL(A.TOTAL_SALE_PRICE, 0)) AS [SALE_PRICE],
		ISNULL(A.PROFIT_EMP_CODE, '''') AS [PROFIT_EMP_CODE],
		ISNULL(A.PROFIT_TEAM_CODE, '''') AS [PROFIT_TEAM_CODE],
		ISNULL(A.PROFIT_TEAM_NAME, '''') AS [PROFIT_TEAM_NAME],
		ISNULL(A.SET_TYPE, '''') AS [SET_TYPE],
		ISNULL(A.BRANCH_ORDER, 0) AS [BRANCH_ORDER],
		ISNULL(A.GROUP_ORDER, 2) AS [GROUP_ORDER]
	FROM (
		SELECT
			A.MASTER_CODE AS [PRO_CODE],
			(CASE WHEN @ORDER = 0 THEN (SELECT Z.KOR_NAME FROM PUB_REGION Z WITH(NOLOCK) WHERE Z.SIGN = MAX(A.SIGN_CODE)) ELSE A.PROFIT_TEAM_NAME END) AS [REGION_NAME],
			--(SELECT Z.KOR_NAME FROM PUB_REGION Z WITH(NOLOCK) WHERE Z.SIGN = MAX(A.SIGN_CODE)) AS REGION_NAME,
			MAX(B.MASTER_NAME) AS [PRO_NAME],
			NULL AS [DEP_DATE],
			NULL AS [ARR_DATE],
			--SUM(A.RES_COUNT) AS [RES_COUNT],
			MAX(C.RES_COUNT) AS [RES_COUNT],
			SUM(A.BRANCH_PROFIT) AS [BRANCH_PROFIT],
			--SUM(A.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE],
			MAX(C.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE],
			--MAX(A.TOTAL_PROFIT_PRICE) AS [TOTAL_PROFIT_PRICE],
			MAX(A.PROFIT_EMP_CODE) AS [PROFIT_EMP_CODE],
			MAX(A.PROFIT_TEAM_CODE) AS [PROFIT_TEAM_CODE],
			A.PROFIT_TEAM_NAME,
			MAX(A.SET_TYPE) AS [SET_TYPE],
			MAX(A.BRANCH_ORDER) AS [BRANCH_ORDER],
			1 AS [GROUP_ORDER]
		FROM (' + @TABLE_GROUP_LIST + N') A
		INNER JOIN PKG_MASTER B WITH(NOLOCK) ON A.MASTER_CODE = B.MASTER_CODE
		INNER JOIN (
			SELECT AA.MASTER_CODE, AA.PROFIT_TEAM_NAME, SUM(AA.RES_COUNT) AS [RES_COUNT], SUM(AA.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
			FROM (
				SELECT MAX(AA.MASTER_CODE) AS [MASTER_CODE], AA.RES_CODE, AA.PROFIT_TEAM_NAME, MAX(AA.RES_COUNT) AS [RES_COUNT], MAX(AA.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
				FROM (' + @TABLE_GROUP_LIST + N') AA
				GROUP BY AA.RES_CODE, AA.PROFIT_TEAM_NAME
			) AA
			GROUP BY AA.MASTER_CODE, AA.PROFIT_TEAM_NAME
		) C ON A.MASTER_CODE = C.MASTER_CODE AND A.PROFIT_TEAM_NAME = C.PROFIT_TEAM_NAME
		' + @WHERE3 + N'
		GROUP BY A.MASTER_CODE, A.PROFIT_TEAM_NAME
	) A
	GROUP BY GROUPING SETS ((A.PRO_CODE, A.REGION_NAME, A.PRO_NAME, A.DEP_DATE, A.ARR_DATE, A.RES_COUNT, A.BRANCH_PROFIT, A.TOTAL_SALE_PRICE, A.PROFIT_EMP_CODE, A.PROFIT_TEAM_CODE, A.PROFIT_TEAM_NAME, A.SET_TYPE, A.BRANCH_ORDER, A.GROUP_ORDER), (A.REGION_NAME))
	--ORDER BY (CASE WHEN @ORDER = 0 THEN MAX(A.SIGN_CODE) ELSE A.PROFIT_TEAM_NAME END), A.MASTER_CODE, MAX(A.BRANCH_ORDER) DESC;
	ORDER BY A.REGION_NAME, ISNULL(A.GROUP_ORDER, 2), A.PRO_CODE, A.BRANCH_ORDER DESC;
	
	-- 요약
	SELECT COUNT(*) AS [TOTAL_COUNT], SUM(A.RES_COUNT) AS [TOTAL_RES_COUNT], SUM(A.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE], SUM(A.BRANCH_PROFIT) AS [TOTAL_PROFIT_PRICE]
	FROM (
		SELECT
			A.MASTER_CODE,
			--MAX(B.RES_COUNT) AS [RES_COUNT],
			SUM(A.RES_COUNT) AS [RES_COUNT],
			SUM(A.BRANCH_PROFIT) AS [BRANCH_PROFIT],
			MAX(B.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
		FROM (' + @TABLE_GROUP_LIST + N') A
		INNER JOIN (
			SELECT AA.MASTER_CODE, AA.PROFIT_TEAM_NAME, SUM(AA.RES_COUNT) AS [RES_COUNT], SUM(AA.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
			FROM (
				SELECT MAX(AA.MASTER_CODE) AS [MASTER_CODE], AA.RES_CODE, AA.PROFIT_TEAM_NAME, MAX(AA.RES_COUNT) AS [RES_COUNT], MAX(AA.TOTAL_SALE_PRICE) AS [TOTAL_SALE_PRICE]
				FROM (' + @TABLE_GROUP_LIST + N') AA
				GROUP BY AA.RES_CODE, AA.PROFIT_TEAM_NAME
			) AA
			GROUP BY AA.MASTER_CODE, AA.PROFIT_TEAM_NAME
		) B ON A.MASTER_CODE = B.MASTER_CODE AND A.PROFIT_TEAM_NAME = B.PROFIT_TEAM_NAME
		' + @WHERE3 + N'
		GROUP BY A.MASTER_CODE
	) A;
	'
END

	SET @PARMDEFINITION = N'
		@DATE_TYPE INT,
		@EMP_TYPE INT,
		@START_DATE DATETIME,
		@END_DATE DATETIME,
		@REGION CHAR(1),
		@NATION_CODE VARCHAR(30),
		@CITY_CODE VARCHAR(30),
		@MASTER_CODE VARCHAR(20),
		@ATTRIBUTE CHAR(1),
		@TEAM_CODE VARCHAR(3),
		@EMP_CODE VARCHAR(7),
		@ORDER INT';

	--PRINT @SQLSTRING;
		
	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION,
		@DATE_TYPE,
		@EMP_TYPE,
		@START_DATE,
		@END_DATE,
		@REGION,
		@NATION_CODE,
		@CITY_CODE,
		@MASTER_CODE,
		@ATTRIBUTE,
		@TEAM_CODE,
		@EMP_CODE,
		@ORDER;

	SET NOCOUNT OFF
END



GO
