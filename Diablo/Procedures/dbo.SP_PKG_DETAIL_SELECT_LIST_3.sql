USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- 2009-10-19일까지만 사용하고 2009-10-20일부터는 LIST_4를 사용
CREATE PROCEDURE [dbo].[SP_PKG_DETAIL_SELECT_LIST_3]
	@MASTER_CODE	VARCHAR(10),
	@PRO_CODE		VARCHAR(20),
	@TEAM_CODE		VARCHAR(3),
	@START_DATE		DATETIME,
	@END_DATE		DATETIME,
	@REGION_CODE	VARCHAR(1),
	@RES_YN			INT
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	DECLARE @SQLSTRING NVARCHAR(4000), @PARMDEFINITION NVARCHAR(1000), @START VARCHAR(10), @END VARCHAR(10);

	-- WHERE 조건 만들기
	SET @SQLSTRING = '';
	SET @START = ISNULL(CONVERT(VARCHAR(10), @START_DATE, 120), '')
	SET @END = ISNULL(CONVERT(VARCHAR(10), DATEADD(DAY, 1, @END_DATE), 120), '')

		-- 마스터코드
	IF ISNULL(@MASTER_CODE, '') <> ''
		SET @SQLSTRING = @SQLSTRING + ' A.MASTER_CODE = @MASTER_CODE AND'
	
		-- 행사코드
	IF ISNULL(@PRO_CODE, '') <> ''
		SET @SQLSTRING = @SQLSTRING + ' A.PRO_CODE LIKE @PRO_CODE + ''%'' AND'

		-- 출발일
	IF ISNULL(@START, '') <> '' AND ISNULL(@END, '') <> ''
	BEGIN
		SET @SQLSTRING = @SQLSTRING + ' A.DEP_DATE >= @START AND A.DEP_DATE < @END AND'
	END
	ELSE IF ISNULL(@START_DATE, '') <> '' AND ISNULL(@END_DATE, '') = ''
	BEGIN
		SET @SQLSTRING = @SQLSTRING + ' A.DEP_DATE >= @START_DATE AND'
	END
	ELSE IF ISNULL(@START_DATE, '') = '' AND ISNULL(@END_DATE, '') <> ''
	BEGIN
		SET @SQLSTRING = @SQLSTRING + ' A.DEP_DATE < @END_DATE + 1 AND'
	END

	-- 지역
	IF ISNULL(@REGION_CODE, '') <> ''
	BEGIN
		SET @SQLSTRING = @SQLSTRING + ' C.SIGN_CODE = @REGION_CODE AND';
	END

		-- 팀코드
	IF ISNULL(@TEAM_CODE, '') <> ''
	BEGIN
		SET @SQLSTRING = @SQLSTRING + ' A.NEW_CODE IN (SELECT EMP_CODE  WITH(NOLOCK) FROM EMP_MASTER WHERE TEAM_CODE = @TEAM_CODE) AND'
	END

		-- @예약자 유무
	IF @RES_YN > 0
		SET @SQLSTRING = @SQLSTRING + ' DBO.FN_PRO_GET_RES_COUNT(A.PRO_CODE) > 0 AND'
		--SET @SQLSTRING = @SQLSTRING + ' AND ' + CASE @RES_YN WHEN 2 THEN 'NOT ' ELSE '' END + 'EXISTS(SELECT 1 FROM RES_MASTER_damo WHERE PRO_CODE = A.PRO_CODE AND RES_STATE <= 7)'

	SET @SQLSTRING = N'
	SELECT A.DEP_CFM_YN, A.CONFIRM_YN, A.RES_ADD_YN, DBO.FN_PRO_GET_ACCOUNT_STATE(A.PRO_CODE) AS [ACCOUNT_TYPE]
		, A.PRO_CODE, A.DEP_DATE, B.DEP_DEP_TIME AS [DEP_TIME]
		, (SELECT TOP 1 ADT_PRICE FROM PKG_DETAIL_PRICE WHERE PRO_CODE = A.PRO_CODE) AS [PRO_PRICE]
		, B.DEP_TRANS_CODE, B.DEP_TRANS_NUMBER, A.PRO_NAME
		, DBO.FN_PRO_GET_RES_COUNT(A.PRO_CODE) AS [RES_COUNT]
		, FAKE_COUNT, MAX_COUNT, MIN_COUNT, B.SEAT_COUNT, C.SIGN_CODE
	FROM PKG_DETAIL A WITH(NOLOCK) 
	INNER JOIN PKG_MASTER C ON C.MASTER_CODE = A.MASTER_CODE 
	LEFT OUTER JOIN PRO_TRANS_SEAT B  WITH(NOLOCK) ON A.SEAT_CODE = B.SEAT_CODE
	WHERE' + SUBSTRING(@SQLSTRING, 0, LEN(@SQLSTRING) - 3) + '
	ORDER BY A.PRO_CODE'

	SET @PARMDEFINITION = N'@MASTER_CODE VARCHAR(10), @PRO_CODE VARCHAR(20), @TEAM_CODE VARCHAR(3), @START VARCHAR(10), @END VARCHAR(10), @RES_YN INT, @REGION_CODE VARCHAR(1)';

	PRINT @SQLSTRING
	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, @MASTER_CODE, @PRO_CODE, @TEAM_CODE, @START, @END, @RES_YN, @REGION_CODE
END

--	@MASTER_CODE, @PRO_CODE, @TEAM_CODE, @START_DATE, @END_DATE, @RES_YN
--	SP_PKG_DETAIL_SELECT_LIST_2 '', '', '', '2009-06-01', '2009-08-31', 0

--	SP_PKG_DETAIL_SELECT_LIST_2 '', '', '', '2009-09-29', '2009-11-29', 0


GO
