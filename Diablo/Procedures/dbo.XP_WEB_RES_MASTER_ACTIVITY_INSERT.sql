USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*================================================================================================================
■ USP_NAME					: XP_WEB_RES_MASTER_ACTIVITY_INSERT
■ DESCRIPTION				: 액티비티 예약 등록
■ INPUT PARAMETER			:

		@ACT_MASTER_CODE	: 선택된 액티비티 마스터코드
		@PARENT_RES_CODE	: 부모예약 코드

■ OUTPUT PARAMETER			: 

		@RES_CODE			: 액티비티 예약코드 (오류 시 NULL 리턴)

■ EXEC						: 

	exec XP_WEB_RES_MASTER_ACTIVITY_INSERT '', ''

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2019-12-06		김성호			최초생성
   2020-02-03		김성호			예약 전 관련 예약 체크 및 예약 시 RES_MASTER_CONNECT 등록
   2020-02-11		김성호			RES_PKG_DETAIL 테이블 등록 추가
================================================================================================================*/ 
CREATE PROC [dbo].[XP_WEB_RES_MASTER_ACTIVITY_INSERT]
	@ACT_MASTER_CODE	VARCHAR(10),
	@PARENT_RES_CODE	VARCHAR(20)
AS  
BEGIN

	-- 변수선언
	DECLARE @RES_CODE VARCHAR(20), @PARENT_PRO_CODE VARCHAR(20), @PRO_CODE VARCHAR(20), @DEP_DATE DATETIME
		, @PRO_CHAR CHAR(1), @PRO_TYPE INT, @CON_TYPE VARCHAR(2) = 'CN';
	
	BEGIN TRY

		BEGIN TRAN
			-- 액티비티 예약이 존재하지 않으면
			IF NOT EXISTS(
				SELECT 1
				FROM RES_MASTER_CONNECT A WITH(NOLOCK)
				INNER JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.CON_RES_CODE = B.RES_CODE AND B.RES_STATE < 7 -- 7 : 환불
				WHERE A.RES_CODE = @PARENT_RES_CODE AND A.CON_TYPE = @CON_TYPE
			)
			BEGIN
				
				-- 행사코드 구성
				SELECT @PARENT_PRO_CODE = B.PRO_CODE, @DEP_DATE = B.DEP_DATE, @PRO_CODE = (@ACT_MASTER_CODE + '-' + CONVERT(VARCHAR(6), B.DEP_DATE, 12))
					, @PRO_TYPE = A.PRO_TYPE
				FROM RES_MASTER_damo A WITH(NOLOCK)
				LEFT JOIN PKG_DETAIL B WITH(NOLOCK) ON A.PRO_CODE = B.PRO_CODE
				WHERE A.RES_CODE = @PARENT_RES_CODE

				-- 행사가 존재하지 않으면
				IF NOT EXISTS(SELECT 1 FROM PKG_DETAIL A WITH(NOLOCK) WHERE PRO_CODE = @PRO_CODE)
				BEGIN
					INSERT INTO PKG_DETAIL (
						PRO_CODE, PRO_NAME, MASTER_CODE, TRANSFER_TYPE, SEAT_CODE, DEP_DATE, ARR_DATE,
						TOUR_NIGHT, 
						TOUR_DAY,
						MIN_COUNT, MAX_COUNT,
						LAST_PAY_DATE, SENDING_YN, DEP_CFM_YN, CONFIRM_YN, SHOW_YN, NEW_CODE ,NEW_DATE, PRO_TYPE)
					SELECT
						@PRO_CODE, A.MASTER_NAME, A.MASTER_CODE, 3, 0, B.DEP_DATE, B.DEP_DATE, 0, 1, 1, 999,
						DATEADD(D, -1, B.DEP_DATE), 'N', 'N', 'Y', 'N', B.NEW_CODE, GETDATE(), B.PRO_TYPE
					FROM PKG_MASTER A WITH(NOLOCK)
					CROSS JOIN PKG_DETAIL B WITH(NOLOCK)
					WHERE A.MASTER_CODE = @ACT_MASTER_CODE AND B.PRO_CODE = @PARENT_PRO_CODE
				END
			
				-- 예약 타입 채번
				SELECT @PRO_CHAR = (CASE @PRO_TYPE WHEN 1 THEN 'P' WHEN 2 THEN 'T' WHEN 3 THEN 'H' WHEN 4 THEN 'F' WHEN 5 THEN 'O' END)

				EXEC SP_RES_GET_RES_CODE @PRO_CHAR, @RES_CODE OUTPUT;

				-- 예약 정보 등록
				INSERT INTO RES_MASTER_DAMO
				(
					RES_CODE,			PRICE_SEQ,			SYSTEM_TYPE,		PRO_CODE,
					PRO_TYPE,			RES_STATE,			RES_TYPE,			DEP_DATE,
					ARR_DATE,			RES_NAME,			
					BIRTH_DATE,			GENDER,
					RES_EMAIL,			NOR_TEL1,			NOR_TEL2,			NOR_TEL3,
					ETC_TEL1,			ETC_TEL2,			ETC_TEL3,			RES_ADDRESS1,
					RES_ADDRESS2,		ZIP_CODE,			MEMBER_YN,
					NEW_DATE,			NEW_CODE,			NEW_TEAM_CODE,		NEW_TEAM_NAME,
					SALE_EMP_CODE,		SALE_TEAM_CODE,		SALE_TEAM_NAME,		PROFIT_EMP_CODE,
					SALE_COM_CODE,		TAX_YN,				COMM_RATE ,			COMM_AMT , 
					PROFIT_TEAM_CODE,	PROFIT_TEAM_NAME,	CUS_NO,				LAST_PAY_DATE,
					MASTER_CODE,		PRO_NAME,			PROVIDER,
					IPIN_DUP_INFO,		RES_PRO_TYPE
				)
				SELECT
					@RES_CODE,			MONTH(@DEP_DATE),	SYSTEM_TYPE,		@PRO_CODE,
					A.PRO_TYPE,			A.RES_STATE,		A.RES_TYPE,			A.DEP_DATE,
					A.DEP_DATE,			A.RES_NAME,
					A.BIRTH_DATE,		A.GENDER,
					A.RES_EMAIL,		A.NOR_TEL1,			A.NOR_TEL2,			A.NOR_TEL3,
					A.ETC_TEL1,			A.ETC_TEL2,			A.ETC_TEL3,			A.RES_ADDRESS1,
					A.RES_ADDRESS2,		A.ZIP_CODE,			A.MEMBER_YN,
					GETDATE(),			A.NEW_CODE,			A.NEW_TEAM_CODE,	A.NEW_TEAM_NAME,
					A.SALE_EMP_CODE,	A.SALE_TEAM_CODE,	A.SALE_TEAM_NAME,	A.PROFIT_EMP_CODE,
					A.SALE_COM_CODE,	A.TAX_YN,			A.COMM_RATE,		A.COMM_AMT , 
					A.PROFIT_TEAM_CODE,	A.PROFIT_TEAM_NAME,	A.CUS_NO,			A.LAST_PAY_DATE,
					B.MASTER_CODE,		B.MASTER_NAME,		A.PROVIDER,
					A.IPIN_DUP_INFO,	A.RES_PRO_TYPE

				FROM RES_MASTER_damo A WITH(NOLOCK)
				CROSS JOIN PKG_MASTER B WITH(NOLOCK)
				WHERE A.RES_CODE = @PARENT_RES_CODE AND B.MASTER_CODE = @ACT_MASTER_CODE
				
				-- 예약 상세 등록
				INSERT INTO RES_PKG_DETAIL (RES_CODE) VALUES (@RES_CODE);

				-- 예약 출발자 등록
				INSERT INTO RES_CUSTOMER_DAMO
				(
					RES_CODE,		SEQ_NO,			CUS_NO,			CUS_NAME,
					LAST_NAME,		FIRST_NAME,		AGE_TYPE,
					SEC_PASS_NUM,	BIRTH_DATE,
					NOR_TEL1,		NOR_TEL2,		NOR_TEL3,
					EMAIL,			GENDER,			PASS_EXPIRE,
					NEW_DATE,		NEW_CODE,		[NATIONAL],
					SALE_PRICE
			--		POINT_YN,		POINT_PRICE,	POINT_RATE,
				)
				SELECT
					@RES_CODE,		A.SEQ_NO,		A.CUS_NO,		A.CUS_NAME,
					A.LAST_NAME,	A.FIRST_NAME,	A.AGE_TYPE,
					A.sec_PASS_NUM,	A.BIRTH_DATE,
					A.NOR_TEL1,		A.NOR_TEL2,		A.NOR_TEL3,
					A.EMAIL,		A.GENDER,		A.PASS_EXPIRE,
					A.NEW_DATE,		A.NEW_CODE,		A.[NATIONAL],
					(
						CASE A.AGE_TYPE
							WHEN 0 THEN B.ADT_PRICE
							WHEN 1 THEN B.CHD_PRICE
							WHEN 2 THEN B.INF_PRICE
							ELSE B.ADT_PRICE
						END)

				FROM RES_CUSTOMER_damo A WITH(NOLOCK)
				CROSS JOIN (
					SELECT AA.ADT_PRICE, AA.CHD_PRICE, AA.INF_PRICE
					FROM PKG_MASTER_PRICE AA WITH(NOLOCK)
					WHERE AA.MASTER_CODE = @ACT_MASTER_CODE AND AA.PRICE_SEQ = MONTH(@DEP_DATE)
				) B
				WHERE A.RES_CODE = @PARENT_RES_CODE
				
				-- 예약 연결 등록
				INSERT INTO RES_MASTER_CONNECT (RES_CODE, CON_TYPE, CON_RES_CODE)
				VALUES (@PARENT_RES_CODE, @CON_TYPE, @RES_CODE)
				
			END
			
		COMMIT TRAN

	END TRY
	BEGIN CATCH 

		ROLLBACK TRAN

		SELECT @RES_CODE = NULL

	END CATCH

	-- 채번된 예약 코드 넘기기
	SELECT @RES_CODE

END 


GO
