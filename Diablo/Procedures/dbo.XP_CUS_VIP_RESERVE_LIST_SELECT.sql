USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*================================================================================================================
■ USP_NAME					: XP_CUS_VIP_RESERVE_LIST_SELECT
■ DESCRIPTION				: VIP 고객 추정 예약리스트 검색
■ INPUT PARAMETER			: 

	@SELECT_TYPE			: VIP 적용 기준 (1: 생년월일+고객명, 2: 고객번호)
	@DATE_TYPE				: 일자조회 기준 (1: 예약일자, 2: 출발일자)
	@CUS_GRADE				: 고객등급 (0: 전체, 2: 그린, 4: 블루, 6: 퍼플)
	@START_DATE				: 조회 시작일
	@END_DATE				: 조회 종료일

■ OUTPUT PARAMETER			: 
■ EXEC						: 

	exec XP_CUS_VIP_RESERVE_LIST_SELECT 1, 2, 0, '2019-02-01', '2019-02-10';
	
	exec XP_CUS_VIP_RESERVE_LIST_SELECT 2, 2, 0, '2019-02-01', '2019-02-02';

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2018-02-08		김성호			최초생성
   2019-02-07		김남훈			17년 -> 전년도, 판매처 추가
   2019-02-25		박형만			일반적립,VIP추가포인트적립 부분 수정 
   2019-03-11		박형만			터미널,미팅장소,도착일,자동적립일등 추가
   2020-09-18		김성호			VIP 고객등급 스키마 수정 및 관련 쿼리 수정
   2021-05-04		김영민			VIP 마스터예약자 상품가 판매가 노출
================================================================================================================*/ 
CREATE  PROCEDURE [dbo].[XP_CUS_VIP_RESERVE_LIST_SELECT]
	@SELECT_TYPE	INT,			-- 1: 생년월일+고객명, 2: 고객번호
	@DATE_TYPE		INT,			-- 1: 예약일자, 2: 출발일자
	@CUS_GRADE		INT,			-- 2: 그린, 4: 블루, 6: 퍼플
	@START_DATE		SMALLDATETIME,
	@END_DATE		SMALLDATETIME
AS  
BEGIN

--DECLARE @SELECT_TYPE	INT,@DATE_TYPE		INT,@CUS_GRADE		INT,
--	@START_DATE		SMALLDATETIME,@END_DATE		SMALLDATETIME
--SELECT  @SELECT_TYPE  = 1 ,@DATE_TYPE =  2 , @CUS_GRADE = 0 , @START_DATE = '2019-02-01' , @END_DATE = '2019-02-10'
----SELECT  @SELECT_TYPE  = 2 ,@DATE_TYPE =  1 , @CUS_GRADE = 0 , @START_DATE = '2019-02-01' , @END_DATE = '2019-02-03'

	DECLARE @SQLSTRING NVARCHAR(MAX) = '', 
		@PARMDEFINITION NVARCHAR(1000) = '',
		@WHERE NVARCHAR(MAX) = N' A.CUS_GRADE > 0', 
		@M_JOIN NVARCHAR(MAX) = N' A.RES_NAME = B.VIP_NAME AND A.BIRTH_DATE = B.VIP_BIRTH', 
		@D_JOIN NVARCHAR(MAX) = N' B.CUS_NAME = C.VIP_NAME AND B.BIRTH_DATE = C.VIP_BIRTH',
		@DATE NVARCHAR(MAX) = N' A.NEW_DATE',
		@VIP_YEAR INT = YEAR(@START_DATE)

	SET @END_DATE = DATEADD(DD, 1, @END_DATE)

	IF @CUS_GRADE > 0
	BEGIN
		SET @WHERE = N' A.CUS_GRADE = @CUS_GRADE'
	END

	IF @SELECT_TYPE = 2
	BEGIN
		SELECT @M_JOIN = N' A.CUS_NO = B.VIP_CUS_NO'
			, @D_JOIN = N' B.CUS_NO = C.VIP_CUS_NO'
	END

	IF @DATE_TYPE = 2
	BEGIN
		SET @DATE = N' A.DEP_DATE'
	END


	SET @SQLSTRING = N'
-- 임시테이블
CREATE TABLE #VIP_LIST (VIP_CUS_NO INT PRIMARY KEY, VIP_NAME VARCHAR(20), VIP_BIRTH DATETIME, VIP_GRADE INT, VIP_KEY VARCHAR(30));
CREATE NONCLUSTERED INDEX [IDX_VIP_LIST_1] ON #VIP_LIST (VIP_NAME ASC, VIP_BIRTH ASC);
-- VIP 리스트
INSERT #VIP_LIST (VIP_CUS_NO, VIP_NAME, VIP_BIRTH, VIP_GRADE, VIP_KEY)
SELECT B.CUS_NO AS [VIP_CUS_NO], B.CUS_NAME AS [VIP_NAME], B.BIRTH_DATE AS [VIP_BIRTH], A.CUS_GRADE AS [VIP_GRADE]
	, (CONVERT(VARCHAR(8), B.BIRTH_DATE, 112) + B.CUS_NAME) AS [VIP_KEY]
FROM CUS_VIP_HISTORY A
INNER JOIN VIEW_MEMBER B ON A.CUS_NO = B.CUS_NO
WHERE ' + @WHERE + N' AND A.VIP_YEAR = @VIP_YEAR;

WITH CUS_LIST AS (
	SELECT B.*, A.RES_CODE
		, ISNULL((SELECT TOP 1 AA.SEQ_NO FROM RES_CUSTOMER_DAMO AA WITH(NOLOCK) WHERE AA.RES_CODE = A.RES_CODE AND AA.CUS_NAME = A.RES_NAME AND AA.BIRTH_DATE = A.BIRTH_DATE AND AA.RES_STATE = 0), 0) AS [SEQ_NO]
	FROM RES_MASTER_damo A WITH(NOLOCK)
	INNER JOIN #VIP_LIST B ON ' + @M_JOIN + N'
	WHERE ' + @DATE + N' >= @START_DATE AND ' + @DATE + N' < @END_DATE AND A.RES_STATE < 7
	UNION
	SELECT C.*, A.RES_CODE, B.SEQ_NO
	FROM RES_MASTER_damo A WITH(NOLOCK)
	INNER JOIN RES_CUSTOMER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
	INNER JOIN #VIP_LIST C ON ' + @D_JOIN + N'
	WHERE ' + @DATE + N' >= @START_DATE AND ' + @DATE + N' < @END_DATE AND A.RES_STATE < 7 AND B.RES_STATE = 0
)
, RES_LIST AS (
	SELECT B.*, ''예약자'' AS [고객구분]
	, A.CUS_NO, A.NEW_DATE, A.DEP_DATE, A.ARR_DATE, A.NEW_TEAM_NAME
	, A.MASTER_CODE, A.PRO_CODE, A.PROVIDER, A.RES_NAME, '''' AS [CUS_NAME], A.BIRTH_DATE
	, V.SALE_PRICE, V.TAX_PRICE, V.CHG_PRICE, V.DC_PRICE, V.PENALTY_PRICE, V.POINT_PRICE
	, (ISNULL(V.SALE_PRICE, 0) - ISNULL(V.DC_PRICE, 0) + ISNULL(V.CHG_PRICE, 0) + ISNULL(V.TAX_PRICE, 0) + ISNULL(V.PENALTY_PRICE, 0)) AS [판매가]	
	, A.SALE_EMP_CODE
	, 0 AS [포인트율]
	, 0 AS [VIP포인트율]
	, A.NOR_TEL1, A.NOR_TEL2, A.NOR_TEL3
	, A.SALE_COM_CODE
	, NULL AS MEET_COUNTER 
	, NULL AS DEP_TRANS_CODE  
	, NULL AS DEP_DEP_AIRPORT_CODE 
	FROM RES_MASTER_damo A WITH(NOLOCK)
	INNER JOIN CUS_LIST B ON A.RES_CODE = B.RES_CODE AND A.RES_NAME = B.VIP_NAME AND A.BIRTH_DATE = B.VIP_BIRTH AND B.SEQ_NO = 0
	LEFT JOIN RES_CUSTOMER_damo V  ON A.RES_CODE = V.RES_CODE AND a.NOR_TEL1 = v.NOR_TEL1 AND a.NOR_TEL2 = v.NOR_TEL2 AND a.NOR_TEL3 = v.NOR_TEL3
	UNION ALL
	SELECT C.*, ''출발자'' AS [고객구분]
	--, B.CUS_NO, A.DEP_DATE, A.ARR_DATE, A.NEW_TEAM_NAME
	, B.CUS_NO, A.NEW_DATE,D.DEP_DATE, D.ARR_DATE, A.NEW_TEAM_NAME
	, A.MASTER_CODE, A.PRO_CODE, A.PROVIDER, A.RES_NAME, B.CUS_NAME, B.BIRTH_DATE
	, B.SALE_PRICE, B.TAX_PRICE, B.CHG_PRICE, B.DC_PRICE, B.PENALTY_PRICE, B.POINT_PRICE
	, (ISNULL(B.SALE_PRICE, 0) - ISNULL(B.DC_PRICE, 0) + ISNULL(B.CHG_PRICE, 0) + ISNULL(B.TAX_PRICE, 0) + ISNULL(B.PENALTY_PRICE, 0)) AS [판매가]
	, A.SALE_EMP_CODE
	, B.POINT_RATE AS [포인트율]
	, E.BEN_VALUE AS [VIP포인트율]
	, B.NOR_TEL1, B.NOR_TEL2, B.NOR_TEL3
	, A.SALE_COM_CODE
	, D.MEET_COUNTER
	, F.DEP_TRANS_CODE 
	, F.DEP_DEP_AIRPORT_CODE 
	FROM RES_MASTER_damo A WITH(NOLOCK)
	INNER JOIN RES_CUSTOMER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
	INNER JOIN CUS_LIST C ON B.RES_CODE = C.RES_CODE AND B.CUS_NAME = C.VIP_NAME AND B.BIRTH_DATE = C.VIP_BIRTH AND B.SEQ_NO = C.SEQ_NO
	INNER JOIN PKG_DETAIL D WITH(NOLOCK) ON A.PRO_CODE = D.PRO_CODE
	LEFT JOIN CUS_VIP_BENEFIT E WITH(NOLOCK) ON E.VIP_YEAR = @VIP_YEAR AND E.CUS_GRADE = C.VIP_GRADE AND BEN_TYPE = 1	-- BEN_TYPE: 포인트율
	LEFT JOIN PRO_TRANS_SEAT F WITH(NOLOCK) ON D.SEAT_CODE = F.SEAT_CODE 
)
SELECT 
	(CASE WHEN ISNULL(C.POINT_CONSENT, D.POINT_CONSENT) = ''Y'' THEN ''Y'' ELSE ''N'' END) AS [포인트동의여부],
	(CASE WHEN P1.POINT_NO IS NULL THEN ''N'' ELSE ''Y'' END) AS [포인트자동적립여부],
	(CASE WHEN P2.POINT_NO IS NULL THEN ''N'' ELSE ''Y'' END) AS [VIP포인트추가적립여부],
	(CASE WHEN F.CUS_NO IS NULL THEN '''' ELSE F.CUS_GRADE_NAME END) AS [전년도VIP],
	A.VIP_CUS_NO AS [VIP고객번호],
	A.VIP_NAME AS [VIP고객명],
	CONVERT(DATE, A.VIP_BIRTH) AS [VIP생년월일],
	(CASE A.VIP_GRADE WHEN 6 THEN ''퍼플'' WHEN 4 THEN ''블루'' WHEN 2 THEN ''그린'' END) AS [고객등급],
		
	A.고객구분,
	A.CUS_NO AS [고객번호],
	--(CASE WHEN A.CUS_NO = F.CUS_NO THEN '''' ELSE ''V'' END) AS [비매칭],
	(CASE WHEN A.CUS_NO = A.VIP_CUS_NO THEN '''' ELSE ''V'' END) AS [비매칭],
	ISNULL(C.CUS_ID, D.CUS_ID) AS [아이디],
	A.RES_NAME AS [예약자], 
	A.CUS_NAME AS [출발자], 
	A.SEQ_NO AS [예약순번], 
	(SELECT PUB_VALUE FROM COD_PUBLIC AA WITH(NOLOCK) WHERE AA.PUB_TYPE = ''RES.AGENT.TYPE'' AND AA.PUB_CODE = A.PROVIDER) AS [예약구분],
	A.PRO_CODE AS [행사코드], 
	A.RES_CODE AS [예약코드],
	A.NEW_TEAM_NAME AS [담당팀명],
	(SELECT KOR_NAME FROM AGT_MASTER WHERE AGT_CODE = A.SALE_COM_CODE) AS [판매처],
	A.SALE_PRICE AS [상품가], A.TAX_PRICE AS [TAX], A.CHG_PRICE AS [변동가], A.DC_PRICE AS [할인가], A.PENALTY_PRICE AS [페널티], A.판매가, 
	
	A.포인트율,
	CASE WHEN P1.POINT_NO IS NOT NULL THEN P1.POINT_PRICE ELSE (CASE WHEN A.포인트율 > 0 THEN (CONVERT(DECIMAL,A.판매가) / 100) * A.포인트율  ELSE 0.0 END) END  AS [포인트],
	P1.POINT_PRICE [적립포인트],
	A.VIP포인트율,
	CASE WHEN P2.POINT_NO IS NOT NULL THEN P2.POINT_PRICE ELSE (CASE WHEN A.VIP포인트율 > 0 THEN (CONVERT(DECIMAL,A.판매가) / 100) * A.VIP포인트율  ELSE 0.0 END) END AS [VIP포인트],
	P2.POINT_PRICE [VIP적립포인트],
	
	E.KOR_NAME AS [예약접수직원], 
	A.NOR_TEL1 + ''-'' + A.NOR_TEL2 + ''-'' + A.NOR_TEL3 AS [여행자전화번호],
	(ISNULL(C.NOR_TEL1, D.NOR_TEL1) + ''-'' + ISNULL(C.NOR_TEL2, D.NOR_TEL2) + ''-'' + ISNULL(C.NOR_TEL3, D.NOR_TEL3)) AS [회원전화번호],
	(SELECT COUNT(*) FROM RES_CUSTOMER_DAMO AA WITH(NOLOCK) WHERE AA.RES_CODE = A.RES_CODE AND AA.RES_STATE = 0) AS [출발총원],
	DBO.FN_RES_GET_TOTAL_PRICE(A.RES_CODE) as [출발총판매액],
	CONVERT(DATE, A.ARR_DATE) AS [도착일자],
	CONVERT(DATE, A.DEP_DATE) AS [출발일자],
	DATEADD(DD,7,A.ARR_DATE) AS [자동적립예정일자],
	CONVERT(DATE, A.NEW_DATE) AS [예약일자],
	CASE WHEN A.DEP_DEP_AIRPORT_CODE IN (''ICN'') THEN 
		CASE WHEN CHARINDEX( A.DEP_TRANS_CODE , ''KE,DL,AF,KL,AM,AZ,CI,OK,MF,SU,GA'') > 0 THEN ''제2터미널'' ELSE ''제1터미널'' END  
	END AS [터미널],
	CASE WHEN A.DEP_DEP_AIRPORT_CODE IN (''ICN'') THEN 
		CASE WHEN A.MEET_COUNTER = ''1'' THEN ''A카운터''
			WHEN  A.MEET_COUNTER = ''2'' THEN ''M카운터''
			WHEN  A.MEET_COUNTER = ''3'' THEN ''A&M카운터'' 
			WHEN  A.MEET_COUNTER = ''4'' THEN ''H카운터'' ELSE '''' END 
	END AS [미팅장소],
	P1.NEW_dATE AS [포인트적립일], 
	P2.NEW_dATE AS [VIP포인트적립일]
	--, A.* 
FROM RES_LIST A
LEFT JOIN CUS_MEMBER C WITH(NOLOCK) ON A.CUS_NO = C.CUS_NO
LEFT JOIN CUS_MEMBER_SLEEP D WITH(NOLOCK) ON A.CUS_NO = D.CUS_NO
LEFT JOIN EMP_MASTER_damo E WITH(NOLOCK) ON A.SALE_EMP_CODE = E.EMP_CODE
LEFT JOIN CUS_VIP_HISTORY F WITH(NOLOCK) ON A.CUS_NO = F.CUS_NO AND F.VIP_YEAR = (@VIP_YEAR - 1)	-- 전년도 VIP 정보
LEFT JOIN CUS_POINT P1 WITH(NOLOCK) ON A.CUS_NO = P1.CUS_NO AND A.RES_CODE = P1.RES_CODE AND P1.POINT_TYPE = 1 AND P1.ACC_USE_TYPE IN (1) -- 예약번호가 있고 , 일반 적립 
LEFT JOIN CUS_POINT P2 WITH(NOLOCK) ON A.CUS_NO = P2.CUS_NO AND A.RES_CODE = P2.RES_CODE AND P2.POINT_TYPE = 1 AND P2.ACC_USE_TYPE= 9  -- VIP 포인트 추가 적립 
ORDER BY A.VIP_GRADE DESC, A.DEP_DATE, A.RES_CODE, A.SEQ_NO'

	SET @PARMDEFINITION = N'
		@CUS_GRADE	INT,
		@VIP_YEAR	INT,
		@START_DATE	SMALLDATETIME,
		@END_DATE	SMALLDATETIME';


	--  출력시 
	--DECLARE @SQLSTRING1 VARCHAR(MAX),@SQLSTRING2 VARCHAR(MAX),@SQLSTRING3 VARCHAR(MAX),@SQLSTRING4 VARCHAR(MAX)
	--SELECT @SQLSTRING1  = '',@SQLSTRING2 = '',@SQLSTRING3 = '',@SQLSTRING4 = ''
	--SET @SQLSTRING1 = SUBSTRING(@SQLSTRING,0,4000)
	--SET @SQLSTRING2 = SUBSTRING(@SQLSTRING,4000,8000)
	--SET @SQLSTRING3 = SUBSTRING(@SQLSTRING,8000,16000) 
	--SET @SQLSTRING4 = SUBSTRING(@SQLSTRING,16000,20000) 
	--PRINT @SQLSTRING1 + ISNULL(@SQLSTRING2,'') + ISNULL(@SQLSTRING3,'')+ ISNULL(@SQLSTRING4,'')

	EXEC SP_EXECUTESQL @SQLSTRING , @PARMDEFINITION,
		@CUS_GRADE,
		@VIP_YEAR,
		@START_DATE,
		@END_DATE

	PRINT @SQLSTRING

-- 적용 예정이 ㄴ포인트를 보여주기 위해서는 아래 사용 
--CASE WHEN P1.POINT_NO IS NOT NULL THEN P1.POINT_PRICE ELSE (CASE WHEN A.포인트율 > 0 THEN (CONVERT(DECIMAL,A.판매가) / 100) * A.포인트율  ELSE 0.0 END) END  AS [적용포인트], 
--

END
GO
