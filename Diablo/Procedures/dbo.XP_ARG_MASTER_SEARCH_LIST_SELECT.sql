USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: XP_ARG_MASTER_LIST_SELECT
■ DESCRIPTION				: 수배현황 검색
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: 
	DECLARE @COUNT INT
	EXEC DBO.XP_ARG_MASTER_SEARCH_LIST_SELECT 1, 20, @COUNT OUTPUT, 'ProductCode=&Title=&ArrangeStatus=&StartDate=&EndDate=&NewDate1=2013-06-01&NewDate2=2013-11-30&AgentCode=&NewCode&NewName=&AgentName=&TeamCode=&EmpCode=&CfmYn=Y', 5
	SELECT @COUNT
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2013-05-22		이규식			최초생성
   2014-03-25		김성호			재 생성   
   2014-03-28		정지용			DateType 추가 (출발일 / 작성일 검색 구분)
   2014-04-02		이동호			@ARG_STATUS (전체 : 0 값 제외 처리, 줄:105) 
   2014-04-24		정지용			팀명 및 시원 검색 추가
   2014-11-06		정지용			SORT 추가 / , B.DEP_DATE, B.ARG_STATUS MAX 추가, A.PRO_CODE GROUP BY 추가 
================================================================================================================*/ 
CREATE PROC [dbo].[XP_ARG_MASTER_SEARCH_LIST_SELECT]
 	@PAGE_INDEX  INT,
	@PAGE_SIZE  INT,
	@TOTAL_COUNT INT OUTPUT,
	@KEY	varchar(200),
	@ORDER_BY	int
AS 
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED	

	DECLARE @SQLSTRING NVARCHAR(4000), @WHERE NVARCHAR(4000), @PARMDEFINITION NVARCHAR(1000), @SORT_STRING VARCHAR(100);

	DECLARE @PRO_CODE VARCHAR(20)
	DECLARE @DATE_TYPE CHAR(1)
	DECLARE @TITLE VARCHAR(200)
	DECLARE @ARG_STATUS VARCHAR(2)
	DECLARE @START_DATE VARCHAR(10)
	DECLARE @END_DATE VARCHAR(10)
	DECLARE @AGT_CODE VARCHAR(10)
	DECLARE @TEAM_CODE	VARCHAR(4)
	DECLARE @EMP_CODE	VARCHAR(7)

	SELECT
		@PRO_CODE = DBO.FN_PARAM(@KEY, 'ProductCode'),
		@TITLE = DBO.FN_PARAM(@KEY, 'Title'),
		@ARG_STATUS = DBO.FN_PARAM(@KEY, 'ArrangeStatus'),
		@START_DATE = DBO.FN_PARAM(@KEY, 'StartDate'),
		@END_DATE = DBO.FN_PARAM(@KEY, 'EndDate'),
		@AGT_CODE = DBO.FN_PARAM(@KEY, 'AgentCode'),
		@DATE_TYPE = DBO.FN_PARAM(@KEY, 'DateType'),
		@TEAM_CODE = DBO.FN_PARAM(@KEY, 'TeamCode'),
		@EMP_CODE = DBO.FN_PARAM(@KEY, 'EmpCode')
		
	SET @WHERE = ''
	
	IF ISNULL(@PRO_CODE, '') <> ''
	BEGIN
		SET @WHERE = @WHERE + ' AND A.PRO_CODE LIKE @PRO_CODE + ''%'''
	END
	ELSE
	BEGIN

		IF ISNULL(@TITLE, '') <> ''
			
			--SET @WHERE = @WHERE + ' AND B.TITLE LIKE ''%'' + @TITLE + ''%'''
				SET @WHERE = @WHERE + ' AND (A.PRO_CODE LIKE ''%'' + @TITLE + ''%'' OR B.TITLE LIKE ''%'' + @TITLE + ''%'' OR P.PRO_NAME LIKE ''%'' + @TITLE + ''%'')'
			
		IF ISNULL(@DATE_TYPE, '') = '1'
		BEGIN
			IF ISNULL(@START_DATE, '') <> ''
				SET @WHERE = @WHERE + ' AND CONVERT(VARCHAR(10), B.DEP_DATE, 120) >= @START_DATE'

			IF ISNULL(@END_DATE, '') <> ''
				SET @WHERE = @WHERE + ' AND CONVERT(VARCHAR(10), B.DEP_DATE, 120) <= @END_DATE'
		END
		ELSE IF ISNULL(@DATE_TYPE, '') = '2'
		BEGIN
			IF ISNULL(@START_DATE, '') <> ''
				SET @WHERE = @WHERE + ' AND CONVERT(VARCHAR(10), B.NEW_DATE, 120) >= @START_DATE'

			IF ISNULL(@END_DATE, '') <> ''
				SET @WHERE = @WHERE + ' AND CONVERT(VARCHAR(10), B.NEW_DATE, 120) <= @END_DATE'
		END

		IF ISNULL(@ARG_STATUS, '') <> '' AND @ARG_STATUS <> 0
			SET @WHERE = @WHERE + ' AND C.ARG_STATUS = @ARG_STATUS'

	END

	IF ISNULL(@EMP_CODE, '') <> ''
		BEGIN
			SET @WHERE = @WHERE + ' AND P.NEW_CODE = @EMP_CODE'
		END
	ELSE
		BEGIN
			IF ISNULL(@TEAM_CODE, '') <> ''
				BEGIN
					SET @WHERE = @WHERE + ' AND P.NEW_CODE IN (SELECT EMP_CODE FROM EMP_MASTER WITH(NOLOCK) WHERE TEAM_CODE = @TEAM_CODE)'
				END
		END


	IF ISNULL(@AGT_CODE, '') <> '' 
		SET @WHERE = @WHERE + ' AND A.AGT_CODE = @AGT_CODE'

	IF LEN(@WHERE) > 0
	BEGIN
		SELECT @WHERE = ('WHERE ' + SUBSTRING(@WHERE, 6, 4000))
	END

	-- SORT 조건 만들기  
	/*
	SELECT @SORT_STRING = (  
		CASE @ORDER_BY  
			WHEN 1 THEN ' Z.NEW_DATE DESC'
			ELSE ' Z.NEW_DATE DESC'
		END
	)
	*/
	SELECT @SORT_STRING = (
		CASE @ORDER_BY
			WHEN 1 THEN ' Z.ARG_STATUS DESC' -- 상태
			WHEN 2 THEN ' Z.PRO_CODE DESC' -- 행사코드
			WHEN 3 THEN ' Z.DEP_DATE DESC' -- 출발일
			WHEN 4 THEN ' Z.TOTAL_COUNT DESC' -- 예약인원
			WHEN 5 THEN ' Z.NEW_DATE DESC' -- 작성일
		ELSE
			' Z.NEW_DATE DESC' -- 전체
		END
	)

	SET @SQLSTRING = N'
	SELECT @TOTAL_COUNT = COUNT(*)
	FROM (
		SELECT A.ARG_CODE FROM ARG_MASTER A WITH(NOLOCK)
		INNER JOIN ARG_DETAIL B WITH(NOLOCK) ON A.ARG_CODE = B.ARG_CODE
		LEFT JOIN ARG_CUSTOMER C WITH(NOLOCK) ON A.ARG_CODE = C.ARG_CODE
		LEFT OUTER JOIN PKG_DETAIL P WITH(NOLOCK) ON A.PRO_CODE = P.PRO_CODE
		' + @WHERE + '
		GROUP BY A.ARG_CODE
	) AA;

	WITH LIST AS
	(
		SELECT Z.*
		FROM (
			SELECT A.ARG_CODE, MAX(B.GRP_SEQ_NO) AS [LAST_GRP_SEQ_NO], MAX(B.NEW_DATE) AS [NEW_DATE], MAX(B.DEP_DATE) AS [DEP_DATE], A.PRO_CODE, MAX(B.ARG_STATUS) AS [ARG_STATUS]
				, (SELECT COUNT(*) FROM ARG_CUSTOMER AA WITH(NOLOCK) WHERE AA.ARG_CODE = A.ARG_CODE AND AA.ARG_STATUS NOT IN (3)) AS [TOTAL_COUNT]
				, (SELECT COUNT(*) FROM ARG_CUSTOMER AA WITH(NOLOCK) WHERE AA.ARG_CODE = A.ARG_CODE AND AA.ARG_STATUS NOT IN (1, 3, 4)) AS [FIX_COUNT]
				, MAX(CASE WHEN B.ARG_TYPE IN (1, 2) THEN B.GRP_SEQ_NO ELSE 0 END) AS [F1]
				, MAX(CASE WHEN B.ARG_TYPE IN (3, 4) THEN B.GRP_SEQ_NO ELSE 0 END) AS [F2]
				--, MAX(CASE WHEN C.ARG_STATUS IN (9, 10) THEN B.GRP_SEQ_NO ELSE 0 END) AS [F3]
				, MAX(CASE WHEN C.ARG_STATUS IN (9, 10) THEN CASE WHEN B.ARG_STATUS IN (9, 10) THEN B.GRP_SEQ_NO ELSE 0 END ELSE 0 END) AS [F3]
				, MAX(CASE WHEN B.ARG_STATUS IN (1, 2) AND ISNULL(B.CFM_CODE, '''') = '''' THEN ''Y'' ELSE ''N'' END) AS [CHECK_ARG_STATUS1]
				, MAX(CASE WHEN B.ARG_STATUS IN (3, 4) AND ISNULL(B.CFM_CODE, '''') = '''' THEN ''Y'' ELSE ''N'' END) AS [CHECK_ARG_STATUS2]
				, MAX(CASE WHEN C.ARG_STATUS IN (9, 10) AND ISNULL(B.CFM_CODE, '''') = '''' THEN ''Y'' ELSE ''N'' END) AS [CHECK_ARG_STATUS3]				
			FROM ARG_MASTER A WITH(NOLOCK)
			INNER JOIN ARG_DETAIL B WITH(NOLOCK) ON A.ARG_CODE = B.ARG_CODE
			LEFT JOIN ARG_CUSTOMER C WITH(NOLOCK) ON A.ARG_CODE = C.ARG_CODE
			LEFT OUTER JOIN PKG_DETAIL P WITH(NOLOCK) ON A.PRO_CODE = P.PRO_CODE
			' + @WHERE + '
			GROUP BY A.ARG_CODE, A.PRO_CODE
		) Z
		ORDER BY ' + @SORT_STRING + '
		OFFSET ((@PAGE_INDEX - 1) * @PAGE_SIZE) ROWS FETCH NEXT @PAGE_SIZE
		ROWS ONLY
	)
	SELECT A.ARG_CODE, A.PRO_CODE		
		, C.DEP_DATE, A.AGT_CODE, B.KOR_NAME AS [AGT_NAME]
		, Z.TOTAL_COUNT, Z.FIX_COUNT
		, (CASE WHEN ISNULL(A.PRO_CODE, '''') = '''' THEN C.TITLE ELSE P.PRO_NAME END) AS TITLE
		, D.ARG_STATUS AS [ARG_STATUS1], Z.CHECK_ARG_STATUS1 --, (CASE WHEN ISNULL(D.CFM_CODE, '''') = '''' THEN ''N'' ELSE ''Y'' END) AS [CHECK_ARG_STATUS1]
		, E.ARG_STATUS AS [ARG_STATUS2], Z.CHECK_ARG_STATUS2 --, (CASE WHEN ISNULL(E.CFM_CODE, '''') = '''' THEN ''N'' ELSE ''Y'' END) AS [CHECK_ARG_STATUS2]
		, F.ARG_STATUS AS [ARG_STATUS3], Z.CHECK_ARG_STATUS3 --, (CASE WHEN ISNULL(F.CFM_CODE, '''') = '''' THEN ''N'' ELSE ''Y'' END) AS [CHECK_ARG_STATUS3]
		, Z.NEW_DATE				
	FROM LIST Z
	INNER JOIN ARG_MASTER A WITH(NOLOCK) ON Z.ARG_CODE = A.ARG_CODE
	INNER JOIN AGT_MASTER B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE
	INNER JOIN ARG_DETAIL C WITH(NOLOCK) ON Z.ARG_CODE = C.ARG_CODE AND Z.LAST_GRP_SEQ_NO = C.GRP_SEQ_NO
	LEFT JOIN ARG_DETAIL D WITH(NOLOCK) ON Z.ARG_CODE = D.ARG_CODE AND Z.F1 = D.GRP_SEQ_NO
	LEFT JOIN ARG_DETAIL E WITH(NOLOCK) ON Z.ARG_CODE = E.ARG_CODE AND Z.F2 = E.GRP_SEQ_NO
	LEFT JOIN ARG_DETAIL F WITH(NOLOCK) ON Z.ARG_CODE = F.ARG_CODE AND Z.F3 = F.GRP_SEQ_NO
	LEFT OUTER JOIN PKG_DETAIL P WITH(NOLOCK) ON A.PRO_CODE = P.PRO_CODE
	ORDER BY ' + @SORT_STRING;

	--PRINT @SQLSTRING
	
	SET @PARMDEFINITION = N'
		@PAGE_INDEX INT,
		@PAGE_SIZE INT,
		@TOTAL_COUNT INT OUTPUT,
		@PRO_CODE VARCHAR(20),
		@TITLE VARCHAR(200),
		@ARG_STATUS VARCHAR(1),
		@START_DATE VARCHAR(10),
		@END_DATE VARCHAR(10),
		@AGT_CODE VARCHAR(10),
		@TEAM_CODE	VARCHAR(4),
		@EMP_CODE	VARCHAR(7)';

	PRINT @SQLSTRING

	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, 
		@PAGE_INDEX,
		@PAGE_SIZE,
		@TOTAL_COUNT OUTPUT,
		@PRO_CODE,
		@TITLE,
		@ARG_STATUS,
		@START_DATE,
		@END_DATE,
		@AGT_CODE,
		@TEAM_CODE,
		@EMP_CODE;
END


/*
ALTER PROC [dbo].[XP_ARG_MASTER_SEARCH_LIST_SELECT]
 	@PAGE_INDEX  INT,
	@PAGE_SIZE  INT,
	@TOTAL_COUNT INT OUTPUT,
	@KEY	varchar(200),
	@ORDER_BY	int
AS 
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED	

	DECLARE @SQLSTRING NVARCHAR(4000), @WHERE NVARCHAR(4000), @WHERE2 NVARCHAR(4000), @PARMDEFINITION NVARCHAR(1000), @SORT_STRING VARCHAR(100);

	DECLARE @PRO_CODE VARCHAR(20)
	DECLARE @TITLE VARCHAR(200)
	DECLARE @ARG_STATUS VARCHAR(1)
	DECLARE @START_DATE VARCHAR(10)
	DECLARE @END_DATE VARCHAR(10)
	DECLARE @AGT_CODE VARCHAR(10)
	DECLARE @NEW_DATE1 VARCHAR(10)
	DECLARE @NEW_DATE2 VARCHAR(10)
	DECLARE @NEW_CODE VARCHAR(7)
	DECLARE @NEW_NAME VARCHAR(30)
	DECLARE @AGT_NAME VARCHAR(50)
	DECLARE @TEAM_CODE	VARCHAR(4)
	DECLARE @EMP_CODE	VARCHAR(7)
	DECLARE @CFM_YN	VARCHAR(1)

	SELECT
		@PRO_CODE = DBO.FN_PARAM(@KEY, 'ProductCode'),
		@TITLE = DBO.FN_PARAM(@KEY, 'Title'),
		@ARG_STATUS = DBO.FN_PARAM(@KEY, 'ArrangeStatus'),
		@START_DATE = DBO.FN_PARAM(@KEY, 'StartDate'),
		@END_DATE = DBO.FN_PARAM(@KEY, 'EndDate'),
		@AGT_CODE = DBO.FN_PARAM(@KEY, 'AgentCode'),
		@NEW_DATE1 = DBO.FN_PARAM(@KEY, 'NewDate1'),
		@NEW_DATE2 = DBO.FN_PARAM(@KEY, 'NewDate2'),
		@NEW_CODE = DBO.FN_PARAM(@KEY, 'NewCode'),
		@NEW_NAME = DBO.FN_PARAM(@KEY, 'NewName'),
		@AGT_NAME = DBO.FN_PARAM(@KEY, 'AgentName'),
		@TEAM_CODE = DBO.FN_PARAM(@KEY, 'TeamCode'),
		@EMP_CODE = DBO.FN_PARAM(@KEY, 'EmpCode'),
		@CFM_YN = DBO.FN_PARAM(@KEY, 'CfmYn')
		
	SET @WHERE = ''
	SET @WHERE2 = ''
	
	IF ISNULL(@PRO_CODE, '') <> ''
		BEGIN
			SET @WHERE = @WHERE + ' AND A.PRO_CODE LIKE ''' + @PRO_CODE + '%'' '
		END
	ELSE
		BEGIN
			IF ISNULL(@AGT_CODE, '') <> ''
				SET @WHERE = @WHERE + ' AND A.AGT_CODE = @AGT_CODE'

			IF ISNULL(@TITLE, '') <> ''
				SET @WHERE = @WHERE + ' AND B.TITLE LIKE ''%'' + @TITLE + ''%'''

			IF ISNULL(@START_DATE, '') <> ''
				SET @WHERE = @WHERE + ' AND A.DEP_DATE >= @START_DATE'

			IF ISNULL(@END_DATE, '') <> ''
				SET @WHERE = @WHERE + ' AND A.DEP_DATE <= @END_DATE'

			IF ISNULL(@NEW_DATE1, '') <> ''
				SET @WHERE = @WHERE + ' AND B.NEW_DATE >= @NEW_DATE1'

			IF ISNULL(@NEW_DATE2, '') <> ''
				SET @WHERE = @WHERE + ' AND B.NEW_DATE <= ''' + @NEW_DATE2 + ' 23:59:59 '''

			IF ISNULL(@NEW_CODE, '') <> ''
				SET @WHERE = @WHERE + ' AND B.NEW_CODE = @NEW_CODE'

			IF ISNULL(@NEW_NAME, '') <> ''
				SET @WHERE = @WHERE + ' AND DBO.XN_COM_GET_EMP_NAME(B.NEW_CODE) LIKE ''%' + @NEW_NAME + '%'' '

			IF ISNULL(@AGT_NAME, '') <> ''
				SET @WHERE = @WHERE + ' AND DBO.XN_COM_GET_TEAM_NAME(B.NEW_CODE) LIKE ''%' + @AGT_NAME + '%'' '

			IF ISNULL(@EMP_CODE, '') <> ''
				BEGIN
					SET @WHERE = @WHERE + ' AND B.NEW_CODE = ''' + @EMP_CODE + ''' '
				END
			ELSE
				BEGIN
					IF ISNULL(@TEAM_CODE, '') <> ''
						BEGIN
							SET @WHERE = @WHERE + ' AND B.NEW_CODE IN (SELECT EMP_CODE FROM EMP_MASTER WITH(NOLOCK) WHERE TEAM_CODE = ''' + @TEAM_CODE + ''') '
						END
				END


			IF ISNULL(@CFM_YN, '') <> ''
				IF @CFM_YN = 'Y'
					BEGIN
						SET @WHERE2 = @WHERE2 + ' AND A.CFM_CODE IS NOT NULL'
					END
				ELSE IF @CFM_YN = 'N'
					BEGIN
						SET @WHERE2 = @WHERE2 + ' AND A.CFM_CODE IS NULL'
					END					

			IF ISNULL(@ARG_STATUS, '') <> ''
				SET @WHERE2 = @WHERE2 + ' AND A.ARG_DETAIL_STATUS = @ARG_STATUS'

		END

	-- SORT 조건 만들기  
	SELECT @SORT_STRING = (  
		CASE @ORDER_BY  
			WHEN 1 THEN ' B.ARG_STATUS'
			WHEN 2 THEN ' B.PRO_CODE'
			WHEN 3 THEN ' B.DEP_DATE DESC'
			WHEN 4 THEN ' DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) DESC'
			WHEN 5 THEN ' C.NEW_DATE DESC'
			ELSE ' B.ARG_SEQ_NO DESC'
		END
	)

	SET @SQLSTRING = N'
		SELECT @TOTAL_COUNT = COUNT(*)
		  FROM (SELECT A.ARG_SEQ_NO, A.AGT_CODE
		              ,(SELECT TOP 1 ARG_DETAIL_STATUS FROM ARG_DETAIL WHERE ARG_SEQ_NO = A.ARG_SEQ_NO AND ARG_DETAIL_GROUP = B.ARG_DETAIL_GROUP ORDER BY EDT_DATE DESC) AS ARG_DETAIL_STATUS
					  ,(SELECT TOP 1 CFM_CODE FROM ARG_DETAIL WHERE ARG_SEQ_NO = A.ARG_SEQ_NO AND ARG_DETAIL_GROUP = B.ARG_DETAIL_GROUP ORDER BY EDT_DATE DESC) AS CFM_CODE
					  ,B.ARG_DETAIL_GROUP
		          FROM ARG_MASTER A
		         INNER JOIN ARG_DETAIL B ON A.ARG_SEQ_NO = B.ARG_SEQ_NO
		         WHERE 1 = 1 ' + @WHERE + '
		         GROUP BY A.ARG_SEQ_NO, A.AGT_CODE, B.ARG_DETAIL_GROUP) A
		 WHERE 1 = 1 ' + @WHERE2 + ';

		WITH LIST AS 
		(
			SELECT
				A.ARG_SEQ_NO,
				A.AGT_CODE,
				A.ARG_DETAIL_GROUP,
				B.RES_CODE,
				B.PRO_CODE,
				B.ARG_STATUS,
				B.DEP_DATE,
				B.ARR_DATE,
				B.DAY,
				B.NIGHTS,
				C.GRP_SEQ_NO,
				C.TITLE,
				C.ARG_TYPE,
				DBO.XN_COM_GET_EMP_NAME(C.CFM_CODE) AS CFM_NAME,
				DBO.XN_COM_GET_TEAM_NAME(C.CFM_CODE) AS CFM_TEAM_NAME,
				C.CFM_CODE,
				C.CFM_DATE,
				C.ARG_DETAIL_STATUS,
				C.NEW_CODE,
				DBO.XN_COM_GET_EMP_NAME(C.NEW_CODE) AS NEW_NAME,
				DBO.XN_COM_GET_TEAM_NAME(C.NEW_CODE) AS NEW_TEAM_NAME,
				C.NEW_DATE,
				DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) AS RES_COUNT
			FROM (SELECT A.ARG_SEQ_NO
			            ,A.AGT_CODE
				        ,(SELECT TOP 1 GRP_SEQ_NO FROM ARG_DETAIL WHERE ARG_SEQ_NO = A.ARG_SEQ_NO AND ARG_DETAIL_GROUP = B.ARG_DETAIL_GROUP ORDER BY EDT_DATE DESC) AS GRP_SEQ_NO
						,ARG_DETAIL_GROUP
						,(SELECT TOP 1 ARG_DETAIL_STATUS FROM ARG_DETAIL WHERE ARG_SEQ_NO = A.ARG_SEQ_NO AND ARG_DETAIL_GROUP = B.ARG_DETAIL_GROUP ORDER BY EDT_DATE DESC) AS ARG_DETAIL_STATUS
						,(SELECT TOP 1 CFM_CODE FROM ARG_DETAIL WHERE ARG_SEQ_NO = A.ARG_SEQ_NO AND ARG_DETAIL_GROUP = B.ARG_DETAIL_GROUP ORDER BY EDT_DATE DESC) AS CFM_CODE
			       FROM ARG_MASTER A 
			      INNER JOIN ARG_DETAIL B ON A.ARG_SEQ_NO = B.ARG_SEQ_NO
				  WHERE 1=1 ' + @WHERE + '
			      GROUP BY A.ARG_SEQ_NO, A.AGT_CODE, B.ARG_DETAIL_GROUP) A
			INNER JOIN ARG_MASTER B ON A.ARG_SEQ_NO = B.ARG_SEQ_NO
			 LEFT OUTER JOIN ARG_DETAIL C ON (A.ARG_SEQ_NO = C.ARG_SEQ_NO AND A.GRP_SEQ_NO = C.GRP_SEQ_NO)
			WHERE 1 = 1 ' + @WHERE2 + ' 
			ORDER BY '+ @SORT_STRING + '
			OFFSET ((@PAGE_INDEX - 1) * @PAGE_SIZE) ROWS FETCH NEXT @PAGE_SIZE
			ROWS ONLY
		)
		SELECT
			*
		FROM LIST A
		';

		PRINT @SQLSTRING
		SET @PARMDEFINITION = N'
			@PAGE_INDEX INT,
			@PAGE_SIZE INT,
			@PRO_CODE VARCHAR(20),
			@TITLE VARCHAR(200),
			@ARG_STATUS VARCHAR(1),
			@START_DATE VARCHAR(10),
			@END_DATE VARCHAR(10),
			@AGT_CODE VARCHAR(10),
			@NEW_DATE1 VARCHAR(10),
			@NEW_DATE2 VARCHAR(10),
			@NEW_CODE VARCHAR(7),
			@NEW_NAME VARCHAR(30),
			@AGT_NAME VARCHAR(50),
			@TEAM_CODE	VARCHAR(4),
		    @EMP_CODE	VARCHAR(7),
			@CFM_YN	VARCHAR(1),
			@TOTAL_COUNT INT OUTPUT';


		EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, 
			@PAGE_INDEX,
			@PAGE_SIZE,
			@PRO_CODE,
			@TITLE,
			@ARG_STATUS,
			@START_DATE,
			@END_DATE,
			@AGT_CODE,
			@NEW_DATE1,
			@NEW_DATE2,
			@NEW_CODE,
			@NEW_NAME,
			@AGT_NAME,
			@TEAM_CODE,
			@EMP_CODE,
			@CFM_YN,
			@TOTAL_COUNT OUTPUT;
END
*/
GO
