USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
-- =============================================  
-- AUTHOR:  <문태중>  
-- CREATE DATE: <2009,03,12>  
-- DESCRIPTION: <입금 매칭 리스트를 가져온다>
-- 2010,03,04 김성호
-- 2010.06.08 박형만 암호화 적용
-- 2012-03-02 WITH(NOLOCK) 추가 	
-- =============================================  
CREATE PROCEDURE [dbo].[SP_PAY_MATCHING_SEARCH_LIST]  
	@FLAG   CHAR(1),  
	@PAGE_INDEX  INT,  
	@PAGE_SIZE  INT,  
	@SEARCH_TYPE INT,  
	@START_DATE  DATETIME,  
	@END_DATE  DATETIME,  
	@PAY_TYPE  INT,  
	@REG_NUMBER  VARCHAR(100),  
	@PAY_NAME  VARCHAR(20),  
	@PAY_PRICE  INT,  
	@PRO_CODE  VARCHAR(20),  
	@RES_CODE  VARCHAR(12),  
	@CONFIRM_TYPE INT  
AS  
BEGIN  
	SET NOCOUNT ON;  

	DECLARE @SQLSTRING NVARCHAR(4000), @PARMDEFINITION NVARCHAR(1000), @FROM INT, @TO INT, @WHERE1 VARCHAR(100);  

	SET @FROM = (@PAGE_INDEX * @PAGE_SIZE) + 1;  
	SET @TO = (@PAGE_INDEX + 1) * @PAGE_SIZE  

	--WHERE 조건 만들기  
--	SET @SQLSTRING = 'WHERE 1 = 1';
	SET @SQLSTRING = '';
	
	IF @PAY_TYPE <> 999   --입금종류  
		SET @SQLSTRING = @SQLSTRING + ' AND A.PAY_TYPE = @PAY_TYPE';  
  
	IF ISNULL(@REG_NUMBER, '') <> ''--계좌번호  
	BEGIN
		IF @PAY_TYPE = 2 
		BEGIN
			SET @SQLSTRING = @SQLSTRING + ' AND A.PAY_SUB_NAME = @REG_NUMBER ';
		END
		ELSE
		BEGIN
			--SET @SQLSTRING = @SQLSTRING + ' AND A.PAY_NUM LIKE ''%'' +  + ''%'' ';
			SET @SQLSTRING = @SQLSTRING + ' AND A.SEC1_PAY_NUM = damo.dbo.pred_meta_plain_v (@REG_NUMBER,''DIABLO'',''dbo.PAY_MASTER'',''PAY_NUM'') ';
		END
	END
	
	IF ISNULL(@START_DATE, '') <> '' AND ISNULL(@END_DATE, '') <> ''  --시작종료일 설정  
	BEGIN  
		IF @SEARCH_TYPE = 0  
			SET @SQLSTRING = @SQLSTRING + ' AND A.PAY_DATE BETWEEN @START_DATE AND @END_DATE';  
		ELSE IF @SEARCH_TYPE = 1  
			SET @SQLSTRING = @SQLSTRING + ' AND A.NEW_DATE BETWEEN @START_DATE AND @END_DATE';  
		ELSE IF @SEARCH_TYPE = 2  
			SET @SQLSTRING = @SQLSTRING + ' AND (C.NEW_DATE BETWEEN @START_DATE AND @END_DATE AND A.CLOSED_YN =''Y'' AND C.NEW_DATE > A.CLOSED_DATE)';  
	END
	
	IF ISNULL(@PAY_NAME, '') <> ''  --입금자  
		SET @SQLSTRING = @SQLSTRING + ' AND A.PAY_NAME LIKE ''%'' + @PAY_NAME + ''%'' '; 
	
	IF ISNULL(@PAY_PRICE, '') <> 0  --입금액  
		SET @SQLSTRING = @SQLSTRING + ' AND A.PAY_PRICE = @PAY_PRICE';  
	IF ISNULL(@PRO_CODE, '') <> ''  --행사코드  
		SET @SQLSTRING = @SQLSTRING + ' AND A.PAY_SEQ IN (SELECT PAY_SEQ FROM PAY_MATCHING WHERE PRO_CODE = @PRO_CODE)';  
	IF ISNULL(@RES_CODE, '') <> ''  --예약코드  
		SET @SQLSTRING = @SQLSTRING + ' AND A.PAY_SEQ IN (SELECT PAY_SEQ FROM PAY_MATCHING WHERE RES_CODE = @RES_CODE)';  
	
	--취소한 것은 출력안함  
	SET @SQLSTRING = @SQLSTRING + ' AND A.CXL_YN = ''N''';

	-- 조건문 완성
	SET @SQLSTRING = 'WHERE ' + SUBSTRING(@SQLSTRING, 6, 10000)

	IF @CONFIRM_TYPE = 0  
	BEGIN  
		SET @WHERE1 = ' AND A.NO_PAY_PRICE > 0'  
	END  
	ELSE IF @CONFIRM_TYPE = 1  
	BEGIN  
		--SET @WHERE1 = ' AND A.NO_PAY_PRICE = 0'  
		SET @WHERE1 = ' AND A.NO_PAY_PRICE <> A.PAY_PRICE'  
	END  
	ELSE  
	BEGIN  
		SET @WHERE1 = ''  
	END  

	IF @FLAG = 'C'   --입금 메칭 총합계 출력 (사용안함: 매칭여부때문에 사용하기 힘듬)  
	BEGIN  
		SET @SQLSTRING = 'SELECT COUNT(*)  
		FROM PAY_MASTER_damo A   
		LEFT JOIN PAY_MATCHING C ON A.PAY_SEQ = C.PAY_SEQ AND C.CXL_YN = ''N''  
		' + @SQLSTRING;  
	END  
	ELSE IF @FLAG = 'L'   --입금 메칭 리스트 출력  
	BEGIN  
		SET @SQLSTRING = N'  
		WITH DOCUMENTLIST AS   
		(  
			SELECT   
				ROW_NUMBER() OVER (ORDER BY A.PAY_DATE, A.PAY_SEQ) AS [ROWNUMBER],  
				A.PAY_SEQ,  C.MCH_SEQ, A.NEW_DATE,  A.PAY_TYPE,  A.PAY_DATE, A.INSTALLMENT,
				damo.dbo.dec_varchar(''DIABLO'',''dbo.PAY_MASTER'',''PAY_NUM'', A.SEC_PAY_NUM) AS PAY_NUM,
				A.PAY_PRICE, A.PAY_NAME, A.PAY_REMARK,  C.RES_CODE,  C.PRO_CODE,
				ISNULL(C.PART_PRICE, 0) AS [PART_PRICE], C.NEW_CODE AS CONFIRM_CODE,
				A.CLOSED_YN, C.REMARK, D.CLOSE_REMARK, D.LAST_CLOSE_DATE,
				(SELECT KOR_NAME FROM EMP_MASTER WITH(NOLOCK) WHERE EMP_CODE = A.NEW_CODE) AS NEW_NAME,  
				(SELECT KOR_NAME FROM EMP_MASTER WITH(NOLOCK) WHERE EMP_CODE = C.NEW_CODE) AS CONFIRM_NAME,  
				(SELECT KOR_NAME FROM AGT_MASTER WITH(NOLOCK) WHERE AGT_CODE = A.AGT_CODE) AS AGT_NAME,  
				--     (A.PAY_PRICE - (SELECT ISNULL(SUM(CASE CXL_YN WHEN ''N'' THEN PART_PRICE ELSE PART_PRICE * -1 END),0) FROM PAY_MATCHING WHERE PAY_SEQ = A.PAY_SEQ)) AS NO_PAY_PRICE  
				--     (A.PAY_PRICE - (SELECT ISNULL(SUM(PART_PRICE),0) FROM PAY_MATCHING WHERE PAY_SEQ = A.PAY_SEQ AND CXL_YN = ''N'')) AS NO_PAY_PRICE
				(
					A.PAY_PRICE - (SELECT ISNULL(SUM(PART_PRICE),0) FROM PAY_MATCHING WITH(NOLOCK) WHERE PAY_SEQ = A.PAY_SEQ AND CXL_YN = ''N'' AND ((@SEARCH_TYPE <> 2) OR (NEW_DATE < @END_DATE)))
				) AS NO_PAY_PRICE
			FROM PAY_MASTER_damo A WITH(NOLOCK) 
			LEFT JOIN PAY_MATCHING C WITH(NOLOCK) ON A.PAY_SEQ = C.PAY_SEQ AND C.CXL_YN = ''N''
			LEFT JOIN PAY_MATCHING_CLOSE D WITH(NOLOCK) ON A.PAY_SEQ = D.PAY_SEQ AND C.MCH_SEQ = D.MCH_SEQ
			' + @SQLSTRING +'
		)  
		SELECT  
			A.*  
		FROM DOCUMENTLIST A   
		WHERE A.ROWNUMBER BETWEEN @FROM AND @TO' + @WHERE1 + ';';
	END  
  
	SET @PARMDEFINITION = N'@FROM INT, @TO INT, @SEARCH_TYPE INT, @START_DATE DATETIME, @END_DATE DATETIME, @PAY_TYPE INT, @REG_NUMBER VARCHAR(100),  
	   @PAY_NAME VARCHAR(20), @PAY_PRICE INT, @PRO_CODE VARCHAR(20), @RES_CODE VARCHAR(12), @CONFIRM_TYPE INT';  

	--PRINT @SQLSTRING   
	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, @FROM, @TO, @SEARCH_TYPE, @START_DATE, @END_DATE, @PAY_TYPE, @REG_NUMBER, @PAY_NAME, @PAY_PRICE, @PRO_CODE, @RES_CODE, @CONFIRM_TYPE;  
	--EXEC SP_PAY_MATCHING_SEARCH_LIST @PAGE_INDEX=0,@PAGE_SIZE=99999,@SEARCH_TYPE=0,@START_DATE='2009-10-04 00:00:00',@END_DATE='2009-10-04 23:59:59',@PAY_TYPE=999,@REG_NUMBER=NULL,@PAY_NAME=NULL,@PAY_PRICE=NULL,@PRO_CODE=N'PPW107-091129',@RES_CODE=NULL,@CONFIRM_TYPE=9,@FLAG=N'L'
END

--EXEC SP_PAY_MATCHING_SEARCH_LIST @PAGE_INDEX=0,@PAGE_SIZE=99999,@SEARCH_TYPE=0,@START_DATE='2010-03-22 00:00:00',@END_DATE='2010-03-22 23:59:59',@PAY_TYPE=999,@REG_NUMBER=NULL,@PAY_NAME=NULL,@PAY_PRICE=NULL,@PRO_CODE=N'PPW107-091129',@RES_CODE=NULL,@CONFIRM_TYPE=9,@FLAG=N'L'




GO
