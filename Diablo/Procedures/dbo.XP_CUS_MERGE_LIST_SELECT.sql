USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*================================================================================================================
■ USP_NAME					: XP_CUS_MERGE_LIST_SELECT
■ DESCRIPTION				: 고객병합 고객정보 검색
■ INPUT PARAMETER			: 
	@CUS_ID					: Web고객ID
	@CUS_NAME				: 고객명
	@CUS_BIRTH				: 생년월일
	@CUS_NUMBER1			: 고객전화번호
	@CUS_NUMBER2			: 고객전화번호
	@CUS_NUMBER3			: 고객전화번호
	@CUS_EMAIL				: 고객이메일
■ OUTPUT PARAMETER			: 
■ EXEC						: 

	exec XP_CUS_MERGE_LIST_SELECT @CUS_ID='jerryhm,test1234',@CUS_NAME='',@CUS_BIRTH='',@CUS_TEL='',@CUS_EMAIL=''
	exec XP_CUS_MERGE_LIST_SELECT @CUS_ID='',@CUS_NAME='박형만',@CUS_BIRTH='1977-09-12',@CUS_TEL='',@CUS_EMAIL='',@PASS_NUM=''
	exec XP_CUS_MERGE_LIST_SELECT @CUS_ID='',@CUS_NAME='박형만',@CUS_BIRTH='',@CUS_TEL='010-9185-2481',@CUS_EMAIL=''
	exec XP_CUS_MERGE_LIST_SELECT @CUS_ID='',@CUS_NAME='이경희',@CUS_BIRTH='1964-12-16',@CUS_TEL='',@CUS_EMAIL=''

	exec XP_CUS_MERGE_LIST_SELECT @CUS_NAME='홍민숙',@CUS_BIRTH='1960-03-28',@PASS_NUM='M30888310'

	exec XP_CUS_MERGE_LIST_SELECT @CUS_NAME='홍민숙',@CUS_BIRTH='1960-03-28',@PASS_NUM='M30888310'


	exec XP_CUS_MERGE_LIST_SELECT @CUS_NAME='',@CUS_NO='5912044'

	exec XP_CUS_MERGE_LIST_SELECT @CUS_ID='',@CUS_NAME='박문덕',@CUS_BIRTH='1976-06-10',@CUS_TEL='',@CUS_EMAIL='',@PASS_NUM='M24482067',@CUS_NO=''
	exec XP_CUS_MERGE_LIST_SELECT @CUS_ID='',@CUS_NAME='전연수',@CUS_BIRTH='1973-07-11',@CUS_TEL='',@CUS_EMAIL='',@PASS_NUM='',@CUS_NO=''

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2015-10-08		정지용			최초생성
   2016-03-29		김성호			리뉴얼
   2017-04-10		정지용			CTI쪽 테이블 날짜 조건 제거 ( 날짜 때문에 느림 )
   2017-05-30		정지용			병도계장 요청으로 해당고객들과 함께 다녀온 출발자들 히스토리 조회 추가
   2018-02-28		김성호			VIP등급 추가로 인한 쿼리 대폭 수정 
   2018-04-04		박형만			컬럼추가 CERT_YN,LAST_LOGIN , NEW_DATE, POINT  , 최근여권번호로 
   2018-04-27		박형만			CUS_ID 여러건 조회 처리 
   2018-05-14		박형만			SNS_INFO  , 여권번호 추가 , @RESULT_TYPE =1 고객번호 조회용 
   2018-06-20		박형만			여권번호 20 자 로 늘림 . 오류 방지 
   2018-08-22		박형만			탈퇴일 추가 , PHONE_AUTH_YN 추가  
   2021-01-12		김영민			FN_CUS_GET_CUS_GRADE_NAME 함수사용 CUS_GRADE 수정   
   2021-12-24		김홍우			WHERE = ' A.CUS_STATE <> ''N''' 조건 추가 
   2022-02-07		오준혁			Gender 검색 추가
================================================================================================================*/ 
CREATE PROCEDURE [dbo].[XP_CUS_MERGE_LIST_SELECT]

	@CUS_ID		VARCHAR(20) = NULL,
	@CUS_NAME	VARCHAR(20),
	@CUS_BIRTH	VARCHAR(10) = NULL,
	@CUS_TEL	VARCHAR(20) = NULL,
	@CUS_EMAIL	VARCHAR(40) = NULL,
	@PASS_NUM	VARCHAR(20) = NULL,
	@CUS_NO		VARCHAR(1000) = NULL,
	@GENDER 	VARCHAR(1) = NULL,
	@RESULT_TYPE VARCHAR(1) = NULL

AS

--DECLARE @CUS_ID		VARCHAR(20) = NULL,
--	@CUS_NAME	VARCHAR(20),
--	@CUS_BIRTH	VARCHAR(10) = NULL,
--	@CUS_TEL	VARCHAR(20) = NULL,
--	@CUS_EMAIL	VARCHAR(40) = NULL,
--	@PASS_NUM	VARCHAR(12) = NULL,
--	@CUS_NO		VARCHAR(1000) = NULL,
--	@RESULT_TYPE VARCHAR(1) = NULL
--SELECT @CUS_ID='',@CUS_NAME='박형만',@CUS_BIRTH='1980-07-08',@CUS_TEL='',@CUS_EMAIL='',@PASS_NUM='M87085302'
--,@RESULT_TYPE = '' 
--SET @CUS_NO = '10150740,10148831'


	DECLARE @SQLSTRING NVARCHAR(MAX),@SQLSTRING2 NVARCHAR(MAX), @PARMDEFINITION NVARCHAR(1000), @WHERE NVARCHAR(MAX)
	DECLARE @CUS_TEL1 VARCHAR(4), @CUS_TEL2 VARCHAR(4), @CUS_TEL3 VARCHAR(20)

	SELECT @WHERE = '', @CUS_TEL = REPLACE(@CUS_TEL, '-', '');

	SET @WHERE = ' A.CUS_STATE <> ''N'''
	IF ISNULL(@CUS_ID, '') <> ''
	BEGIN
		--SET @WHERE = @WHERE + N' AND A.CUS_ID = @CUS_ID'
		SET @WHERE = @WHERE + N' AND A.CUS_ID IN (SELECT DATA FROM dbo.FN_SPLIT('''+@CUS_ID +  ''','',''))  ' 
	END

	IF ISNULL(@CUS_NAME, '') <> ''
	BEGIN 
		SET @WHERE = @WHERE + N' AND A.CUS_NAME LIKE @CUS_NAME + ''%'''
		--SET @WHERE = @WHERE + ' AND A.CUS_NAME = @CUS_NAME'
	END

	IF ISNULL(@CUS_EMAIL, '') <> ''
	BEGIN
		SET @WHERE = @WHERE + N' AND A.EMAIL LIKE @CUS_EMAIL + ''%'''
	END


	-- 전화번호 처리
	IF ISNULL(@CUS_TEL, '') <> ''
	BEGIN
		IF LEN(@CUS_TEL) = 7 OR LEN(@CUS_TEL) = 8
		BEGIN
			SELECT @CUS_TEL1 = '', @CUS_TEL2 = SUBSTRING(@CUS_TEL, 1, (LEN(@CUS_TEL) - 4)), @CUS_TEL3 = SUBSTRING(@CUS_TEL, (LEN(@CUS_TEL) - 3), 4)
		END
		ELSE IF LEN(@CUS_TEL) = 9
		BEGIN
			SELECT @CUS_TEL1 = SUBSTRING(@CUS_TEL, 1, 2), @CUS_TEL2 = SUBSTRING(@CUS_TEL, 3, 3), @CUS_TEL3 = SUBSTRING(@CUS_TEL, 6, 4)
		END
		ELSE IF LEN(@CUS_TEL) = 10 AND SUBSTRING(@CUS_TEL, 1, 2) = '02'
		BEGIN
			SELECT @CUS_TEL1 = SUBSTRING(@CUS_TEL, 1, 2), @CUS_TEL2 = SUBSTRING(@CUS_TEL, 3, 4), @CUS_TEL3 = SUBSTRING(@CUS_TEL, 7, 4)
		END
		ELSE IF LEN(@CUS_TEL) = 10 AND SUBSTRING(@CUS_TEL, 1, 2) <> '02'
		BEGIN
			SELECT @CUS_TEL1 = SUBSTRING(@CUS_TEL, 1, 3), @CUS_TEL2 = SUBSTRING(@CUS_TEL, 4, 3), @CUS_TEL3 = SUBSTRING(@CUS_TEL, 7, 4)
		END
		ELSE IF LEN(@CUS_TEL) = 11
		BEGIN
			SELECT @CUS_TEL1 = SUBSTRING(@CUS_TEL, 1, 3), @CUS_TEL2 = SUBSTRING(@CUS_TEL, 4, 4), @CUS_TEL3 = SUBSTRING(@CUS_TEL, 8, 4)
		END
		ELSE
		BEGIN
			SELECT @CUS_TEL3 = @CUS_TEL
		END 

		IF LEN(@CUS_TEL) = 4
		BEGIN
			SET @WHERE = @WHERE + N' AND (A.NOR_TEL3 = @CUS_TEL3 OR A.COM_TEL3 = @CUS_TEL3 OR A.HOM_TEL3 = @CUS_TEL3)'
		END
		ELSE IF LEN(@CUS_TEL) > 4
		BEGIN
			SET @WHERE = @WHERE + N' AND ((A.NOR_TEL3 = @CUS_TEL3 AND A.NOR_TEL2 = @CUS_TEL2 AND ISNULL(A.NOR_TEL1, '''') = @CUS_TEL1)
				OR (A.COM_TEL3 = @CUS_TEL3 AND A.COM_TEL2 = @CUS_TEL2 AND ISNULL(A.COM_TEL1, '''') = @CUS_TEL1)
				OR (A.HOM_TEL3 = @CUS_TEL3 AND A.HOM_TEL2 = @CUS_TEL2 AND ISNULL(A.HOM_TEL1, '''') = @CUS_TEL1))'
		END
	END

	IF ISNULL(@CUS_BIRTH, '') <> '' AND ISDATE(@CUS_BIRTH) > 0
	BEGIN
		SET @WHERE = @WHERE + N' AND A.BIRTH_DATE = CONVERT(DATETIME, @CUS_BIRTH)'
	END


	-- 성별 조건 추가
	IF ISNULL(@GENDER, '') <> ''
	BEGIN
		SET @WHERE = @WHERE + N' AND A.GENDER = @GENDER'
	END



	--다수 고객번호만 추가 
	IF ISNULL(@CUS_NO, '') <> ''
	BEGIN
		--SET @WHERE = @WHERE + N' AND A.CUS_ID = @CUS_ID'
		SET @WHERE = @WHERE + N' AND A.CUS_NO IN (SELECT DATA FROM dbo.FN_SPLIT('''+@CUS_NO +  ''','',''))  ' 
	END



	--IF ISNULL(@WHERE, '') <> ''
	--BEGIN
	--	SELECT @WHERE = SUBSTRING(@WHERE, 5, 3000)
	--END
	
	DECLARE @PASS_NUM_EXISTS NVARCHAR(1000)
	SET @PASS_NUM_EXISTS = '' 
	-- 여권번호 추가 2018-05-15 
	IF ISNULL(@PASS_NUM, '') <> ''
	BEGIN
		-- 출발자 정보 쪽 WHERE
		SET @PASS_NUM_EXISTS =  N'
AND ( Z.LAST_PASs_NUM = @PASS_NUM OR Z.PASs_NUM = @PASS_NUM  ) '

	END 
	SET @SQLSTRING = N'
DECLARE @CUS_LIST TABLE (CUS_NO INT PRIMARY KEY, MEMBER_TYPE VARCHAR(1) , PASS_NUM VARCHAR(20));

INSERT INTO @CUS_LIST (CUS_NO, MEMBER_TYPE , PASS_NUM)
SELECT A.CUS_NO, MIN(A.MEMBER_TYPE) AS [MEMBER_TYPE]  , MAX(PASS_NUM) 
FROM (
	SELECT A.CUS_NO, (CASE WHEN A.CUS_GRADE > 0 THEN ''1'' ELSE ''7'' END) AS [MEMBER_TYPE]
	,damo.dbo.dec_varchar(''DIABLO'', ''dbo.CUS_CUSTOMER'', ''PASS_NUM'', A.SEC_PASS_NUM) AS PASS_NUM 
	FROM CUS_CUSTOMER_damo A WITH(NOLOCK)
	WHERE ' + @WHERE + N'
	UNION
	SELECT A.CUS_NO, ''2'' AS [MEMBER_TYPE] ,NULL
	FROM CUS_MEMBER A WITH(NOLOCK)
	WHERE ' + @WHERE + N'
	UNION
	SELECT A.CUS_NO, ''2'' AS [MEMBER_TYPE],NULL
	FROM CUS_MEMBER_SLEEP A WITH(NOLOCK)
	WHERE ' + @WHERE + N'
) A
WHERE A.CUS_NO > 1 
GROUP BY A.CUS_NO
;WITH CUS_ALL_LIST AS (
	SELECT * FROM (
	SELECT A.CUS_NO, MIN(A.MEMBER_TYPE) AS [MEMBER_TYPE], MAX(A.CON_RES_COUNT) AS [CON_RES_COUNT], MAX(A.CON_COUNT) AS [CON_COUNT], MAX(A.RES_COUNT) AS [RES_COUNT], MAX(A.RES_LAST_CNT) AS [RES_LAST_CNT],MAX(A.LAST_PASS_NUM) AS LAST_PASS_NUM , MAX(A.PASS_NUM)



 AS PASS_NUM 
	FROM (	
		SELECT A.CUS_NO, A.MEMBER_TYPE, 0 AS [CON_RES_COUNT], 0 AS [CON_COUNT], 0 AS [RES_COUNT], 0 AS [RES_LAST_CNT],'''' AS LAST_PASs_NUM , A.PASS_NUM
		FROM @CUS_LIST A
		UNION
		SELECT A.CUS_NO, ''3'' MEMBER_TYPE, COUNT(*) CON_RES_COUNT, 0 CON_COUNT, 0 RES_COUNT, 0 RES_LAST_CNT,'''',NULL
		FROM Sirens.cti.CTI_CONSULT_RESERVATION A WITH(NOLOCK) WHERE A.CUS_NO IN (SELECT CUS_NO FROM @CUS_LIST) AND A.CONSULT_RESULT = ''1''
		GROUP BY A.CUS_NO
		UNION
		SELECT A.CUS_NO, ''4'', 0, COUNT(*), 0, 0 ,'''',NULL
		FROM Sirens.cti.CTI_CONSULT A WITH(NOLOCK) WHERE A.CUS_NO IN (SELECT CUS_NO FROM @CUS_LIST)
		GROUP BY A.CUS_NO
		UNION
		SELECT A.CUS_NO, MIN(A.MEMBER_TYPE), 0, 0, SUM(CASE WHEN A.DEP_DATE > GETDATE() THEN 1 ELSE 0 END), SUM(CASE WHEN A.DEP_DATE < GETDATE() THEN 1 ELSE 0 END)
		--,MAX(UPPER(A.PASs_NUM))
		,UPPER((SELECT TOP 1 damo.dbo.dec_varchar(''DIABLO'', ''dbo.RES_CUSTOMER'', ''PASS_NUM'', AA.SEC_PASS_NUM) AS  LAST_PASs_NUM
			FROM Diablo.DBO.RES_CUSTOMER_damo AA WITH(NOLOCK) WHERE AA.RES_CODE = MAX(A.LAST_PASS_RES_CODE)
			AND AA.SEC_PASS_NUM IS NOT NULL AND AA.CUS_NO IN (SELECT CUS_NO FROM @CUS_LIST) AND AA.RES_STATE = 0 
			ORDER BY AA.NEW_DATE DESC 
			)),NULL
		FROM (
			SELECT CUS_NO, (CASE WHEN A.DEP_DATE > GETDATE() THEN ''5'' ELSE ''6'' END) AS [MEMBER_TYPE], A.DEP_DATE , '''' LAST_PASS_RES_CODE
			FROM Diablo.DBO.RES_MASTER_damo A WITH(NOLOCK)
			WHERE A.RES_STATE <> 9 AND A.CUS_NO IN (SELECT CUS_NO FROM @CUS_LIST)
			UNION 
			SELECT T.CUS_NO, (CASE WHEN T.DEP_DATE > GETDATE() THEN ''5'' ELSE ''6'' END) AS [MEMBER_TYPE], T.DEP_DATE, (CASE WHEN T.RES_NUM = 1 THEN T.RES_CODE ELSE  NULL END) 
			FROM 
			(
				SELECT B.CUS_NO,A.DEP_DATE,A.RES_CODE,ROW_NUMBER() OVER ( ORDER BY  (CASE WHEN B.SEC_PASS_NUM IS NOT NULL THEN 0 ELSE 1 END) ,A.DEP_DATE DESC, B.NEW_DATE DESC)  AS RES_NUM  
				FROM Diablo.DBO.RES_MASTER_damo A WITH(NOLOCK) INNER JOIN Diablo.DBO.RES_CUSTOMER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
				WHERE A.RES_STATE NOT IN(7,8,9) AND B.RES_STATE <> 1 AND B.CUS_NO IN (SELECT CUS_NO FROM @CUS_LIST)
			)T
		) A
		GROUP BY A.CUS_NO
	) A
	GROUP BY A.CUS_NO
	) Z 
) ' 

-- 스케쥴러용 고객번호 RETURN 
IF(ISNULL(@RESULT_TYPE,'') = '1')
BEGIN 
	SET @SQLSTRING = @SQLSTRING +  N'
SELECT Z.MEMBER_TYPE,Z.CUS_NO
FROM CUS_ALL_LIST Z
INNER JOIN Diablo.DBO.CUS_CUSTOMER_DAMO A WITH(NOLOCK) ON Z.CUS_NO = A.CUS_NO
'+@PASS_NUM_EXISTS+N'
ORDER BY Z.MEMBER_TYPE, A.CUS_GRADE DESC, Z.CON_RES_COUNT DESC, Z.CON_COUNT DESC, Z.RES_COUNT DESC, A.CUS_NAME;
'
END 
ELSE -- 기본 조회  
BEGIN
	SET @SQLSTRING = @SQLSTRING +  N'
SELECT
	Z.MEMBER_TYPE,
	A.CUS_NO,
	Z.CON_RES_COUNT,
	Z.CON_COUNT AS CONSULT_CNT,
	Z.RES_COUNT,
	Z.RES_LAST_CNT,
	A.CUS_ID,
	A.CUS_NAME,
	dbo.FN_CUS_GET_CUS_GRADE_NAME(A.CUS_NO ,FORMAT(GETDATE() ,''yyyy'')) AS CUS_GRADE,
	A.BIRTH_DATE,
	DATEDIFF(YEAR,CAST(A.BIRTH_DATE AS DATETIME),GETDATE()) AS AGE,
	A.GENDER,
	A.NOR_TEL1, A.NOR_TEL2, A.NOR_TEL3, 
	A.EMAIL,
	--CONVERT(VARCHAR(10), A.NEW_DATE, 120) AS NEW_DATE,
	(A.LAST_NAME + ''/'' + A.FIRST_NAME) AS ENG_NAME,
	A.HOM_TEL1, A.HOM_TEL2, A.HOM_TEL3,
	A.COM_TEL1, A.COM_TEL2, A.COM_TEL3,
	A.RCV_SMS_YN,
	A.RCV_EMAIL_YN,
	A.ETC,
	A.LAST_NAME,
	A.FIRST_NAME,
	A.ADDRESS1,
	A.ADDRESS2,
	A.ZIP_CODE,
	Z.PASS_NUM,
	Z.LAST_PASs_NUM,
	STUFF(( 
		SELECT '','' + ''['' + CONVERT(VARCHAR, RC_1.CUS_NO) + '']'' + ISNULL(RC_1.CUS_NAME, ''이름없음'') + '' ('' + CONVERT(VARCHAR, COUNT(1)) + '')'' 
		FROM RES_CUSTOMER_damo RC_1 WHERE RC_1.RES_CODE IN
		(
			SELECT RC_0.RES_CODE FROM RES_MASTER_damo RM WITH(NOLOCK)
			INNER JOIN RES_CUSTOMER_damo RC_0 WITH(NOLOCK) ON RM.RES_CODE = RC_0.RES_CODE AND RM.PROFIT_TEAM_CODE <> ''524'' -- 법인팀 제외
			WHERE RC_0.CUS_NO = A.CUS_NO GROUP BY RC_0.RES_CODE
		) GROUP BY RC_1.CUS_NO, RC_1.CUS_NAME HAVING RC_1.CUS_NO <> A.CUS_NO AND RC_1.CUS_NAME IS NOT NULL ORDER BY COUNT(1) DESC
		FOR XML PATH ('''')), 1, 1, '''') AS Etc2 ,  -- 병도계장 요청으로 추가 
	ISNULL(B.IPIN_DUP_INFO,C.IPIN_DUP_INFO) AS IPIN_DUP_INFO ,
	ISNULL(B.CERT_YN,C.CERT_YN) AS CERT_YN ,
	ISNULL(B.PHONE_AUTH_YN,C.PHONE_AUTH_YN) AS PHONE_AUTH_YN ,
	ISNULL(B.PHONE_AUTH_DATE,C.PHONE_AUTH_DATE) AS PHONE_AUTH_DATE ,
	ISNULL(B.SNS_MEM_YN,C.SNS_MEM_YN) AS SNS_MEM_YN ,
	ISNULL(B.LAST_LOGIN_DATE,C.LAST_LOGIN_DATE) AS  LAST_LOGIN_DATE ,A.NEW_DATE ,
	(SELECT TOP 1 TOTAL_PRICE FROM CUS_POINT WHERE CUS_NO = A.CUS_NO ORDER BY POINT_NO DESC )  AS POINT_PRICE ,
	STUFF(( 
		SELECT ('','' + CONVERT(varchar,AA.SNS_COMPANY) ) AS [text()]
		FROM CUS_SNS_INFO AA WHERE Z.CUS_NO = AA.CUS_NO 
		AND AA.DISCNT_DATE IS NULL 
		FOR XML PATH('''')), 1, 1, '''') AS SNS_COMPANYS,
	ISNULL((SELECT TOP 1 RES_CODE FROM RES_CUSTOMER_damo WHERE CUS_NO = A.CUS_NO AND RES_STATE = 0 ORDER BY NEW_DATE DESC )
		,(SELECT TOP 1 RES_CODE FROM RES_MASTER_damo WHERE CUS_NO = A.CUS_NO AND RES_STATE NOT IN (7,8,9) ORDER BY DEP_DATE DESC )) AS RES_CODE
	, A.CXL_DATE 
FROM CUS_ALL_LIST Z
INNER JOIN Diablo.DBO.CUS_CUSTOMER_DAMO A WITH(NOLOCK) ON Z.CUS_NO = A.CUS_NO
LEFT JOIN CUS_MEMBER_SLEEP B WITH(NOLOCK) ON Z.CUS_NO = B.CUS_NO
LEFT JOIN CUS_MEMBER C WITH(NOLOCK) ON Z.CUS_NO = C.CUS_NO
'+@PASS_NUM_EXISTS+N'
ORDER BY Z.MEMBER_TYPE, A.CUS_GRADE DESC, Z.CON_RES_COUNT DESC, Z.CON_COUNT DESC, Z.RES_COUNT DESC, A.CUS_NAME;
';

END 


	SET @PARMDEFINITION = N'
		@CUS_NAME	VARCHAR(20),
		@CUS_BIRTH	VARCHAR(10),
		@CUS_TEL1	VARCHAR(4),
		@CUS_TEL2	VARCHAR(4),
		@CUS_TEL3	VARCHAR(4),
		@CUS_EMAIL	VARCHAR(40),
		@PASs_NUM	VARCHAR(20),
		@GENDER	    VARCHAR(1)';


	--PRINT @SQLSTRING
	--SELECT LEN(@SQLSTRING)

	EXEC SP_EXECUTESQL @SQLSTRING  , @PARMDEFINITION,
		@CUS_NAME,
		@CUS_BIRTH,
		@CUS_TEL1,
		@CUS_TEL2,
		@CUS_TEL3,
		@CUS_EMAIL,
		@PASS_NUM,
		@GENDER

GO
