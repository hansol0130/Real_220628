USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*================================================================================================================
■ USP_NAME					: SP_ACC_PUM_SLIPD_INS_NEW
■ DESCRIPTION				: 전자결재 문서 전표 생성 시 사용되는 SP
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: 
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
	DATE			AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
	2010-06-21		투어소프트		최초생성
	2016-01-19		김성호			미수금 마이너스의 경우 거래처 예외처리 추가
	2016-03-08		김성호			전자결재 항목별 전표생성을 위해 SP 리뉴얼
================================================================================================================*/ 
CREATE PROCEDURE [dbo].[SP_ACC_PUM_SLIPD_INS_NEW]
	@SLIP_MK_DAY	CHAR(8),			/* 전표일자 */
	--@SLIP_MK_SEQ	INT OUTPUT,			/* 전표일련번호 */
	@EDI_CODES		VARCHAR(1000),		/* 전자결재번호들 (EX. 1602033182,1602044228,1602043726)  */
	@EMP_NO			EMP_CODE,			/* 등록사번 */
	@SLIP_DATE		DATETIME,
	@ERROR_MSG		VARCHAR(1000) OUTPUT

/*
	AccountProcessList.asps 에서 호출
	// 지상비/공동경비 선급금				ProcessType = "1";  출발일 이전 처리 금액 플러스					선급급/보통예금
	// 지상비/공동경비 미지급랜드			ProcessType = "2";  출발일 포함 이후 금액 플러스					미지급금(랜드)/보통예금
	// 지상비/공동경비 선급금 마이너스	ProcessType = "3";  출발일 포함 이전 금액 마이너스				선급급/보통예금
	// 지상비/공동경비 미수금 마이너스	ProcessType = "4";  출발일 이후 금액 마이너스 <- 거래처가 반대		보통예금/미수금(거래처)
*/

--SELECT *
--FROM ACC_JUNL WITH(NOLOCK)      
--WHERE JUNL_FG IN ('G3', 'G4') AND JUNL_CD = 'A1'

AS
BEGIN

DECLARE
		@SLIP_MK_SEQ	INT,			/* 전표 일련 번호 */
		@SLIP_FG		CHAR(1),		/* 수입(1) 지출(2) 대체(3) */
		@EDI_CODE		VARCHAR(10),
		@JUNL_FG		VARCHAR(2),		/* 분개계정코드 */
        @JUNL_NM		VARCHAR(12),
		@USE_ACC_CD1	VARCHAR(10),	/* 차변계정코드 */
		@USE_ACC_CD2	VARCHAR(10),	/* 대변계정코드 */
		@MASTER_TYPE	VARCHAR(20),	/* 동일문서의 타입종류 전체 */
		@PROCESS_TYPE	CHAR(1),		/* 동일문서의 타입종류 */
		@SET_SEQ_NO		INT,			/* 정산 지상비, 공동경비 순번코드 */

		@DEB_CHECK		INT,			/* 차변구분값 */
		@CRE_CHECK		INT,			/* 대변구분값 */
		@DEB_PRICE		DECIMAL,		/* 차변금액 */
		@TOTAL_CRE_PRICE	DECIMAL,	/* 대변 전체 금액 */
        @DEB_REMARK		VARCHAR(200),	/* 비고1 */
        @CRE_REMARK		VARCHAR(200),	/* 비고1 */
        
        @PRO_CODE		VARCHAR(20),
        @DEPT_CD		VARCHAR(10),
        @SITE_CD1		VARCHAR(10),	/* 차변거래처코드 */
        @SITE_CD2		VARCHAR(10),	/* 대변거래처코드 */

        @SAVE_ACC_NO	VARCHAR(20),	/* 계좌번호 */
        @NEW_CODE		VARCHAR(10),	/* 입금자사번 */
        @RETURN_CODE	INT,			/* 리턴 에러 코드 */

		@FG_NM1			VARCHAR(40),
		@FG_NM2			VARCHAR(40),
		@FG_NM3			VARCHAR(40),

		-- 이전코드 보관
		@B_EDI_CODE		VARCHAR(10) = '',
		@B_MASTER_TYPE	VARCHAR(20) = '',
		@B_USE_ACC_CD2	VARCHAR(10),
		@B_CRE_CHECK	INT	= 0

BEGIN TRY
	BEGIN TRAN

	DECLARE MY_CURSOR CURSOR FOR


		WITH LIST1 AS (
			SELECT A.EDI_CODE, D.DEP_DATE
				, (CASE
						WHEN C.EDI_CODE IS NOT NULL THEN 'G4'
						WHEN B.EDI_CODE IS NOT NULL THEN 'G3'
						WHEN A.DOC_TYPE = '4' THEN 'G1'
						WHEN A.DOC_TYPE = '8' AND A.DETAIL_TYPE = '3' THEN 'G2'      
						WHEN A.DOC_TYPE = '8' AND A.DETAIL_TYPE = '4' THEN 'G5'
						WHEN A.DOC_TYPE = '8' AND A.DETAIL_TYPE = '5' THEN 'G6' END) AS [JUNL_FG]
				, (CASE
						WHEN C.EDI_CODE IS NOT NULL THEN '[지상비지결]'
						WHEN B.EDI_CODE IS NOT NULL THEN '[공동비지결]'
						WHEN A.DOC_TYPE = '4' THEN '[일반지결]'
						WHEN A.DOC_TYPE = '8' AND A.DETAIL_TYPE = '3' THEN '[환불지결]'
						WHEN A.DOC_TYPE = '8' AND A.DETAIL_TYPE = '4' THEN '[기타지결]'
						WHEN A.DOC_TYPE = '8' AND A.DETAIL_TYPE = '5' THEN '[선수금환불]' END) AS [JUNL_NM]
				, (CASE
						WHEN C.EDI_CODE IS NOT NULL THEN C.LAND_SEQ_NO
						WHEN B.EDI_CODE IS NOT NULL THEN B.GRP_SEQ_NO END) AS [SET_SEQ_NO]
				, ISNULL(ISNULL(C.PAY_PRICE, B.PRICE), A.PRICE) AS [PRICE]
				, A.SUBJECT AS [DEB_REMARK]
				, A.SUBJECT AS [CRE_REMARK]
				, A.RCV_TEAM_CODE
				, A.PRO_CODE
			FROM EDI_MASTER_DAMO A WITH(NOLOCK)
			LEFT JOIN SET_GROUP B WITH(NOLOCK) ON A.EDI_CODE = B.EDI_CODE
			LEFT JOIN SET_LAND_AGENT C WITH(NOLOCK) ON A.EDI_CODE = C.EDI_CODE
			LEFT JOIN PKG_DETAIL D WITH(NOLOCK) ON A.PRO_CODE = D.PRO_CODE
			WHERE A.EDI_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@EDI_CODES, ','))
			 AND A.DOC_TYPE IN ('4', '8') AND A.EDI_STATUS = '3'
			 AND NOT EXISTS (SELECT P.EDI_CODE FROM ACC_PUM_SLIP P WITH(NOLOCK) WHERE P.EDI_CODE = A.EDI_CODE)
		)
		, LIST2 AS (
			SELECT A.EDI_CODE, A.DEP_DATE, A.JUNL_FG, A.JUNL_NM, A.PRICE, A.RCV_TEAM_CODE, A.PRO_CODE, A.SET_SEQ_NO --*,
				, ((CASE WHEN JUNL_FG = 'G1' THEN (A.JUNL_NM + ' ') ELSE '' END) + A.DEB_REMARK ) AS [DEB_REMARK]
				, ((CASE WHEN JUNL_FG = 'G1' THEN (A.JUNL_NM + ' ') ELSE '' END) + A.CRE_REMARK ) AS [CRE_REMARK]
				, (CASE
					WHEN A.JUNL_FG IN ('G3', 'G4') AND A.PRICE > 0 AND DATEDIFF(DAY, @SLIP_DATE, A.DEP_DATE) > 0 THEN '1'
					WHEN A.JUNL_FG IN ('G3', 'G4') AND A.PRICE > 0 AND DATEDIFF(DAY, @SLIP_DATE, A.DEP_DATE) <= 0 THEN '2'
					WHEN A.JUNL_FG IN ('G3', 'G4') AND A.PRICE <= 0 AND DATEDIFF(DAY, @SLIP_DATE, A.DEP_DATE) > 0 THEN '3'
					WHEN A.JUNL_FG IN ('G3', 'G4') AND A.PRICE <= 0 AND DATEDIFF(DAY, @SLIP_DATE, A.DEP_DATE) <= 0 THEN '4'
					ELSE '0' END) AS [PROCESS_TYPE]
			FROM LIST1 A
		)
		, LIST3 AS (
			SELECT A.EDI_CODE, (SELECT (',' + PROCESS_TYPE ) AS [text()] FROM LIST2 AA WHERE AA.EDI_CODE = A.EDI_CODE GROUP BY AA.PROCESS_TYPE FOR XML PATH('')) AS [MASTER_TYPE]
			FROM LIST2 A
			GROUP BY A.EDI_CODE
		)
		, LIST4 AS (
			SELECT A.EDI_CODE, A.JUNL_FG, A.JUNL_NM, B.USE_ACC_CD1, B.USE_ACC_CD2, C.MASTER_TYPE, A.PROCESS_TYPE, A.SET_SEQ_NO
				, (CASE WHEN B.USE_ACC_CD1 = '10300' THEN 0 ELSE A.SET_SEQ_NO END) AS [DEB_CHECK]
				, (CASE WHEN B.USE_ACC_CD2 = '10300' THEN 0 ELSE A.SET_SEQ_NO END) AS [CRE_CHECK]
				, (CASE WHEN USE_ACC_CD1 = '10300' THEN 0 ELSE A.PRICE END) AS [DEB_PRICE]
				, (CASE WHEN USE_ACC_CD1 = '10300' THEN A.PRICE ELSE 0 END) AS [CENTER_PRICE]	-- 보통예금은 차변값을 대변값에 같이 계산
				, (A.PRICE * (CASE WHEN A.PROCESS_TYPE = '4' THEN -1 ELSE 1 END)) AS [CRE_PRICE]
				, A.PRO_CODE, A.DEP_DATE, A.DEB_REMARK, A.CRE_REMARK, A.RCV_TEAM_CODE
			FROM LIST2 A
			LEFT JOIN ACC_JUNL B WITH(NOLOCK) ON A.JUNL_FG = B.JUNL_FG AND B.JUNL_CD = (CASE WHEN A.PROCESS_TYPE = '0' THEN 'A' ELSE A.PROCESS_TYPE END)
			LEFT JOIN LIST3 C ON A.EDI_CODE = C.EDI_CODE
		)
		, LIST5 AS (
			-- UNION을 위해 항목 맞춤 (실질적으로 대변 등록을 위한 값)
			SELECT
				A.EDI_CODE, A.JUNL_FG, A.JUNL_NM, A.USE_ACC_CD1, A.USE_ACC_CD2, A.MASTER_TYPE, A.PROCESS_TYPE, A.SET_SEQ_NO
				, A.DEB_CHECK, A.CRE_CHECK, A.DEB_PRICE, A.CENTER_PRICE, A.CRE_PRICE
				, A.PRO_CODE, A.DEP_DATE, A.DEB_REMARK, A.CRE_REMARK, A.RCV_TEAM_CODE
			FROM LIST4 A
			UNION
			SELECT
				A.EDI_CODE, MIN(B.JUNL_FG), MIN(B.JUNL_NM), MIN(B.USE_ACC_CD2), MIN(B.USE_ACC_CD1), MIN(B.MASTER_TYPE), MIN(B.PROCESS_TYPE), MIN(B.SET_SEQ_NO)
				, MIN(DEB_CHECK), MIN(CRE_CHECK), 0, 0, 0
				, MIN(B.PRO_CODE), MIN(B.DEP_DATE), MIN(B.DEB_REMARK), MIN(B.CRE_REMARK), MIN(B.RCV_TEAM_CODE)
			FROM (
				SELECT A.EDI_CODE
					, SUM(CASE WHEN A.DEB_PRICE <> 0 THEN 1 ELSE 0 END) AS [DEB_COUNT]
					, SUM(CASE WHEN A.CENTER_PRICE <> 0 THEN 1 ELSE 0 END) AS [CENTER_COUNT]
				FROM LIST4 A
				WHERE A.JUNL_FG IN ('G3', 'G4')
				GROUP BY A.EDI_CODE
			) A
			INNER JOIN LIST4 B ON A.EDI_CODE = B.EDI_CODE
			WHERE A.DEB_COUNT = 0
			GROUP BY A.EDI_CODE
		)
		, LIST6 AS (
			-- 차변보통예금과 대변보통예금 합치기
			SELECT A.EDI_CODE, A.USE_ACC_CD2, A.CRE_CHECK, (A.TOTAL_PRICE + ISNULL(B.TOTAL_PRICE, 0)) AS [TOTAL_CRE_PRICE]
			FROM (
				-- 대변금액
				SELECT A.EDI_CODE, A.USE_ACC_CD2 AS [USE_ACC_CD2], A.CRE_CHECK, SUM(A.CRE_PRICE) AS [TOTAL_PRICE]
				FROM LIST5 A
				GROUP BY A.EDI_CODE, A.USE_ACC_CD2, A.CRE_CHECK
			) A
			LEFT JOIN (
				-- 차변 보통예금 금액
				SELECT A.EDI_CODE, A.USE_ACC_CD1 AS [USE_ACC_CD2], A.DEB_CHECK, SUM(A.CENTER_PRICE) AS [TOTAL_PRICE]
				FROM LIST5 A
				GROUP BY A.EDI_CODE, A.USE_ACC_CD1, A.DEB_CHECK
			) B ON A.EDI_CODE = B.EDI_CODE AND A.USE_ACC_CD2 = B.USE_ACC_CD2
			--ORDER BY A.EDI_CODE
		)
		SELECT
			A.EDI_CODE, A.JUNL_FG, A.JUNL_NM, A.USE_ACC_CD1, A.USE_ACC_CD2, A.MASTER_TYPE, A.PROCESS_TYPE, A.SET_SEQ_NO
			, A.DEB_CHECK, A.CRE_CHECK, A.DEB_PRICE, B.TOTAL_CRE_PRICE, A.DEB_REMARK, A.CRE_REMARK
			, A.PRO_CODE, A.RCV_TEAM_CODE AS [DEPT_CD], C.AGT_CODE AS [DEB_AGT_CODE], C.AGT_CODE AS [CRE_AGT_CODE], C.NEW_CODE
		FROM LIST5 A
		INNER JOIN LIST6 B ON A.EDI_CODE = B.EDI_CODE AND A.USE_ACC_CD2 = B.USE_ACC_CD2 AND A.CRE_CHECK = B.CRE_CHECK-- AND A.PROCESS_TYPE = B.PROCESS_TYPE
		INNER JOIN EDI_MASTER_damo C WITH(NOLOCK) ON A.EDI_CODE = C.EDI_CODE
		ORDER BY A.MASTER_TYPE, A.USE_ACC_CD2

	OPEN MY_CURSOR

	FETCH NEXT FROM MY_CURSOR INTO @EDI_CODE, @JUNL_FG, @JUNL_NM, @USE_ACC_CD1, @USE_ACC_CD2, @MASTER_TYPE, @PROCESS_TYPE, @SET_SEQ_NO
		,@DEB_CHECK, @CRE_CHECK, @DEB_PRICE, @TOTAL_CRE_PRICE, @DEB_REMARK, @CRE_REMARK, @PRO_CODE, @DEPT_CD, @SITE_CD1, @SITE_CD2, @NEW_CODE

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF @B_MASTER_TYPE <> @MASTER_TYPE
		BEGIN

			--PRINT 'B_MASTER_TYPE : ' + @B_MASTER_TYPE
			--PRINT 'MASTER_TYPE :' + @MASTER_TYPE

			SELECT @SLIP_FG = '3' /* 대체전표 */
			EXEC @SLIP_MK_SEQ = SP_ACC_SLIPM_SEQ @SLIP_MK_DAY, @EMP_NO, @SLIP_FG, @JUNL_FG

		END

		--IF @B_EDI_CODE <> @EDI_CODE
		IF NOT EXISTS(SELECT 1 FROM ACC_PUM_SLIP A WITH(NOLOCK) WHERE A.EDI_CODE = @EDI_CODE AND A.SLIP_MK_DAY = @SLIP_MK_DAY AND A.SLIP_MK_SEQ = @SLIP_MK_SEQ)
		BEGIN
			
			--PRINT '@B_EDI_CODE : ' + @B_EDI_CODE
			--PRINT '@EDI_CODE :' + @EDI_CODE

			-- 등록완료
			INSERT INTO ACC_PUM_SLIP (EDI_CODE, SLIP_MK_DAY, SLIP_MK_SEQ, INS_DT)
			VALUES (@EDI_CODE, @SLIP_MK_DAY, @SLIP_MK_SEQ, DEFAULT)
		END

		-- 반제를 위해 공동경비, 지상비 지결서는 정산 순번을 비고에 추가한다
		IF @JUNL_FG IN ('G3', 'G4')
		BEGIN
			SELECT @FG_NM1 = @JUNL_FG, @FG_NM2 = @PRO_CODE, @FG_NM3 = CONVERT(VARCHAR(40), @SET_SEQ_NO)
		END
		ELSE
		BEGIN
			SELECT @FG_NM1 = NULL, @FG_NM2 = NULL, @FG_NM3 = NULL
		END

		-- 차변  
		IF @DEB_PRICE <> 0
		BEGIN

			SELECT @SAVE_ACC_NO = ''

			IF @JUNL_FG = 'G6'
			BEGIN
				SELECT @SAVE_ACC_NO = damo.dbo.dec_varchar('DIABLO', 'dbo.PAY_MASTER', 'PAY_NUM', B.sec_PAY_NUM) 
				FROM EDI_MASTER A WITH(NOLOCK)
				INNER JOIN PAY_MASTER_DAMO B WITH(NOLOCK) ON A.PAY_SEQ = B.PAY_SEQ
				WHERE A.EDI_CODE = @EDI_CODE
			END
				
			EXEC @RETURN_CODE = SP_ACC_SLIPD_INS_NEW  @SLIP_MK_DAY, @SLIP_MK_SEQ, @USE_ACC_CD1, '1', @SITE_CD1, @DEPT_CD, @NEW_CODE,
                                    @PRO_CODE, @SAVE_ACC_NO, @DEB_PRICE, 0, @DEB_REMARK, @EMP_NO, @FG_NM1, @FG_NM2, @FG_NM3

			IF @RETURN_CODE <> 0
			BEGIN
				THROW 60000, '차변 ACC_SLIPD 등록 오류', 1;
			END
		END

		-- 대변 은 금액 통합해서 한건으로 기록
		IF @TOTAL_CRE_PRICE <> 0
		BEGIN

			IF (ISNULL(@B_EDI_CODE,'') <> @EDI_CODE) OR (ISNULL(@B_USE_ACC_CD2, '') <> @USE_ACC_CD2) OR (ISNULL(@B_CRE_CHECK, 0) <> @CRE_CHECK)
			BEGIN

				--PRINT '실행'
				
				--SELECT @USE_ACC_CD = USE_ACC_CD2                      
				--FROM ACC_JUNL WITH(NOLOCK)
				--WHERE JUNL_FG = @JUNL_FG AND JUNL_CD = (CASE WHEN @PROCESS_TYPE = '0' THEN 'A' ELSE @PROCESS_TYPE END)
              
				SELECT @SITE_CD2 = CASE WHEN @PROCESS_TYPE = 4 THEN @SITE_CD2 ELSE USE_ACC_CD1 END, /* 거래처-은행 */
					@SAVE_ACC_NO = RTRIM(REMARK)      
				FROM ACC_JUNL WITH(NOLOCK)     
				WHERE JUNL_FG = @JUNL_FG AND JUNL_CD = 'A1'
			
				EXEC @RETURN_CODE = SP_ACC_SLIPD_INS_NEW  @SLIP_MK_DAY, @SLIP_MK_SEQ, @USE_ACC_CD2, '2', @SITE_CD2, @DEPT_CD, @NEW_CODE, 
                                       @PRO_CODE, @SAVE_ACC_NO, 0, @TOTAL_CRE_PRICE, @CRE_REMARK, @EMP_NO, @FG_NM1, @FG_NM2, @FG_NM3

				IF @RETURN_CODE <> 0
				BEGIN
					THROW 60000, '대변 ACC_SLIPD 등록 오류', 1;
				END

			END
		END

		-- 프로세스 타입 체크를 위해 필요
		--SELECT @B_PROCESS_TYPE = @PROCESS_TYPE, @B_USE_ACC_CD2 = @USE_ACC_CD2, @B_MASTER_TYPE = @MASTER_TYPE, @B_EDI_CODE = @EDI_CODE

		SELECT @B_EDI_CODE = @EDI_CODE, @B_MASTER_TYPE = @MASTER_TYPE, @B_USE_ACC_CD2 = @USE_ACC_CD2, @B_CRE_CHECK = @CRE_CHECK

		FETCH NEXT FROM MY_CURSOR INTO @EDI_CODE, @JUNL_FG, @JUNL_NM, @USE_ACC_CD1, @USE_ACC_CD2, @MASTER_TYPE, @PROCESS_TYPE, @SET_SEQ_NO
			,@DEB_CHECK, @CRE_CHECK, @DEB_PRICE, @TOTAL_CRE_PRICE, @DEB_REMARK, @CRE_REMARK, @PRO_CODE, @DEPT_CD, @SITE_CD1, @SITE_CD2, @NEW_CODE
	END

	CLOSE MY_CURSOR
	DEALLOCATE MY_CURSOR

	--SELECT @ERROR_MSG = ''

	COMMIT TRAN
END TRY
BEGIN CATCH

	--print ERROR_MESSAGE()

	SELECT @ERROR_MSG = ISNULL(@ERROR_MSG, '') + ERROR_MESSAGE();

	-- 커서 돌다 에러시 커서 종료하기 위해 추가
	IF EXISTS(SELECT 1 FROM SYS.SYSCURSORS WHERE CURSOR_NAME = 'MY_CURSOR')
    BEGIN
        CLOSE MY_CURSOR
        DEALLOCATE MY_CURSOR
    END

	ROLLBACK TRAN
END CATCH

END
GO
