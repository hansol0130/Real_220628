USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*================================================================================================================
■ USP_NAME					: SP_EVT_ROULETTE_POINT_LIST
■ DESCRIPTION				: 룰렛이벤트 적립 리스트
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: 
exec SP_EVT_ROULETTE_POINT_LIST @START_DATE=N'2014-05-01',@END_DATE=N'2014-05-29'
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2014-05-26		정지용
   2014-09-02		정지용			호텔적립 추가
================================================================================================================*/ 
CREATE PROC [dbo].[SP_EVT_ROULETTE_POINT_LIST]
@START_DATE VARCHAR(10),
@END_DATE VARCHAR(10)
AS 
BEGIN	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	WITH LIST AS
	(
		SELECT 
			A.NEW_DATE,
			B.CUS_ID,
			B.CUS_NAME,
			B.NOR_TEL1,
			B.NOR_TEL2,
			B.NOR_TEL3,
			B.EMAIL,
			A.RES_CODE,
			C.PRO_CODE,
			E.DEP_DATE,
			E.ARR_DATE,
			A.REMARK,
			--((ISNULL(D.SALE_PRICE, 0) + ISNULL(D.CHG_PRICE, 0) + ISNULL(D.TAX_PRICE, 0)) - ISNULL(D.DC_PRICE, 0)) AS TOTAL_PRICE
			DBO.FN_RES_GET_TOTAL_PRICE_ONE(C.RES_CODE, D.SEQ_NO) AS TOTAL_PRICE
		FROM EVT_ROULETTE A WITH(NOLOCK)
		INNER JOIN CUS_MEMBER B WITH(NOLOCK) ON A.CUS_CODE = B.CUS_NO
		INNER JOIN RES_MASTER_damo C WITH(NOLOCK) ON A.RES_CODE = C.RES_CODE
		INNER JOIN RES_CUSTOMER_damo AS D WITH(NOLOCK) ON C.RES_CODE = D.RES_CODE AND A.CUS_CODE = D.CUS_NO AND D.RES_STATE IN (0) 	
		INNER JOIN PKG_DETAIL E WITH(NOLOCK) ON C.PRO_CODE = E.PRO_CODE
		GROUP BY C.RES_CODE, D.SEQ_NO, A.NEW_DATE,B.CUS_ID,B.CUS_NAME,B.NOR_TEL1,B.NOR_TEL2,B.NOR_TEL3,B.EMAIL,A.RES_CODE,C.PRO_CODE,E.DEP_DATE,E.ARR_DATE,D.SALE_PRICE,D.CHG_PRICE, D.TAX_PRICE,D.DC_PRICE,A.REMARK

		UNION ALL

		SELECT
			A.NEW_DATE,
			B.CUS_ID,
			B.CUS_NAME,
			B.NOR_TEL1,
			B.NOR_TEL2,
			B.NOR_TEL3,
			B.EMAIL,
			A.RES_CODE,
			C.PRO_CODE,
			C.DEP_DATE,
			C.ARR_DATE,
			A.REMARK,
			DBO.FN_RES_HTL_GET_TOTAL_PRICE(C.RES_CODE) AS TOTAL_PRICE
		FROM EVT_ROULETTE A WITH(NOLOCK)
		INNER JOIN CUS_MEMBER B WITH(NOLOCK) ON A.CUS_CODE = B.CUS_NO
		INNER JOIN RES_MASTER_damo C WITH(NOLOCK) ON A.RES_CODE = C.RES_CODE AND C.PRO_TYPE = 3
		GROUP BY C.RES_CODE, A.NEW_DATE,B.CUS_ID,B.CUS_NAME,B.NOR_TEL1,B.NOR_TEL2,B.NOR_TEL3,B.EMAIL,A.RES_CODE,C.PRO_CODE,C.DEP_DATE,C.ARR_DATE,A.REMARK
	) 
	SELECT 
		Z.NEW_DATE,
		Z.CUS_ID, 		
		Z.CUS_NAME,
		Z.NOR_TEL1,
		Z.NOR_TEL2,
		Z.NOR_TEL3,
		Z.EMAIL,
		CASE 
			WHEN TOTAL_PRICE >= 10000 AND TOTAL_PRICE < 1000000 THEN '1' 	  
			WHEN TOTAL_PRICE >= 1000000 AND TOTAL_PRICE < 2000000 THEN '2' 
			WHEN TOTAL_PRICE >= 2000000 AND TOTAL_PRICE < 3000000 THEN '3' 
			WHEN TOTAL_PRICE >= 3000000 AND TOTAL_PRICE < 9000000 THEN '4' 
			WHEN TOTAL_PRICE >= 9000000 THEN '10' 
		END AS COUPON_CNT,
		Z.RES_CODE, 
		Z.PRO_CODE, 
		Z.TOTAL_PRICE,
		Z.REMARK
	FROM LIST Z
	WHERE Z.NEW_DATE BETWEEN @START_DATE AND DATEADD(DAY, 1, @END_DATE)
	ORDER BY Z.DEP_DATE DESC
END 





GO
