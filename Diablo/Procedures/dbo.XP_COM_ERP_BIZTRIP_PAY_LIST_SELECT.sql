USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: XP_COM_ERP_BIZTRIP_PAY_LIST_SELECT
■ DESCRIPTION				: BTMS ERP 미수현황 조회
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 

EXEC XP_COM_ERP_BIZTRIP_PAY_LIST_SELECT NULL, NULL, 1, '2016-04-01', '2016-06-01', NULL, NULL, NULL, NULL
	exec XP_COM_ERP_BIZTRIP_PAY_LIST_SELECT @APPROVAL_STATE=10,@AGT_CODE='92756',@SEARCH_DATE_TYPE=1,@START_DATE='2016-04-25 00:00:00',@END_DATE='2016-05-26 00:00:00',@SET_STATE=0,@PAY_STATE=0,@PAY_LATER_YN=NULL,@EMP_CODE=''
	exec XP_COM_ERP_BIZTRIP_PAY_LIST_SELECT @APPROVAL_STATE=0,@AGT_CODE='92756',@SEARCH_DATE_TYPE=1,@START_DATE='2016-05-18 00:00:00',@END_DATE='2016-06-30 00:00:00',@SET_STATE=null,@PAY_STATE=0,@PAY_LATER_YN=NULL,@EMP_CODE= null

■ EXEC						: 
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
	2016-04-26		김성호			최초생성
	2016-05-02		박형만			ENUM(INT) 전체조건 추가 
	2016-05-30		정지용			A.BT_STATE 제거
	2016-06-02		박형만			출발일,도착일,대금정산일 검색시 각각 날짜 빠른순 정렬
	2016-10-05		박형만			END_DATE 날짜 +1 
================================================================================================================*/ 
CREATE PROC [dbo].[XP_COM_ERP_BIZTRIP_PAY_LIST_SELECT]
	@APPROVAL_STATE		INT,				/* public enum BizTripApprovalTypeEnum { 출장대기 = 0, 출장요청 = 1, 출장확정 = 2, 출장반려 = 9 ,  전체 = 10 } */
	@AGT_CODE			VARCHAR(10),
	@SEARCH_DATE_TYPE	INT,
	@START_DATE			DATETIME,
	@END_DATE			DATETIME,
	@SET_STATE			INT,				/* public enum SearchStateEnum { 전체, 정산진행중, 미정산, 재정산, 정산완료 };  // public enum SetStateEnum { 정산진행중, 결제진행중, 정산완료, 재정산, 미정산 = 9 };  */
	@PAY_STATE			INT,				/* public enum PayStateEnum { 미납, 부분납, 완납, 과납, 전체 = 9 } */
	@PAY_LATER_YN		VARCHAR(1),
	@EMP_CODE			VARCHAR(10)
AS 
BEGIN

	DECLARE @SQLSTRING NVARCHAR(MAX) = '', @PARMDEFINITION NVARCHAR(1000), @WHERE1 NVARCHAR(1000) = '', @WHERE2 NVARCHAR(1000) = '' , @ORDERBY NVARCHAR(1000) ='';


	IF LEN(@AGT_CODE) > 0
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND A.AGT_CODE = @AGT_CODE'
	END

	IF @SEARCH_DATE_TYPE = 1
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND A.BT_START_DATE >= @START_DATE AND A.BT_START_DATE < DATEADD(D,1,@END_DATE)'
		SET @ORDERBY = @ORDERBY + 'ORDER BY A.BT_START_DATE '
	END
	ELSE IF @SEARCH_DATE_TYPE = 2
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND A.BT_END_DATE >= @START_DATE AND A.BT_END_DATE < DATEADD(D,1,@END_DATE)'
		SET @ORDERBY = @ORDERBY + 'ORDER BY A.PAY_REQUEST_DATE '
	END
	ELSE IF @SEARCH_DATE_TYPE = 3
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND A.PAY_REQUEST_DATE >= @START_DATE AND A.PAY_REQUEST_DATE < DATEADD(D,1,@END_DATE)'
		SET @ORDERBY = @ORDERBY + 'ORDER BY A.BT_END_DATE '
	END

	IF @APPROVAL_STATE IS NOT NULL AND @APPROVAL_STATE <> 10 
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND A.APPROVAL_STATE = @APPROVAL_STATE'
	END

	IF @SET_STATE IS NOT NULL
	BEGIN
		IF @SET_STATE = 1  --정산진행중
		BEGIN 
			SET @WHERE1 = @WHERE1 + ' AND C.SET_STATE = 0 '
		END 
		ELSE IF @SET_STATE = 2 --미정산
		BEGIN 
			SET @WHERE1 = @WHERE1 + ' AND C.PRO_CODE IS NULL '
		END 
		ELSE IF @SET_STATE = 3 --재정산
		BEGIN 
			SET @WHERE1 = @WHERE1 + ' AND C.SET_STATE = 3  '
		END 
		ELSE IF @SET_STATE = 4 --정산완료
		BEGIN 
			SET @WHERE1 = @WHERE1 + ' AND C.SET_STATE = 2 '
		END 
	END

	IF LEN(@EMP_CODE) > 0
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND E.NEW_CODE = @EMP_CODE'
	END

	IF LEN(@PAY_LATER_YN) > 0
	BEGIN
		SET @WHERE1 = @WHERE1 + ' AND B.PAY_LATER_YN = ''Y'''
	END

	IF @PAY_STATE IS NOT NULL AND @PAY_STATE <> 9 
	BEGIN
		SET @WHERE2 = 'WHERE Y.PAY_STATE = @PAY_STATE'
	END

	IF @WHERE1 <> ''
	BEGIN
		SET @WHERE1 = ('WHERE ' + SUBSTRING(@WHERE1, 5, 10000))
	END

	SET @SQLSTRING = @SQLSTRING + CONVERT(NVARCHAR(MAX), N'
		WITH CODE_LIST AS
		(
			SELECT A.AGT_CODE, A.BT_CODE, C.SET_STATE 
			FROM COM_BIZTRIP_MASTER A WITH(NOLOCK)
			LEFT JOIN AGT_MASTER B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE
			LEFT JOIN SET_MASTER C WITH(NOLOCK) ON A.PRO_CODE = C.PRO_CODE
			LEFT JOIN COM_BIZTRIP_DETAIL D WITH(NOLOCK) ON A.AGT_CODE = D.AGT_CODE AND A.BT_CODE = D.BT_CODE
			LEFT JOIN RES_MASTER_damo E WITH(NOLOCK) ON D.RES_CODE = E.RES_CODE AND E.RES_STATE <= 7
			' + @WHERE1 + N'
			GROUP BY A.AGT_CODE, A.BT_CODE, C.SET_STATE
		)
		, PRICE_LIST AS
		(
			SELECT A.AGT_CODE, A.BT_CODE, A.TOTAL_PRICE, A.PAY_PRICE, A.CHG_PRICE, (A.TOTAL_PRICE - A.PAY_PRICE) AS [REST_PRICE]
				, (
					CASE
						WHEN A.PAY_PRICE = 0 THEN 0					-- 미납
						WHEN A.TOTAL_PRICE > A.PAY_PRICE THEN 1		-- 부분납
						WHEN A.TOTAL_PRICE = A.PAY_PRICE THEN 2		-- 완납
						WHEN A.TOTAL_PRICE < A.PAY_PRICE THEN 3		-- 과납
					END) AS [PAY_STATE]
			FROM (
				SELECT Z.AGT_CODE, Z.BT_CODE
					, DBO.FN_PRO_GET_TOTAL_PRICE(A.PRO_CODE) AS [TOTAL_PRICE]
					, DBO.FN_PRO_GET_PAY_PRICE(A.PRO_CODE) AS [PAY_PRICE]
					, DBO.FN_PRO_GET_CHANGE_PRICE(A.PRO_CODE) AS [CHG_PRICE]
				FROM CODE_LIST Z
				INNER JOIN COM_BIZTRIP_MASTER A WITH(NOLOCK) ON Z.AGT_CODE = A.AGT_CODE AND Z.BT_CODE = A.BT_CODE
			) A
		)
		SELECT A.AGT_CODE, A.BT_CODE, A.PRO_CODE, A.APPROVAL_STATE, A.BT_NAME, A.NEW_SEQ, B.KOR_NAME AS [NEW_NAME], C.KOR_NAME AS [AGT_NAME], E.KOR_NAME AS [MANAGER_NAME]
			, C.PAY_LATER_YN AS COM_PAY_LATER_YN, A.BT_START_DATE, A.BT_END_DATE, Y.TOTAL_PRICE, Y.PAY_PRICE, Y.REST_PRICE, Y.CHG_PRICE, Y.PAY_STATE, ISNULL(Z.SET_STATE, 9) AS [SET_STATE]
		FROM CODE_LIST Z
		INNER JOIN PRICE_LIST Y ON Z.AGT_CODE = Y.AGT_CODE AND Z.BT_CODE = Y.BT_CODE
		INNER JOIN COM_BIZTRIP_MASTER A WITH(NOLOCK) ON Z.AGT_CODE = A.AGT_CODE AND Z.BT_CODE = A.BT_CODE
		LEFT JOIN COM_EMPLOYEE B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE AND A.NEW_SEQ = B.EMP_SEQ
		LEFT JOIN AGT_MASTER C WITH(NOLOCK) ON A.AGT_CODE = C.AGT_CODE
		LEFT JOIN COM_MANAGER D WITH(NOLOCK) ON A.AGT_CODE = D.AGT_CODE AND D.MANAGER_TYPE = 0
		LEFT JOIN EMP_MASTER E WITH(NOLOCK) ON D.EMP_CODE = E.EMP_CODE
		' + @WHERE2 + N'
		' + @ORDERBY +N'
		;') + CONVERT(NVARCHAR(MAX), N'

		WITH CODE_LIST AS
		(
			SELECT A.AGT_CODE, A.BT_CODE
			FROM COM_BIZTRIP_MASTER A WITH(NOLOCK)
			LEFT JOIN AGT_MASTER B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE
			LEFT JOIN SET_MASTER C WITH(NOLOCK) ON A.PRO_CODE = C.PRO_CODE
			LEFT JOIN COM_BIZTRIP_DETAIL D WITH(NOLOCK) ON A.AGT_CODE = D.AGT_CODE AND A.BT_CODE = D.BT_CODE
			LEFT JOIN RES_MASTER_damo E WITH(NOLOCK) ON D.RES_CODE = E.RES_CODE AND E.RES_STATE <= 7
			' + @WHERE1 + N'
			GROUP BY A.AGT_CODE, A.BT_CODE
		)
		, PRICE_LIST AS
		(
			SELECT A.RES_CODE, A.TOTAL_PRICE, A.PAY_PRICE, A.CHG_PRICE, (A.TOTAL_PRICE - A.PAY_PRICE) AS [REST_PRICE]
				, (
					CASE
						WHEN A.PAY_PRICE = 0 THEN 0					-- 미납
						WHEN A.TOTAL_PRICE > A.PAY_PRICE THEN 1		-- 부분납
						WHEN A.TOTAL_PRICE = A.PAY_PRICE THEN 2		-- 완납
						WHEN A.TOTAL_PRICE < A.PAY_PRICE THEN 3		-- 과납
					END) AS [PAY_STATE]
			FROM (
				SELECT A.RES_CODE, A.PRO_DETAIL_TYPE
					, DBO.FN_RES_GET_TOTAL_PRICE(A.RES_CODE) AS [TOTAL_PRICE]
					, DBO.FN_RES_GET_PAY_PRICE(A.RES_CODE) AS [PAY_PRICE]
					, DBO.FN_RES_GET_CHANGE_PRICE(A.RES_CODE) AS [CHG_PRICE]
				FROM CODE_LIST Z
				INNER JOIN COM_BIZTRIP_DETAIL A WITH(NOLOCK) ON Z.AGT_CODE = A.AGT_CODE AND Z.BT_CODE = A.BT_CODE
			) A
		)
		, CUS_LIST AS
		(
			SELECT B.RES_CODE, COUNT(*) AS [RES_CUS_COUNT]
			FROM CODE_LIST Z
			INNER JOIN COM_BIZTRIP_DETAIL A WITH(NOLOCK) ON Z.AGT_CODE = A.AGT_CODE AND Z.BT_CODE = A.BT_CODE
			INNER JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
			INNER JOIN RES_CUSTOMER_damo C WITH(NOLOCK) ON A.RES_CODE = C.RES_CODE
			WHERE B.RES_STATE <= 7 AND C.RES_STATE IN (0, 3, 4)
			GROUP BY B.RES_CODE
		)
		SELECT A.PRO_DETAIL_TYPE
			, COUNT(*) AS [RES_COUNT]
			, SUM(B.RES_CUS_COUNT) AS [RES_CUS_COUNT]
			, SUM(Y.TOTAL_PRICE) AS [TOTAL_PRICE]
			, SUM(Y.PAY_PRICE) AS [PAY_PRICE]
			, SUM(Y.REST_PRICE) AS [REST_PRICE]
			, SUM(Y.CHG_PRICE) AS [CHG_PRICE]
		FROM CODE_LIST Z
		INNER JOIN COM_BIZTRIP_DETAIL A WITH(NOLOCK) ON Z.AGT_CODE = A.AGT_CODE AND Z.BT_CODE = A.BT_CODE
		INNER JOIN CUS_LIST B ON A.RES_CODE = B.RES_CODE
		INNER JOIN PRICE_LIST Y ON A.RES_CODE = Y.RES_CODE
		' + @WHERE2 + N'
		GROUP BY A.PRO_DETAIL_TYPE
		ORDER BY A.PRO_DETAIL_TYPE
		')

		SET @PARMDEFINITION = N'
		@APPROVAL_STATE		INT,
		@AGT_CODE			VARCHAR(10),
		@SEARCH_DATE_TYPE	INT,
		@START_DATE			DATETIME,
		@END_DATE			DATETIME,
		@SET_STATE			INT,
		@PAY_STATE			INT,
		@PAY_LATER_YN		VARCHAR(1),
		@EMP_CODE			VARCHAR(10)';
	  
	PRINT @SQLSTRING

   EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION,
		@APPROVAL_STATE,
		@AGT_CODE,
		@SEARCH_DATE_TYPE,
		@START_DATE,
		@END_DATE,
		@SET_STATE,
		@PAY_STATE,
		@PAY_LATER_YN,
		@EMP_CODE;
END 

GO
