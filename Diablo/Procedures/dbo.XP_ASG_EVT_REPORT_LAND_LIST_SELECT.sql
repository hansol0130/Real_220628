USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*================================================================================================================
■ USP_NAME					: XP_ASG_EVT_REPORT_LAND_LIST_SELECT
■ DESCRIPTION				: 대외업무시스템 랜드사 평가현황 리스트 검색
■ INPUT PARAMETER			: 
	@PAGE_INDEX  INT		: 현재 페이지
	@PAGE_SIZE  INT			: 한 페이지 표시 게시물 수
	@KEY		VARCHAR(400): 검색 키
	@ORDER_BY	INT			: 정렬 순서
■ OUTPUT PARAMETER			: 
	@TOTAL_COUNT INT OUTPUT	: 총 검색된 수       
■ EXEC						: 
	DECLARE @PAGE_INDEX INT,
	@PAGE_SIZE  INT,
	@TOTAL_COUNT INT, 
	@KEY		VARCHAR(400),
	@ORDER_BY	INT

	SELECT @PAGE_INDEX=1,@PAGE_SIZE=10,@KEY=N'ProCode=EPP300-140114OZ11&ProName=&LandName=&GuideName=&SDate=2013-07-01&EDate=2013-07-30&SignCode=&AgtGrade=',@ORDER_BY=0
	
	exec XP_ASG_EVT_REPORT_LAND_LIST_SELECT @page_index, @page_size, @total_count output, @key, @order_by
	SELECT @TOTAL_COUNT
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2013-07-25		김완기    
================================================================================================================*/ 

CREATE PROCEDURE [dbo].[XP_ASG_EVT_REPORT_LAND_LIST_SELECT]
(
	@PAGE_INDEX		INT,
	@PAGE_SIZE		INT,
	@TOTAL_COUNT	INT OUTPUT,
	@KEY			VARCHAR(400),
	@ORDER_BY		INT
)

AS  
BEGIN

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @SQLSTRING NVARCHAR(MAX), @PARMDEFINITION NVARCHAR(1000);
	DECLARE @WHERE NVARCHAR(4000),@WHERE2 NVARCHAR(4000),@ORDER NVARCHAR(4000);

	DECLARE
		@GUIDE_NAME	VARCHAR(20),
		@PRO_CODE   VARCHAR(20), --행사코드
		@LAND_NAME  VARCHAR(20), --랜드사명
		@PRO_NAME	NVARCHAR(100), --행사명
		@START_DATE DATETIME , 
		@END_DATE	DATETIME ,
		@SIGN_CODE	VARCHAR(1),  --지역
		@AGT_GRADE	VARCHAR(1)	 --등급
	DECLARE @TEAM_CODE	VARCHAR(4)
	DECLARE @EMP_CODE	VARCHAR(7)

	SELECT
		@GUIDE_NAME = DBO.FN_PARAM(@KEY, 'GuideName'),
		@PRO_CODE = DBO.FN_PARAM(@KEY, 'ProCode'),
		@PRO_NAME = DBO.FN_PARAM(@KEY, 'ProName'), 
		@LAND_NAME = DBO.FN_PARAM(@KEY, 'LandName'), 
		@START_DATE = DBO.FN_PARAM(@KEY, 'StartDate'),
		@END_DATE = DBO.FN_PARAM(@KEY, 'EndDate'),
		@SIGN_CODE = DBO.FN_PARAM(@KEY, 'SignCode'),
		@AGT_GRADE = DBO.FN_PARAM(@KEY, 'AgtGrade'),
		@TEAM_CODE = DBO.FN_PARAM(@KEY, 'TeamCode'),
		@EMP_CODE = DBO.FN_PARAM(@KEY, 'EmpCode'),
		@WHERE = '',
		@WHERE2 = '',
		@ORDER = 0
   
	-- WHERE 조건 만들기
	IF ISNULL(@PRO_CODE, '') <> '' --행사코드
		SET @WHERE = ' AND C.PRO_CODE = @PRO_CODE '
    ELSE 
	BEGIN
		IF ISNULL(@PRO_NAME, '') <> '' -- 행사명
			SET @WHERE =@WHERE + ' AND D.PRO_NAME LIKE ''%'' + @PRO_NAME + ''%'' '

		IF (ISNULL(@START_DATE, '') <> '' AND ISNULL(@END_DATE, '') <> '' )-- 출발일
			SET @WHERE =@WHERE + ' AND D.DEP_DATE BETWEEN @START_DATE AND @END_DATE '

		IF ( ISNULL(@GUIDE_NAME, '') <> '')
			SET @WHERE = @WHERE + ' AND A.GUIDE_NAME LIKE ''%'' + @GUIDE_NAME + ''%'' '
			
		IF ( ISNULL(@LAND_NAME, '') <> '')
			SET @WHERE = @WHERE + ' AND B.KOR_NAME LIKE ''%'' + @LAND_NAME + ''%'' '

  		IF ISNULL(@SIGN_CODE, '') <> '' -- 지역
			SET @WHERE =@WHERE + ' AND E.SIGN_CODE = @SIGN_CODE'
			
		IF ISNULL(@EMP_CODE, '') <> ''
			BEGIN
				SET @WHERE = @WHERE + ' AND D.NEW_CODE = @EMP_CODE'
			END
		ELSE
			BEGIN
				IF ISNULL(@TEAM_CODE, '') <> ''
					BEGIN
						SET @WHERE = @WHERE + ' AND D.NEW_CODE IN (SELECT EMP_CODE FROM EMP_MASTER WITH(NOLOCK) WHERE TEAM_CODE = @TEAM_CODE)'
					END
			END
	END

	IF ISNULL(@AGT_GRADE, '') <> ''
		BEGIN
			IF @AGT_GRADE = 'A'
				BEGIN
					SET @WHERE2 = @WHERE2 + ' WHERE AVG_NUM > 4 '
				END
			IF @AGT_GRADE = 'B'
				BEGIN
					SET @WHERE2 = @WHERE2 + ' WHERE AVG_NUM <= 4 AND AVG_NUM > 3 '
				END
			IF @AGT_GRADE = 'C'
				BEGIN
					SET @WHERE2 = @WHERE2 + ' WHERE AVG_NUM <= 3 AND AVG_NUM > 2 '
				END
			IF @AGT_GRADE = 'D'
				BEGIN
					SET @WHERE2 = @WHERE2 + ' WHERE AVG_NUM <= 2 AND AVG_NUM > 1 '
				END
			IF @AGT_GRADE = 'E'
				BEGIN
					SET @WHERE2 = @WHERE2 + ' WHERE AVG_NUM < 1 '
				END
		END


	--ORDER BY 조건 만들기
	
	SELECT @ORDER = (  
		CASE @ORDER_BY  
			WHEN 1 THEN ' A.KOR_NAME ASC'
			WHEN 2 THEN ' A.GUIDE_NAME ASC'
			WHEN 3 THEN ' A.G_COUNT DESC '
			WHEN 4 THEN ' A.AVG_NUM DESC'
			WHEN 5 THEN ' A.AVG_NUM_LAST DESC'
			WHEN 6 THEN ' A.LAST_DEP_DATE DESC'
			ELSE ' A.LAST_DEP_DATE DESC'
		END
	)

	SET @SQLSTRING = N'
			SELECT @TOTAL_COUNT = COUNT(AGT_CODE)
				  FROM
					(SELECT AGT_CODE, AVG(AVG_NUM) AS AVG_NUM
					   FROM (SELECT A.AGT_CODE,
								   (SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
									  FROM OTR_MASTER H WITH(NOLOCK)
									 INNER JOIN dbo.OTR_POL_MASTER I WITH(NOLOCK) ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''2''
									 INNER JOIN dbo.OTR_POL_QUESTION J WITH(NOLOCK) ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1''
									 INNER JOIN dbo.OTR_POL_ANSWER K WITH(NOLOCK) ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
									 INNER JOIN dbo.OTR_POL_DETAIL L WITH(NOLOCK) ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
									 WHERE H.OTR_STATE = ''3'' AND I.AGT_CODE = A.AGT_CODE AND ISNULL(I.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND I.GUIDE_NAME = A.GUIDE_NAME) AS AVG_NUM
							   FROM OTR_POL_MASTER A WITH(NOLOCK)
							  INNER JOIN OTR_MASTER C WITH(NOLOCK) ON (A.OTR_SEQ = C.OTR_SEQ AND C.OTR_STATE = ''3'')
							  INNER JOIN AGT_MASTER B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE
							  INNER JOIN PKG_DETAIL D WITH(NOLOCK) ON C.PRO_CODE = D.PRO_CODE
							  INNER JOIN PKG_MASTER E WITH(NOLOCK) ON D.MASTER_CODE = E.MASTER_CODE
							  WHERE A.POL_type =''2'' '+ @WHERE + '
							  GROUP BY A.AGT_CODE, ISNULL(A.MEM_CODE, ''''), A.GUIDE_NAME, B.KOR_NAME) A
					  GROUP BY AGT_CODE) A '+ @WHERE2 + ';'

	SET @SQLSTRING = @SQLSTRING + N'

			SELECT A.*
			  FROM (
                    SELECT AGT_CODE, MAX(KOR_NAME) AS AGT_NAME, AVG(AVG_NUM) AS AVG_NUM, MAX(LAST_DEP_DATE) AS LAST_DEP_DATE,
					       (SELECT COUNT(MEM_CODE) FROM AGT_MEMBER WHERE MEM_TYPE = ''1'' AND AGT_CODE = A.AGT_CODE) AS GUIDE_COUNT,
						   (SELECT COUNT(DISTINCT(G.PRO_CODE))
							  FROM OTR_POL_MASTER F WITH(NOLOCK) 
							 INNER JOIN OTR_MASTER G WITH(NOLOCK) ON (F.OTR_SEQ = G.OTR_SEQ AND G.OTR_STATE = ''3'')
							 WHERE F.AGT_CODE = A.AGT_CODE ) AS G_COUNT,
						   (SELECT COUNT(H.RES_CODE) 
						      FROM dbo.Res_master_damo H WITH(NOLOCK)
							  LEFT OUTER JOIN dbo.RES_CUSTOMER_damo I WITH(NOLOCK) ON H.RES_CODE = I.RES_CODE
							 WHERE H.PRO_CODE IN (SELECT DISTINCT(G.PRO_CODE)
												    FROM OTR_POL_MASTER F WITH(NOLOCK) 
												   INNER JOIN OTR_MASTER G WITH(NOLOCK) ON (F.OTR_SEQ = G.OTR_SEQ AND G.OTR_STATE = ''3'')
												   WHERE F.AGT_CODE = A.AGT_CODE)) AS RESCUSTOMERCOUNT,
						   (SELECT ISNULL(0, 0) 
						      FROM ARG_MASTER C WITH(NOLOCK) 
							 INNER JOIN ARG_DETAIL D WITH(NOLOCK) ON (C.ARG_CODE = D.ARG_CODE AND D.ARG_TYPE =''4'' )
					         INNER JOIN ARG_INVOICE_DETAIL E WITH(NOLOCK) ON (C.ARG_CODE = E.ARG_CODE AND D.GRP_SEQ_NO = E.GRP_SEQ_NO)
						     WHERE C.AGT_CODE = A.AGT_CODE) AS PRICE_TOTAL
					  FROM (	
							SELECT A.AGT_CODE,
								   MAX(C.PRO_CODE) AS PRO_CODE, 
								   B.KOR_NAME, 
								   ISNULL(A.MEM_CODE, '''') AS MEM_CODE, 
								   A.GUIDE_NAME,
								   (SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
									  FROM OTR_MASTER H WITH(NOLOCK)
									 INNER JOIN dbo.OTR_POL_MASTER I WITH(NOLOCK) ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''2''
									 INNER JOIN dbo.OTR_POL_QUESTION J WITH(NOLOCK) ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1''
									 INNER JOIN dbo.OTR_POL_ANSWER K WITH(NOLOCK) ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
									 INNER JOIN dbo.OTR_POL_DETAIL L WITH(NOLOCK) ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
									 WHERE H.OTR_STATE = ''3'' AND I.AGT_CODE = A.AGT_CODE AND ISNULL(I.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND I.GUIDE_NAME = A.GUIDE_NAME) AS AVG_NUM ,
								   (SELECT TOP 1 Z.SIGN_CODE   
									  FROM PKG_DETAIL Y WITH(NOLOCK) 
									 INNER JOIN PKG_MASTER Z WITH(NOLOCK) ON Y.MASTER_CODE = Z.MASTER_CODE
									 WHERE Y.PRO_CODE = MAX(C.PRO_CODE)) AS SIGN_CODE,
								   (SELECT COUNT(H.RES_CODE) 
									  FROM dbo.Res_master_damo H WITH(NOLOCK)
									  LEFT OUTER JOIN dbo.RES_CUSTOMER_damo I WITH(NOLOCK) ON H.RES_CODE = I.RES_CODE
									 WHERE H.PRO_CODE = MAX(C.PRO_CODE)) AS RESCUSTOMERCOUNT,
								   (SELECT DEP_DATE FROM PKG_DETAIL WHERE PRO_CODE = MAX(C.PRO_CODE)) AS LAST_DEP_DATE
							FROM OTR_POL_MASTER A WITH(NOLOCK)
							INNER JOIN OTR_MASTER C WITH(NOLOCK) ON (A.OTR_SEQ = C.OTR_SEQ AND C.OTR_STATE = ''3'')
							INNER JOIN AGT_MASTER B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE
							INNER JOIN PKG_DETAIL D WITH(NOLOCK) ON C.PRO_CODE = D.PRO_CODE
							INNER JOIN PKG_MASTER E WITH(NOLOCK) ON D.MASTER_CODE = E.MASTER_CODE
							WHERE A.POL_type =''2'' '+ @WHERE + '
							GROUP BY A.AGT_CODE, ISNULL(A.MEM_CODE, ''''), A.GUIDE_NAME, B.KOR_NAME	) A
                      GROUP BY AGT_CODE) A
		    '+ @WHERE2 + '
			ORDER BY ' + @ORDER + '
			OFFSET ((@PAGE_INDEX - 1) * @PAGE_SIZE) ROWS FETCH NEXT @PAGE_SIZE
			ROWS ONLY '

	SET @PARMDEFINITION = N'@PAGE_INDEX  INT, @PAGE_SIZE  INT, @TOTAL_COUNT INT OUTPUT, @GUIDE_NAME CHAR(20), @PRO_CODE VARCHAR(20), @LAND_NAME VARCHAR(20) ,@PRO_NAME NVARCHAR(100), @START_DATE DATETIME ,@END_DATE DATETIME ,@SIGN_CODE VARCHAR(1), @AGT_GRADE VARCHAR(1), @TEAM_CODE VARCHAR(4), @EMP_CODE VARCHAR(7)';

	--PRINT @SQLSTRING

	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, @PAGE_INDEX, @PAGE_SIZE, @TOTAL_COUNT OUTPUT, @GUIDE_NAME, @PRO_CODE,@LAND_NAME , @PRO_NAME, @START_DATE ,@END_DATE, @SIGN_CODE, @AGT_GRADE, @TEAM_CODE, @EMP_CODE;

END

GO
