USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*================================================================================================================
■ USP_NAME					: XP_ASG_EVT_REPORT_GUIDE_LIST_SELECT
■ DESCRIPTION				: 대외업무시스템 인솔자관리 가이드평가현황 리스트 검색
■ INPUT PARAMETER			: 
	@PAGE_INDEX  INT		: 현재 페이지
	@PAGE_SIZE  INT			: 한 페이지 표시 게시물 수
	@KEY		VARCHAR(400): 검색 키
	@ORDER_BY	INT			: 정렬 순서
■ OUTPUT PARAMETER			: 
	@TOTAL_COUNT INT OUTPUT	: 총 검색된 수       
■ EXEC						: 
	DECLARE @PAGE_INDEX INT,
	@PAGE_SIZE  INT,
	@TOTAL_COUNT INT, 
	@KEY		VARCHAR(400),
	@ORDER_BY	INT

	SELECT @PAGE_INDEX=1,@PAGE_SIZE=10,@KEY=N'ProCode=&ProName=&LandName=&GuideName=이슬&SDate=2013-02-01&EDate=2013-06-30&SignCode=',@ORDER_BY=0
	
	exec XP_ASG_EVT_REPORT_GUIDE_LIST_SELECT @page_index, @page_size, @total_count output, @key, @order_by
	SELECT @TOTAL_COUNT
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2013-04-25		이상일			최초생성    
================================================================================================================*/ 

 CREATE  PROCEDURE [dbo].[XP_ASG_EVT_REPORT_GUIDE_LIST_SELECT]
(
	@PAGE_INDEX		INT,
	@PAGE_SIZE		INT,
	@TOTAL_COUNT	INT OUTPUT,
	@KEY			VARCHAR(400),
	@ORDER_BY		INT
)

AS  
BEGIN

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @SQLSTRING NVARCHAR(MAX), @PARMDEFINITION NVARCHAR(1000);
	DECLARE @WHERE NVARCHAR(MAX),@ORDER NVARCHAR(MAX);

	DECLARE
		@GUIDE_NAME	VARCHAR(20),
		@PRO_CODE   VARCHAR(20), --행사코드
		@LAND_NAME  VARCHAR(20), --랜드사명
		@PRO_NAME	NVARCHAR(100), --행사명
		@START_DATE DATETIME , 
		@END_DATE	DATETIME ,
		@SIGN_CODE	VARCHAR(1)  --지역

	SELECT
		@GUIDE_NAME = DBO.FN_PARAM(@KEY, 'GuideName'),
		@PRO_CODE = DBO.FN_PARAM(@KEY, 'ProCode'),
		@PRO_NAME = DBO.FN_PARAM(@KEY, 'ProName'), 
		@LAND_NAME = DBO.FN_PARAM(@KEY, 'LandName'), 
		@START_DATE = DBO.FN_PARAM(@KEY, 'SDate'),
		@END_DATE = DBO.FN_PARAM(@KEY, 'EDate'),
		@SIGN_CODE = DBO.FN_PARAM(@KEY, 'SignCode'),
		@WHERE = '',
		@ORDER = 0

   
	-- WHERE 조건 만들기
	IF ISNULL(@PRO_CODE, '') <> '' --행사코드
		SET @WHERE = ' AND C.PRO_CODE = @PRO_CODE '
    ELSE 
	BEGIN
		IF ISNULL(@PRO_NAME, '') <> '' -- 행사명
			SET @WHERE =@WHERE + ' AND D.PRO_NAME LIKE ''%'' + @PRO_NAME + ''%'' '

		IF (ISNULL(@START_DATE, '') <> '' AND ISNULL(@END_DATE, '') <> '' )-- 출발일
			SET @WHERE =@WHERE + ' AND D.DEP_DATE BETWEEN @START_DATE AND @END_DATE '

		IF ( ISNULL(@GUIDE_NAME, '') <> '')
			SET @WHERE = @WHERE + ' AND A.GUIDE_NAME LIKE ''%'' + @GUIDE_NAME + ''%'' '			
			
		IF ( ISNULL(@LAND_NAME, '') <> '')
			SET @WHERE = @WHERE + ' AND B.KOR_NAME LIKE ''%'' + @LAND_NAME + ''%'' '

  		IF ISNULL(@SIGN_CODE, '') <> '' -- 지역
			SET @WHERE =@WHERE + ' AND E.SIGN_CODE = @SIGN_CODE'
	END


	--ORDER BY 조건 만들기
	
	SELECT @ORDER = (  
		CASE @ORDER_BY  
			WHEN 1 THEN ' A.KOR_NAME ASC'
			WHEN 2 THEN ' A.GUIDE_NAME ASC'
			WHEN 3 THEN ' A.G_COUNT DESC '
			WHEN 4 THEN ' A.AVG_NUM DESC'
			WHEN 5 THEN ' A.AVG_NUM_LAST DESC'
			WHEN 6 THEN ' A.LAST_DEP_DATE DESC'
			ELSE ' A.PRO_CODE DESC'
		END
	)

	SET @SQLSTRING = N'
SELECT @TOTAL_COUNT = COUNT(*)
FROM (
	SELECT A.AGT_CODE
		FROM OTR_POL_MASTER A WITH(NOLOCK)
		INNER JOIN OTR_MASTER C WITH(NOLOCK) ON (A.OTR_SEQ = C.OTR_SEQ AND C.OTR_STATE = ''3'')
		INNER JOIN AGT_MASTER B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE
		INNER JOIN PKG_DETAIL D WITH(NOLOCK) ON C.PRO_CODE = D.PRO_CODE
		INNER JOIN PKG_MASTER E WITH(NOLOCK) ON D.MASTER_CODE = E.MASTER_CODE		
		WHERE A.POL_type =''2'' '+ @WHERE + '
		GROUP BY A.AGT_CODE, ISNULL(A.MEM_CODE, ''''), A.GUIDE_NAME, B.KOR_NAME) A	 ;
WITH LIST AS
(				
	SELECT A.AGT_CODE,
			MAX(C.PRO_CODE) AS PRO_CODE, 
			B.KOR_NAME, 
			ISNULL(A.MEM_CODE, '''') AS MEM_CODE, 
			A.GUIDE_NAME,
			(SELECT COUNT(DISTINCT(G.PRO_CODE))
				FROM OTR_POL_MASTER F WITH(NOLOCK) 
				INNER JOIN OTR_MASTER G WITH(NOLOCK) ON (F.OTR_SEQ = G.OTR_SEQ AND G.OTR_STATE = ''3'')
				WHERE F.AGT_CODE = A.AGT_CODE AND ISNULL(F.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND F.GUIDE_NAME = A.GUIDE_NAME) AS G_COUNT,
			(SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
				FROM OTR_MASTER H WITH(NOLOCK)
				INNER JOIN dbo.OTR_POL_MASTER I WITH(NOLOCK) ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''2''
				INNER JOIN dbo.OTR_POL_QUESTION J WITH(NOLOCK) ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1''
				INNER JOIN dbo.OTR_POL_ANSWER K WITH(NOLOCK) ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
				INNER JOIN dbo.OTR_POL_DETAIL L WITH(NOLOCK) ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
				WHERE H.OTR_STATE = ''3'' AND I.AGT_CODE = A.AGT_CODE AND ISNULL(I.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND I.GUIDE_NAME = A.GUIDE_NAME) AS AVG_NUM ,
			(SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
				FROM OTR_MASTER H WITH(NOLOCK)
				INNER JOIN dbo.OTR_POL_MASTER I WITH(NOLOCK) ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''2''
				INNER JOIN dbo.OTR_POL_QUESTION J WITH(NOLOCK) ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1''
				INNER JOIN dbo.OTR_POL_ANSWER K WITH(NOLOCK) ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
				INNER JOIN dbo.OTR_POL_DETAIL L WITH(NOLOCK) ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
				WHERE H.OTR_STATE = ''3'' AND H.PRO_CODE = MAX(C.PRO_CODE) AND I.AGT_CODE = A.AGT_CODE AND ISNULL(I.MEM_CODE, '''') = ISNULL(A.MEM_CODE, '''') AND I.GUIDE_NAME = A.GUIDE_NAME) AS AVG_NUM_LAST ,
			(SELECT TOP 1 Z.SIGN_CODE   
				FROM PKG_DETAIL Y WITH(NOLOCK) 
				INNER JOIN PKG_MASTER Z WITH(NOLOCK) ON Y.MASTER_CODE = Z.MASTER_CODE
				WHERE Y.PRO_CODE = MAX(C.PRO_CODE)) AS SIGN_CODE,
			(SELECT DEP_DATE FROM PKG_DETAIL WHERE PRO_CODE = MAX(C.PRO_CODE)) AS LAST_DEP_DATE
	FROM OTR_POL_MASTER A WITH(NOLOCK)
	INNER JOIN OTR_MASTER C WITH(NOLOCK) ON (A.OTR_SEQ = C.OTR_SEQ AND C.OTR_STATE = ''3'')
	INNER JOIN AGT_MASTER B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE
	INNER JOIN PKG_DETAIL D WITH(NOLOCK) ON C.PRO_CODE = D.PRO_CODE
	INNER JOIN PKG_MASTER E WITH(NOLOCK) ON D.MASTER_CODE = E.MASTER_CODE	
	WHERE A.POL_type =''2'' '+ @WHERE + '
	GROUP BY A.AGT_CODE, ISNULL(A.MEM_CODE, ''''), A.GUIDE_NAME, B.KOR_NAME
)
	SELECT A.*, 
		(SELECT KOR_NAME FROM PUB_REGION WHERE SIGN = A.SIGN_CODE) AS SIGN_NAME
	FROM LIST A 			
	ORDER BY ' + @ORDER + '
	OFFSET ((@PAGE_INDEX - 1) * @PAGE_SIZE) ROWS FETCH NEXT @PAGE_SIZE
	ROWS ONLY '

	--SELECT @GUIDE_NAME
	--SELECT @SQLSTRING
				 
	SET @PARMDEFINITION = N'@PAGE_INDEX  INT, @PAGE_SIZE  INT, @TOTAL_COUNT INT OUTPUT, @GUIDE_NAME CHAR(20), @PRO_CODE VARCHAR(20), @LAND_NAME VARCHAR(20) ,@PRO_NAME NVARCHAR(100), @START_DATE DATETIME ,@END_DATE DATETIME ,@SIGN_CODE VARCHAR(1)';

	PRINT @SQLSTRING
		
	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, @PAGE_INDEX, @PAGE_SIZE, @TOTAL_COUNT OUTPUT, @GUIDE_NAME, @PRO_CODE,@LAND_NAME , @PRO_NAME, @START_DATE ,@END_DATE, @SIGN_CODE;

END

GO
