USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		이규식 - 엔코어(정진백 선임)
-- Create date: 2010-8-4
-- Description:	엔코어 튜닝 버전(기존 버전은 [SP_SET_GET_RES_COMPLETE_LIST_4_BACKUP 으로 이관]
-- =============================================
CREATE PROCEDURE [dbo].[SP_SET_GET_RES_COMPLETE_LIST_4_LKS]
(
@DATE_TYPE	INT,
@EMP_TYPE	INT,
@START_DATE	DATETIME,
@END_DATE	DATETIME,
@REGION	CHAR(1),
@NATION_CODE	VARCHAR(30),
@CITY_CODE	VARCHAR(30),
@ATTRIBUTE	CHAR(1),
@TEAM_CODE	 VARCHAR(3),
@EMP_CODE	VARCHAR(7),
@GROUP	INT,
@ORDER	INT
)
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

DECLARE @SQLSTRING_PROFIT_TYPE_1 NVARCHAR(max)
DECLARE @SQLSTRING_PROFIT_TYPE_2 NVARCHAR(max)
DECLARE @SQLSTRING NVARCHAR(max)
DECLARE @PARMDEFINITION NVARCHAR(1000)
DECLARE @PRO_CODE VARCHAR(20)
DECLARE @MASTER_CODE VARCHAR(20)
DECLARE @RES_CODE VARCHAR(20)
DECLARE @DEP_DATE DATETIME
DECLARE @REGION_NAME	VARCHAR(20)
DECLARE @BASE_TEAM_CODE CHAR(3)

SET @SQLSTRING_PROFIT_TYPE_1 =N'SELECT
	    B.MASTER_CODE, A.PRO_CODE, C.RES_CODE, A.DEP_DATE, D.TEAM_CODE, 
        C.PROFIT_EMP_CODE,
        C.PROFIT_TEAM_CODE,
        C.PROFIT_TEAM_NAME     
FROM SET_MASTER A
INNER JOIN PKG_DETAIL B ON B.PRO_CODE = A.PRO_CODE
INNER JOIN RES_MASTER C ON C.PRO_CODE = B.PRO_CODE
INNER JOIN EMP_MASTER D ON D.EMP_CODE = B.NEW_CODE
INNER JOIN VIEW_PRO_MASTER E ON E.MASTER_CODE = B.MASTER_CODE
WHERE EXISTS ( SELECT  1 
				 FROM RES_CUSTOMER_damo WITH(NOLOCK)
				 WHERE RES_CODE IN (SELECT RES_CODE 
									FROM RES_MASTER_damo  WITH(NOLOCK) 
									WHERE PRO_CODE = A.PRO_CODE 
								AND RES_STATE <= 7) 
				AND RES_STATE IN (0, 3, 4))
AND (
	(ISNULL(@EMP_CODE, '''') = '''' AND
	CASE WHEN ISNULL(@EMP_TYPE, 0) = 0 THEN
		CASE WHEN ISNULL(@TEAM_CODE, '''') <> '''' THEN C.PROFIT_TEAM_CODE  ELSE ISNULL(@TEAM_CODE, '''') END  
	ELSE
		CASE WHEN ISNULL(@TEAM_CODE, '''') <> '''' THEN C.SALE_TEAM_CODE  ELSE ISNULL(@TEAM_CODE, '''') END  
	END = ISNULL(@TEAM_CODE, '''')
	)
OR
	(ISNULL(@EMP_CODE, '''') <> '''' AND
	CASE WHEN ISNULL(@EMP_TYPE, 0) = 0 THEN
		CASE WHEN ISNULL(@EMP_CODE, '''') <> '''' THEN C.PROFIT_EMP_CODE ELSE ISNULL(@EMP_CODE , '''') END 
	ELSE 
		CASE WHEN ISNULL(@EMP_CODE, '''') <> '''' THEN C.SALE_EMP_CODE ELSE ISNULL(@EMP_CODE , '''') END 
	END = ISNULL(@EMP_CODE , '''')
	)
) '

SET @SQLSTRING_PROFIT_TYPE_2 =N'SELECT
		 B.MASTER_CODE, A.PRO_CODE, C.RES_CODE, A.DEP_DATE, D.TEAM_CODE,
         B.NEW_CODE AS PROFIT_EMP_CODE,
         D.TEAM_CODE AS PROFIT_TEAM_CODE,
        (SELECT TEAM_NAME FROM EMP_TEAM Z WHERE Z.TEAM_CODE = D.TEAM_CODE) AS PROFIT_TEAM_NAME   
FROM SET_MASTER A
INNER JOIN PKG_DETAIL B ON B.PRO_CODE = A.PRO_CODE
INNER JOIN RES_MASTER C ON C.PRO_CODE = B.PRO_CODE
INNER JOIN EMP_MASTER D ON D.EMP_CODE = B.NEW_CODE
INNER JOIN VIEW_PRO_MASTER E ON E.MASTER_CODE = B.MASTER_CODE
WHERE EXISTS ( SELECT  1 
				 FROM RES_CUSTOMER_damo WITH(NOLOCK)
				 WHERE RES_CODE IN (SELECT RES_CODE 
									FROM RES_MASTER_damo  WITH(NOLOCK) 
									WHERE PRO_CODE = A.PRO_CODE 
									AND RES_STATE <= 7) 
				  AND RES_STATE IN (0, 3, 4))
AND (
	(ISNULL(@EMP_CODE, '''') = '''' AND
	CASE WHEN ISNULL(@EMP_TYPE, 0) = 0 THEN
		CASE WHEN ISNULL(@TEAM_CODE, '''') <> '''' THEN D.TEAM_CODE  ELSE ISNULL(@TEAM_CODE, '''') END  
	ELSE
		CASE WHEN ISNULL(@TEAM_CODE, '''') <> '''' THEN C.SALE_TEAM_CODE  ELSE ISNULL(@TEAM_CODE, '''') END  
	END = ISNULL(@TEAM_CODE, '''')
	)
OR
	(ISNULL(@EMP_CODE, '''') <> '''' AND
	CASE WHEN ISNULL(@EMP_TYPE, 0) = 0 THEN
		CASE WHEN ISNULL(@EMP_CODE, '''') <> '''' THEN B.NEW_CODE ELSE ISNULL(@EMP_CODE , '''') END 
	ELSE 
		CASE WHEN ISNULL(@EMP_CODE, '''') <> '''' THEN C.SALE_EMP_CODE ELSE ISNULL(@EMP_CODE , '''') END 
	END = ISNULL(@EMP_CODE , '''')
	)
) '

SET @SQLSTRING = ''

-- DATE_TYPE(0 출발일, 1 - 도착일)
IF (@DATE_TYPE = 1) 
BEGIN
SET @SQLSTRING =  @SQLSTRING + ' AND A.ARR_DATE >= @START_DATE AND A.ARR_DATE < @END_DATE + 1 ' 
END
ELSE
BEGIN
SET @SQLSTRING =  @SQLSTRING + ' AND A.DEP_DATE >= @START_DATE AND A.DEP_DATE < @END_DATE + 1 ' 
END
-- 속성코드
IF (ISNULL(@ATTRIBUTE, '') <> '')
BEGIN
SET @SQLSTRING =  @SQLSTRING + ' AND E.ATT_CODE = @ATTRIBUTE ' 
END

-- 지역코드
IF (ISNULL(@REGION, '') <> '')
BEGIN
SET @SQLSTRING =  @SQLSTRING + ' AND E.SIGN_CODE = @REGION ' 
END

-- 국가코드
IF (ISNULL(@NATION_CODE, '') <> '')
BEGIN
SELECT @NATION_CODE = STUFF((SELECT (',''' + DATA + '''') AS [text()] FROM [DBO].[FN_SPLIT] (@NATION_CODE, ',') FOR XML PATH('')), 1, 1, '')  

SET @SQLSTRING = @SQLSTRING + ' AND EXISTS (SELECT TOP 1 1 FROM PKG_DETAIL_SCH_CITY Z WHERE Z.PRO_CODE = A.PRO_CODE AND Z.CITY_CODE IN ( SELECT CITY_CODE FROM PUB_CITY WHERE NATION_CODE IN (' + @NATION_CODE + ')))'
END

-- 도시코드
IF (ISNULL(@CITY_CODE, '') <> '')
BEGIN
SELECT @CITY_CODE = STUFF((SELECT (',''' + DATA + '''') AS [text()] FROM [DBO].[FN_SPLIT] (@CITY_CODE, ',') FOR XML PATH('')), 1, 1, '')  

SET @SQLSTRING = @SQLSTRING + ' AND EXISTS (SELECT TOP 1 1 FROM PKG_DETAIL_SCH_CITY Z WHERE Z.PRO_CODE = A.PRO_CODE AND CITY_CODE IN (' + @CITY_CODE + '))' 
END

--IF(ISNULL(@EMP_TYPE, 0) = 0)
--BEGIN

---- 사원코드
--IF (ISNULL(@EMP_CODE, '') <> '')
--BEGIN
--SET @SQLSTRING =  @SQLSTRING + ' AND (B.NEW_CODE = @EMP_CODE OR C.PROFIT_EMP_CODE = @EMP_CODE) '
--END
---- 팀코드
--ELSE IF (ISNULL(@TEAM_CODE, '') <> '')
--BEGIN
--SET @SQLSTRING =  @SQLSTRING + ' AND (D.TEAM_CODE = @TEAM_CODE OR C.PROFIT_TEAM_CODE = @TEAM_CODE) '
--END
--END
--ELSE
---- 예약자로 검색
--BEGIN

---- 사원코드
--IF (ISNULL(@EMP_CODE, '') <> '')
--BEGIN
--SET @SQLSTRING =  @SQLSTRING + ' AND (B.NEW_CODE = @EMP_CODE OR C.SALE_EMP_CODE = @EMP_CODE) '
--END
---- 팀코드		
--ELSE IF (ISNULL(@TEAM_CODE, '') <> '')
--BEGIN
--SET @SQLSTRING =  @SQLSTRING + ' AND (D.TEAM_CODE = @TEAM_CODE OR C.SALE_TEAM_CODE = @TEAM_CODE) '
--END
--END

SET @SQLSTRING = @SQLSTRING + ' AND DBO.FN_SET_GET_PRO_COUNT(A.PRO_CODE) > 0 '
SET @SQLSTRING_PROFIT_TYPE_1 = @SQLSTRING_PROFIT_TYPE_1 + @SQLSTRING
SET @SQLSTRING_PROFIT_TYPE_2 = @SQLSTRING_PROFIT_TYPE_2 + @SQLSTRING
SET @SQLSTRING = '(SELECT 
	A.PRO_CODE,
	A.DEP_DATE,
	(CASE WHEN A.PROFIT_TYPE = ''2'' THEN 0 ELSE A.RES_COUNT END ) RES_COUNT,
	CONVERT(MONEY,A.RES_COUNT * A.PROFIT * A.PROFIT_RATE * 0.01)   PROFIT,
	CONVERT(MONEY,A.SALE_PRICE)   SALE_PRICE,
	CASE WHEN @EMP_TYPE = 0 THEN A.PROFIT_TEAM_NAME ELSE B.SALE_TEAM_NAME END AS PROFIT_TEAM_NAME
FROM ( SELECT 
				PRO_CODE,
				RES_CODE,
				PROFIT_TYPE,
				RES_COUNT,
				SALE_PRICE,
				PROFIT_RATE, 
				PROFIT_EMP_CODE,
				PROFIT_TEAM_CODE,
				PROFIT_TEAM_NAME,
				DEP_DATE,
				CONVERT(INT,DBO.FN_SET_GET_PRO_PERSON_PROFIT(A.PRO_CODE)) PROFIT
				FROM 
				(       
					SELECT
							''1'' AS PROFIT_TYPE,
							DBO.FN_SET_GET_RES_COUNT(A.RES_CODE) AS RES_COUNT,
							DBO.FN_RES_GET_TOTAL_PRICE(A.RES_CODE) AS SALE_PRICE,
							A.PRO_CODE, A.RES_CODE, A.PROFIT_RATE,
							YY.PROFIT_EMP_CODE,
							YY.PROFIT_TEAM_CODE,
							YY.PROFIT_TEAM_NAME,
							YY.DEP_DATE
					FROM SET_PROFIT A
					INNER JOIN (' + @SQLSTRING_PROFIT_TYPE_1 +
								' AND C.RES_STATE <= 7 ) YY ON A.PRO_CODE = YY.PRO_CODE AND A.RES_CODE=YY.RES_CODE 
				)  A
		) A
	INNER JOIN RES_MASTER B ON B.RES_CODE = A.RES_CODE )'

-- 0 - 행사, 1 - 마스터
IF @GROUP = 0
SET @SQLSTRING = 	'SELECT
	A.PRO_CODE,
	B.PRO_NAME,
	B.DEP_DATE,
	(SELECT KOR_NAME FROM PUB_REGION Z WHERE Z.SIGN = C.SIGN_CODE) AS REGION_NAME,
	SUM(A.RES_COUNT) AS RES_COUNT,
	SUM(A.PROFIT) AS PROFIT,
	SUM(A.SALE_PRICE) AS SALE_PRICE,
	A.PROFIT_TEAM_NAME
FROM ' + @SQLSTRING + ' A
INNER JOIN PKG_DETAIL B ON B.PRO_CODE = A.PRO_CODE
INNER JOIN VIEW_PRO_MASTER C ON C.MASTER_CODE = B.MASTER_CODE
GROUP BY A.PRO_CODE, B.PRO_NAME, B.DEP_DATE, C.SIGN_CODE, A.PROFIT_TEAM_NAME
ORDER BY 
CASE WHEN @ORDER = 0 THEN C.SIGN_CODE ELSE A.PROFIT_TEAM_NAME END , B.DEP_DATE, A.PRO_CODE '
ELSE
SET @SQLSTRING = 	'SELECT
	C.MASTER_CODE AS PRO_CODE,
	C.MASTER_NAME AS PRO_NAME,
	NULL AS DEP_DATE,
	(SELECT KOR_NAME FROM PUB_REGION Z WHERE Z.SIGN = C.SIGN_CODE) AS REGION_NAME,
	SUM(A.RES_COUNT) AS RES_COUNT,
	SUM(A.PROFIT) AS PROFIT,
	SUM(A.SALE_PRICE) AS SALE_PRICE,
	A.PROFIT_TEAM_NAME
FROM ' + @SQLSTRING + ' A
INNER JOIN PKG_DETAIL B ON B.PRO_CODE = A.PRO_CODE
INNER JOIN VIEW_PRO_MASTER C ON C.MASTER_CODE = B.MASTER_CODE
GROUP BY C.MASTER_CODE, C.MASTER_NAME, C.SIGN_CODE, A.PROFIT_TEAM_NAME
ORDER BY 
CASE WHEN @ORDER = 0 THEN C.SIGN_CODE ELSE A.PROFIT_TEAM_NAME END , C.MASTER_CODE'

SET @PARMDEFINITION = N'@DATE_TYPE	INT,	@EMP_TYPE	INT,	@START_DATE	DATETIME,	@END_DATE	DATETIME,	@REGION	CHAR(1),	@NATION_CODE	VARCHAR(30),	@CITY_CODE	VARCHAR(30),	@ATTRIBUTE	CHAR(1),	@TEAM_CODE	VARCHAR(3),	@EMP_CODE	VARCHAR(7),	@GROUP	INT,	@ORDER	INT';
PRINT @SQLSTRING
EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, 	@DATE_TYPE,	@EMP_TYPE,	@START_DATE,	@END_DATE,	@REGION,	@NATION_CODE,	@CITY_CODE,	@ATTRIBUTE,	@TEAM_CODE,	@EMP_CODE,	@GROUP,	@ORDER;

SET NOCOUNT OFF

END
GO
