USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*================================================================================================================
■ USP_NAME					: XP_COM_ERP_BIZTRIP_LIST_SELECT
■ DESCRIPTION				: BTMS ERP 출장 현황 예약 리스트 검색
■ INPUT PARAMETER			: 
	@AGT_CODE				: 거래처 코드
	@BT_CODE				: 출장코드
■ OUTPUT PARAMETER			: 
■ EXEC						: 

	EXEC XP_COM_ERP_BIZTRIP_LIST_SELECT '','1','','1','','','1','2016-04-13','2016-05-13','','','',''

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2016-04-29		저스트고-이유라  	최초생성
   2016-05-09		김성호				출장상태 예약 상태 기준 실시간 상태값 검색으로 변경
================================================================================================================*/ 
CREATE PROC [dbo].[XP_COM_ERP_BIZTRIP_LIST_SELECT]
	@APPROVAL_STATE		VARCHAR(1),
	@NUMBER_TYPE		VARCHAR(10),
	@NUMBER_TEXT		VARCHAR(100), 
	@SEARCH_TYPE		VARCHAR(10), 
	@SEARCH_TEXT		VARCHAR(100), 
	@AGT_CODE			VARCHAR(10),
	@DATE_TYPE			VARCHAR(10),
	@START_DATE			VARCHAR(30),
	@END_DATE			VARCHAR(30),
	@CANCEL_EXCEPT		VARCHAR(1),
	@PAY_LATER_YN		VARCHAR(1),
	@MANAGER			VARCHAR(30),
	@PAY_STATE			VARCHAR(20)
AS 
BEGIN

	DECLARE @SQLSTRING NVARCHAR(MAX), @PARMDEFINITION NVARCHAR(1000);
	DECLARE @WHERE NVARCHAR(4000), @WHERE2 NVARCHAR(1000), @WHERE_RES_CANCEL NVARCHAR(100) = '', @ORDERBY VARCHAR(100);

	SELECT @WHERE = 'WHERE 1=1 '
	SELECT @WHERE2 = 'WHERE 1=1 '

	IF (@APPROVAL_STATE <> '')
	 BEGIN
		SET @WHERE = @WHERE + ' AND A.APPROVAL_STATE = @APPROVAL_STATE '
	 END

	IF(@NUMBER_TYPE <> '' AND @NUMBER_TEXT <> '')
	 SELECT @WHERE = @WHERE + (
		CASE @NUMBER_TYPE
			WHEN 1 THEN ' AND A.BT_CODE = @NUMBER_TEXT '
			WHEN 2 THEN ' AND B.RES_CODE = @NUMBER_TEXT '
			WHEN 3 THEN ' AND A.PRO_CODE = @NUMBER_TEXT '
		END
	)

	IF(@SEARCH_TYPE <> '' AND @SEARCH_TEXT <> '')
	 SELECT @WHERE = @WHERE + (
		CASE @SEARCH_TYPE
			WHEN 1 THEN ' AND C.KOR_NAME LIKE ''%'' + @SEARCH_TEXT + ''%'' '
			WHEN 2 THEN ' AND E.CUS_NAME LIKE ''%'' + @SEARCH_TEXT + ''%''  '
			WHEN 3 THEN ' AND A.BT_NAME LIKE ''%'' + @SEARCH_TEXT + ''%''  '
		END
	)

	IF (@AGT_CODE <> '')
	 BEGIN
		SET @WHERE = @WHERE + ' AND A.AGT_CODE = @AGT_CODE '
	 END

	-- 환불/취소 출장만 보기
	IF @CANCEL_EXCEPT = 'Y'
	BEGIN
		SET @WHERE_RES_CANCEL = N'WHERE Z.BT_STATE < 7'
	END

	IF(@DATE_TYPE <> '' AND @NUMBER_TEXT = '' AND @SEARCH_TEXT = '')
	 SELECT @WHERE = @WHERE + (
		CASE @DATE_TYPE
			WHEN 1 THEN ' AND A.LAST_NEW_DATE >= CONVERT(DATETIME, @START_DATE ) AND A.LAST_NEW_DATE < DATEADD(D, 1, CONVERT(DATETIME, @END_DATE ))'
			WHEN 2 THEN ' AND A.BT_START_DATE >= CONVERT(DATETIME, @START_DATE) AND A.BT_START_DATE < DATEADD(D, 1, CONVERT(DATETIME, @END_DATE ))  '
			WHEN 3 THEN ' AND A.BT_END_DATE >= CONVERT(DATETIME, @START_DATE) AND A.BT_END_DATE < DATEADD(D, 1, CONVERT(DATETIME, @END_DATE))  '
			WHEN 4 THEN ' AND A.BT_TIME_LIMIT >= CONVERT(DATETIME, @START_DATE ) AND A.BT_TIME_LIMIT < DATEADD(D, 1, CONVERT(DATETIME,@END_DATE))'
			WHEN 5 THEN ' AND A.PAY_REQUEST_DATE >= CONVERT(DATETIME, @START_DATE ) AND A.PAY_REQUEST_DATE < DATEADD(D, 1, CONVERT(DATETIME,@END_DATE))  '
		END
	)

	IF (@PAY_LATER_YN <> '')
	 BEGIN
		SET @WHERE = @WHERE + ' AND F.PAY_LATER_YN = @PAY_LATER_YN'
	 END

	IF (@MANAGER <> '')
	 BEGIN
		SET @WHERE = @WHERE + ' AND  A.AGT_CODE IN ( SELECT AGT_CODE FROM COM_MANAGER WHERE EMP_CODE = @MANAGER) '
	 END

	IF(@PAY_STATE <> '')
	 BEGIN
		SET @WHERE2 = @WHERE2 + ' AND (CASE WHEN Z.PAY_PRICE = 0 THEN 0 WHEN Z.TOTAL_PRICE > Z.PAY_PRICE THEN 1 WHEN Z.TOTAL_PRICE = Z.PAY_PRICE THEN 2 ELSE 3 END) = @PAY_STATE '
	 END

	 IF(@DATE_TYPE <> '')
	 SELECT @ORDERBY = (
		CASE @DATE_TYPE
			WHEN 1 THEN ' A.LAST_NEW_DATE DESC '
			WHEN 2 THEN ' A.BT_START_DATE ASC , A.LAST_NEW_DATE DESC '
			WHEN 3 THEN ' A.BT_END_DATE ASC , A.LAST_NEW_DATE DESC '
			WHEN 4 THEN ' A.BT_TIME_LIMIT ASC, A.LAST_NEW_DATE DESC '
			WHEN 5 THEN ' A.PAY_REQUEST_DATE ASC, A.LAST_NEW_DATE DESC '
		END
	)

	SET @SQLSTRING = N'
	WITH DOCUMENTLIST AS
	(
			SELECT Z.AGT_CODE, Z.BT_CODE, Z.LAST_NEW_DATE, Z.AIR_COUNT, Z.HOTEL_COUNT, Z.RENT_COUNT, Z.VISA_COUNT, Z.ETC_COUNT, Z.BT_STATE
				, (SELECT ISNULL(Z.RENT_COUNT,0) + ISNULL(Z.VISA_COUNT,0) + ISNULL(Z.ETC_COUNT,0)) AS ETC_RES_COUNT
				, (SELECT ISNULL(Z.AIR_COUNT,0) + ISNULL(Z.HOTEL_COUNT,0) + ISNULL(Z.RENT_COUNT,0) + ISNULL(Z.VISA_COUNT,0) + ISNULL(Z.ETC_COUNT,0)) AS TOTAL_RES_COUNT
				,  Z.TOTAL_PRICE, Z.PAY_PRICE
			FROM (
				SELECT A.AGT_CODE, A.BT_CODE, MAX(A.NEW_DATE) AS [LAST_NEW_DATE]
					, (CASE
							WHEN MIN(A.RES_STATE) < 7 THEN 0
							WHEN MIN(A.RES_STATE) = 7 THEN 7
							ELSE 9
						END) AS [BT_STATE]
					, SUM(CASE WHEN B.RES_STATE <= 7 AND B.PRO_TYPE = 2 THEN 1 END) AS [AIR_COUNT]
					, SUM(CASE WHEN B.RES_STATE <= 7 AND B.PRO_TYPE = 3 THEN 1 END) AS [HOTEL_COUNT]
					, SUM(CASE WHEN B.RES_STATE <= 7 AND B.PRO_TYPE = 1 AND A.PRO_DETAIL_TYPE = 4 THEN 1 END) AS [RENT_COUNT]
					, SUM(CASE WHEN B.RES_STATE <= 7 AND B.PRO_TYPE = 1 AND A.PRO_DETAIL_TYPE = 5 THEN 1 END) AS [VISA_COUNT]
					, SUM(CASE WHEN B.RES_STATE <= 7 AND B.PRO_TYPE = 1 AND A.PRO_DETAIL_TYPE = 9 THEN 1 END) AS [ETC_COUNT]
					, SUM(DBO.FN_RES_GET_TOTAL_PRICE(B.RES_CODE)) AS TOTAL_PRICE
					, SUM(DBO.FN_RES_GET_PAY_PRICE(B.RES_CODE)) AS PAY_PRICE
				FROM (
					SELECT A.AGT_CODE, A.BT_CODE, B.RES_CODE, D.NEW_DATE,  B.PRO_DETAIL_TYPE, D.RES_STATE
					FROM COM_BIZTRIP_MASTER A WITH(NOLOCK)
					INNER JOIN COM_BIZTRIP_DETAIL B WITH(NOLOCK) ON A.AGT_CODE = B.AGT_CODE AND A.BT_CODE = B.BT_CODE
					LEFT JOIN COM_EMPLOYEE C WITH(NOLOCK) ON A.AGT_CODE = C.AGT_CODE AND A.NEW_SEQ = C.EMP_SEQ
					LEFT JOIN RES_MASTER_damo D WITH(NOLOCK) ON B.RES_CODE = D.RES_CODE
					LEFT JOIN RES_CUSTOMER_damo E WITH(NOLOCK) ON B.RES_CODE = E.RES_CODE
					LEFT JOIN AGT_MASTER F WITH(NOLOCK) ON A.AGT_CODE = F.AGT_CODE
					' + @WHERE + N'
					GROUP BY A.AGT_CODE, A.BT_CODE, B.RES_CODE, D.NEW_DATE, B.PRO_DETAIL_TYPE, D.RES_STATE
				) A
				LEFT JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
				GROUP BY A.AGT_CODE, A.BT_CODE
			) Z
			INNER JOIN COM_BIZTRIP_MASTER A WITH(NOLOCK) ON Z.AGT_CODE = A.AGT_CODE AND Z.BT_CODE = A.BT_CODE
			' + @WHERE_RES_CANCEL + N'
	)
	SELECT
		A.AGT_CODE, A.BT_CODE, A.APPROVAL_STATE, Z.LAST_NEW_DATE, Z.BT_STATE, A.BT_START_DATE, A.BT_END_DATE, A.BT_NAME,B.KOR_NAME AS CITY_NAME,
		C.KOR_NAME AS NATION_NAME,D.KOR_NAME AS EMP_NAME,E.TEAM_NAME,F.POS_NAME,
		AIR_COUNT, HOTEL_COUNT, RENT_COUNT, VISA_COUNT, ETC_COUNT,ETC_RES_COUNT, TOTAL_RES_COUNT,
		G.KOR_NAME AS AGT_NAME,G.PAY_LATER_YN,
		(CASE WHEN Z.PAY_PRICE = 0 THEN 0    --미납
		   WHEN Z.TOTAL_PRICE > Z.PAY_PRICE THEN 1   --부분납
		   WHEN Z.TOTAL_PRICE = Z.PAY_PRICE THEN 2   --완납
		   ELSE 3 END) AS PAY_STATE
	FROM DOCUMENTLIST Z
	INNER JOIN COM_BIZTRIP_MASTER A WITH(NOLOCK) ON Z.AGT_CODE = A.AGT_CODE AND Z.BT_CODE = A.BT_CODE
	LEFT JOIN PUB_CITY B WITH(NOLOCK) ON A.BT_CITY_CODE = B.CITY_CODE
	LEFT JOIN PUB_NATION C WITH(NOLOCK) ON B.NATION_CODE = C.NATION_CODE
	LEFT JOIN COM_EMPLOYEE D WITH(NOLOCK) ON A.AGT_CODE = D.AGT_CODE AND A.NEW_SEQ = D.EMP_SEQ
	LEFT JOIN COM_TEAM E WITH(NOLOCK) ON A.AGT_CODE = E.AGT_CODE AND D.TEAM_SEQ = E.TEAM_SEQ
	LEFT JOIN COM_POSITION F WITH(NOLOCK) ON A.AGT_CODE = F.AGT_CODE AND D.POS_SEQ = F.POS_SEQ
	LEFT JOIN AGT_MASTER G WITH(NOLOCK) ON A.AGT_CODE = G.AGT_CODE
	' + @WHERE2 + N'
	ORDER BY ' + @ORDERBY

	SET @PARMDEFINITION = N'
		@WHERE2  NVARCHAR(1000),
		@APPROVAL_STATE	VARCHAR(1),
		@NUMBER_TYPE	VARCHAR(10),
		@NUMBER_TEXT	VARCHAR(100), 
		@SEARCH_TYPE	VARCHAR(10), 
		@SEARCH_TEXT	VARCHAR(100), 
		@AGT_CODE		VARCHAR(10),
		@DATE_TYPE		VARCHAR(10),
		@START_DATE		VARCHAR(30),
		@END_DATE		VARCHAR(30),
		@CANCEL_EXCEPT	VARCHAR(1),
		@PAY_LATER_YN	VARCHAR(1),
		@MANAGER		VARCHAR(30),
		@PAY_STATE		VARCHAR(20),
		@ORDERBY		VARCHAR(100)';


	PRINT @SQLSTRING

	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION,
		@WHERE2,
		@APPROVAL_STATE,	
		@NUMBER_TYPE,
		@NUMBER_TEXT,	
		@SEARCH_TYPE,	
		@SEARCH_TEXT,	
		@AGT_CODE,	
		@DATE_TYPE,		
		@START_DATE,		
		@END_DATE,		
		@CANCEL_EXCEPT,	
		@PAY_LATER_YN,	
		@MANAGER,		
		@PAY_STATE,
		@ORDERBY;
END 
GO
