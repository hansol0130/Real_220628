USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: XP_CTI_EMPLOYEE_SUMMARY_LIST_SELECT
■ DESCRIPTION				: CTI 직원별 통계
■ INPUT PARAMETER			: 
	@START_DATE				: 기준일
	@END_DATE				: 종료일
■ OUTPUT PARAMETER			: 
■ EXEC						: 

	EXEC XP_CTI_EMPLOYEE_SUMMARY_LIST_SELECT '2018-06-01', '2018-06-18' ,'', 'N'

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2015-12-21		김성호			최초생성
   2015-12-21		박형만			팀코드추가 , END_DATE +1 수정 
   2017-03-06		김성호			직원 검색 로직 수정
   2017-10-10		김성호			PK 인덱스 사용을 위해 테이블 변수 사용으로 수정
   2018-03-13		김성호			주말포함 유무 조건 포함
   2018-04-03		김성호			부서이동자를 위해 통화시간 조회 항목에서 팀 제외
   2022-05-19       이장훈			@CALL_RECV_SEND_LIST 추가 해서 수/발신 건수 항목 추가 및 @COMMENT_LIST 저장 조회쿼리 개선
   2022-05-30		김성호			예외부서에서 560: 온라인파트 제외
   2022-05-31       오준혁           근무일수 조회 수정
================================================================================================================*/ 
CREATE  PROCEDURE [dbo].[XP_CTI_EMPLOYEE_SUMMARY_LIST_SELECT]
(
	@START_DATE	DATE,
	@END_DATE	DATE,
	@TEAM_CODE VARCHAR(3),
	@WEEKEND_YN VARCHAR(1) = 'N',
	@OUT_YN VARCHAR(1) = 'N'
)

AS  
BEGIN

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
	SET @END_DATE = DATEADD(D,1,@END_DATE);


	-- 대상 직원
	DECLARE @EMP_LIST TABLE (EMP_CODE EMP_CODE PRIMARY KEY, KOR_NAME KOR_NAME, JOIN_DATE SMALLDATETIME, OUT_DATE SMALLDATETIME, TEAM_CODE TEAM_CODE, TEAM_NAME VARCHAR(50))

	IF(@OUT_YN <> 'Y')
	BEGIN
		INSERT INTO @EMP_LIST
		SELECT A.EMP_CODE, A.KOR_NAME, A.JOIN_DATE, A.OUT_DATE, A.TEAM_CODE, B.TEAM_NAME
		FROM DIABLO.DBO.EMP_MASTER_damo A WITH(NOLOCK)
		INNER JOIN Diablo.DBO.EMP_TEAM B WITH(NOLOCK) ON A.TEAM_CODE = B.TEAM_CODE
		WHERE --A.EMP_CODE < '3000000' AND 
		A.WORK_TYPE = '1' AND A.CTI_USE_YN = 'Y' AND A.DUTY_TYPE = 1 AND A.TEAM_CODE NOT IN (540, 558, 556, 557, 529, 538, 518)
			AND A.JOIN_DATE < @END_DATE --AND (A.OUT_DATE IS NULL OR A.OUT_DATE > @START_DATE) 
			AND (ISNULL(@TEAM_CODE,'') = '' OR A.TEAM_CODE = @TEAM_CODE )
	END
	ELSE
	BEGIN
		INSERT INTO @EMP_LIST
		SELECT A.EMP_CODE, A.KOR_NAME, A.JOIN_DATE, A.OUT_DATE, A.TEAM_CODE, B.TEAM_NAME
		FROM DIABLO.DBO.EMP_MASTER_damo A WITH(NOLOCK)
		INNER JOIN Diablo.DBO.EMP_TEAM B WITH(NOLOCK) ON A.TEAM_CODE = B.TEAM_CODE
		WHERE --A.EMP_CODE < '3000000' AND 
		A.DUTY_TYPE = 1 AND A.TEAM_CODE NOT IN (540, 558, 556, 557, 529, 538, 518)
			AND A.JOIN_DATE < @END_DATE --AND (A.OUT_DATE IS NULL OR A.OUT_DATE > @START_DATE) 
			AND (ISNULL(@TEAM_CODE,'') = '' OR A.TEAM_CODE = @TEAM_CODE )

	END
	
	-- 직원 근무일자 (원천)
	DECLARE @EMP_WORK_DATE_LIST TABLE
	(
		YMD_DATE VARCHAR(8)
	   ,EMP_CODE EMP_CODE
	   ,TEAM_CODE TEAM_CODE
	)

	-- 근무일수 조회 수정
	INSERT INTO @EMP_WORK_DATE_LIST
	SELECT a.S_DATE
	      ,a.EMP_CODE
	      ,a.TEAM_CODE
	FROM   Sirens.cti.CTI_STAT_WORKTIME a WITH(NOLOCK)
	       INNER JOIN Diablo.dbo.PUB_TMP_DATE b WITH(NOLOCK)
	            ON  b.[DATE] >= @START_DATE
	                AND b.[DATE] <= @END_DATE
	                AND (b.WEEK_DAY IN (2 ,3 ,4 ,5 ,6) OR @WEEKEND_YN = 'Y')
	                AND a.S_DATE = b.[DATE]
	
	--SELECT CONVERT(VARCHAR(8), A.DATE, 112) AS [YMD_DATE], B.EMP_CODE, B.TEAM_CODE
	--FROM Diablo.dbo.PUB_TMP_DATE A WITH(NOLOCK)
	--INNER JOIN @EMP_LIST B ON A.DATE >= B.JOIN_DATE
	--LEFT JOIN (
	--	SELECT AA.EDI_CODE, AA.NEW_CODE, BB.DATE, BB.WEEK_DAY
	--	FROM DIABLO.DBO.EDI_MASTER_damo AA WITH(NOLOCK)
	--	INNER JOIN DIABLO.DBO.PUB_TMP_DATE BB WITH(NOLOCK) ON BB.DATE >= AA.JOIN_DATE AND BB.DATE <=  AA.OUT_DATE AND BB.DATE < GETDATE() AND (BB.WEEK_DAY IN (2, 3, 4, 5, 6) OR @WEEKEND_YN = 'Y')
	--	WHERE AA.NEW_CODE IN (SELECT EMP_CODE FROM @EMP_LIST) AND AA.EDI_STATUS = 3 AND VIEW_YN = 'Y' AND AA.DOC_TYPE IN (1, 2)
	--		AND AA.OUT_DATE >= @START_DATE AND AA.JOIN_DATE <= @END_DATE
	--) C ON B.EMP_CODE = C.NEW_CODE AND A.DATE = C.DATE
	--WHERE A.DATE >= @START_DATE AND A.DATE < @END_DATE AND (@WEEKEND_YN = 'Y' OR A.WEEK_DAY IN (2, 3, 4, 5, 6)) -- 기준요일 제어
	--	AND A.DATE NOT IN (SELECT HOLIDAY FROM PUB_HOLIDAY WITH(NOLOCK) WHERE HOLIDAY >= @START_DATE AND HOLIDAY < @END_DATE)
	--	AND C.DATE IS NULL
	
	

	-- 직원별 근무일자
	DECLARE @EMP_MONTH_WORK_LIST TABLE (EMP_CODE EMP_CODE PRIMARY KEY, WORK_COUNT INT)

	INSERT INTO @EMP_MONTH_WORK_LIST
	SELECT A.EMP_CODE, COUNT(*) AS [WORK_COUNT]
	FROM @EMP_WORK_DATE_LIST A
	GROUP BY A.EMP_CODE

	-- 직원별 통화시간 예약관련 수
	DECLARE @CALL_TIME_LIST TABLE (EMP_CODE EMP_CODE PRIMARY KEY, CALL_TIME INT, RES_COUNT INT)

	INSERT INTO @CALL_TIME_LIST
	SELECT A.EMP_CODE
		, (SUM(B.IN_CALL_TIME) + SUM(B.OUT_CALL_TIME)) AS [CALL_TIME]
		, SUM(B.RESERVE_COUNT) AS [RES_COUNT]
	FROM @EMP_WORK_DATE_LIST A
	INNER JOIN Sirens.cti.CTI_STAT_WORKTIME B WITH(NOLOCK) ON B.S_DATE = A.YMD_DATE --AND B.TEAM_CODE = A.TEAM_CODE
		 AND B.EMP_CODE = A.EMP_CODE
	GROUP BY A.EMP_CODE

	-- 상담내용 작성 유무
	DECLARE @COMMENT_LIST TABLE (EMP_CODE EMP_CODE PRIMARY KEY, TOTAL_CALL_COUNT INT, NO_COMMENT INT)
	INSERT INTO @COMMENT_LIST
	SELECT EMP_CODE--, A.WORK_COUNT AS [TOTAL_WORK_COUNT]
		, COUNT(*) AS [TOTAL_CALL_COUNT]
		, ISNULL(SUM(CASE WHEN CONSULT_CONTENT LIKE '상담내용없음' AND DURATION_TIME > 20 THEN 1 END), 0) AS [NO_COMMENT]
		--, 0 AS [NO_COMMENT]
	FROM Sirens.cti.CTI_CONSULT WITH(NOLOCK) 
	WHERE CONSULT_DATE >= @START_DATE AND CONSULT_DATE < @END_DATE
	GROUP BY EMP_CODE
	
	/* 조회 시간이 너무오래걸려 주석처리 (2022-05-20)
	INSERT INTO @COMMENT_LIST
	SELECT A.EMP_CODE--, A.WORK_COUNT AS [TOTAL_WORK_COUNT]
		, COUNT(*) AS [TOTAL_CALL_COUNT]
		, ISNULL(SUM(CASE WHEN B.CONSULT_CONTENT LIKE '상담내용없음' AND B.DURATION_TIME > 20 THEN 1 END), 0) AS [NO_COMMENT]
		--, 0 AS [NO_COMMENT]
	FROM @EMP_LIST A
	INNER JOIN Sirens.cti.CTI_CONSULT B WITH(NOLOCK) ON A.EMP_CODE = B.EMP_CODE AND B.CONSULT_DATE >= @START_DATE AND B.CONSULT_DATE < @END_DATE
	GROUP BY A.EMP_CODE
	*/
	
	-- 근무시간 비례 통화 및 상담 저장율
	DECLARE @COMMENT_RATE_LIST TABLE (EMP_CODE EMP_CODE PRIMARY KEY, TOTAL_CALL_COUNT INT, TOTAL_WORK_COUNT INT, DAY_AVG_CALL_COUNT DECIMAL, AVG_COMMENT_RATE DECIMAL)

	INSERT INTO @COMMENT_RATE_LIST
	SELECT A.EMP_CODE, A.TOTAL_CALL_COUNT, B.WORK_COUNT AS [TOTAL_WORK_COUNT]
		, ROUND(((A.TOTAL_CALL_COUNT * 1.0) / B.WORK_COUNT), 1) AS [DAY_AVG_CALL_COUNT]
		, ROUND(100 - (A.NO_COMMENT * 100.0 / A.TOTAL_CALL_COUNT), 1) AS [AVG_COMMENT_RATE]
	FROM @COMMENT_LIST A
	INNER JOIN @EMP_MONTH_WORK_LIST B ON A.EMP_CODE = B.EMP_CODE

	-- 일자별 통화 시간
	DECLARE @CALL_TIME_DAY_LIST TABLE (EMP_CODE EMP_CODE PRIMARY KEY, RES_COUNT INT, TOTAL_CALL_TIME INT, DAY_CALL_TIME INT)

	INSERT INTO @CALL_TIME_DAY_LIST
	SELECT A.EMP_CODE, A.RES_COUNT --, A.WORK_COUNT AS [TOTAL_WORK_COUNT]
		, A.CALL_TIME AS [TOTAL_CALL_TIME], (A.CALL_TIME / (CASE WHEN B.WORK_COUNT > 0 THEN B.WORK_COUNT ELSE 1 END)) AS [DAY_CALL_TIME]
	FROM @CALL_TIME_LIST A
	INNER JOIN @EMP_MONTH_WORK_LIST B ON A.EMP_CODE = B.EMP_CODE

	-- CTI 수신 / 발신 건수 조회
	DECLARE @CALL_RECV_SEND_LIST TABLE (EMP_CODE EMP_CODE PRIMARY KEY,RECV_CNT INT , SEND_CNT INT)
	INSERT INTO @CALL_RECV_SEND_LIST
	SELECT 
		 A.EMP_CODE , A.RECV_CNT , B.SEND_CNT
	FROM
	(	
		SELECT 
			EMP_CODE ,	COUNT(*) AS RECV_CNT 
		FROM sirens.cti.CTI_CONSULT 
		WHERE  
			CONSULT_DATE >= @START_DATE AND CONSULT_DATE <= @END_DATE
			AND CONSULT_CALL_TYPE = 'R' -- 수신
		GROUP BY EMP_CODE 
	) A INNER JOIN (
		SELECT 
			EMP_CODE ,	COUNT(*) AS SEND_CNT  
		FROM sirens.cti.CTI_CONSULT 
		WHERE  
			CONSULT_DATE >= @START_DATE AND CONSULT_DATE <= @END_DATE
			AND CONSULT_CALL_TYPE = 'S' -- 발신
		GROUP BY EMP_CODE 
	) B ON B.EMP_CODE = A.EMP_CODE

	SELECT
		A.TEAM_NAME AS [팀명]
		, A.EMP_CODE AS [사번]
		, A.KOR_NAME AS [성명]
		, B.TOTAL_WORK_COUNT AS [근무일수]
		, B.TOTAL_CALL_COUNT AS [총통화수]
		, Sirens.cti.FN_GET_TIME_STRING(C.TOTAL_CALL_TIME) AS [총통화시간]
		, Sirens.cti.FN_GET_TIME_STRING(C.TOTAL_CALL_TIME / B.TOTAL_CALL_COUNT) AS [콜평균통화시간]
		, Sirens.cti.FN_GET_TIME_STRING(C.DAY_CALL_TIME) AS [일평균통화시간]
		, B.DAY_AVG_CALL_COUNT AS [일평균통화수]
		, B.AVG_COMMENT_RATE AS [평균작성율]
		--, 100 AS [평균작성율]
		, C.RES_COUNT AS [예약건수]
		, D.SEND_CNT AS [발신건수]
		, D.RECV_CNT AS [수신건수]
	FROM @EMP_LIST A
	INNER JOIN @COMMENT_RATE_LIST B ON A.EMP_CODE = B.EMP_CODE
	INNER JOIN @CALL_TIME_DAY_LIST C ON A.EMP_CODE = C.EMP_CODE
	INNER JOIN @CALL_RECV_SEND_LIST D ON D.EMP_CODE = A.EMP_CODE
	ORDER BY A.TEAM_NAME, A.KOR_NAME;

	/*
	WITH EMP_LIST AS 
	(
		SELECT A.EMP_CODE, A.KOR_NAME, A.JOIN_DATE, A.OUT_DATE, A.TEAM_CODE, B.TEAM_NAME
		FROM DIABLO.DBO.EMP_MASTER_damo A WITH(NOLOCK)
		INNER JOIN Diablo.DBO.EMP_TEAM B WITH(NOLOCK) ON A.TEAM_CODE = B.TEAM_CODE
		WHERE A.EMP_CODE < '3000000' AND A.WORK_TYPE = '1' AND A.CTI_USE_YN = 'Y' AND A.DUTY_TYPE = 1 AND A.TEAM_CODE NOT IN (540, 558, 556, 560, 557, 529, 538, 518)
			AND A.JOIN_DATE < @END_DATE AND (A.OUT_DATE IS NULL OR A.OUT_DATE > @START_DATE)

			AND (ISNULL(@TEAM_CODE,'') = '' OR A.TEAM_CODE = @TEAM_CODE )
	)
	, EMP_WORK_DATE_LIST AS
	(
		-- 근무일수 산정
		SELECT CONVERT(VARCHAR(8), A.DATE, 112) AS [YMD_DATE], B.EMP_CODE, B.TEAM_CODE
		FROM Diablo.dbo.PUB_TMP_DATE A WITH(NOLOCK)
		INNER JOIN EMP_LIST B ON A.DATE >= B.JOIN_DATE
		LEFT JOIN (
			SELECT AA.EDI_CODE, AA.NEW_CODE, BB.DATE, BB.WEEK_DAY
			FROM DIABLO.DBO.EDI_MASTER_damo AA WITH(NOLOCK)
			INNER JOIN DIABLO.DBO.PUB_TMP_DATE BB WITH(NOLOCK) ON BB.DATE >= AA.JOIN_DATE AND BB.DATE <=  AA.OUT_DATE AND BB.DATE < GETDATE() AND BB.WEEK_DAY IN (2, 3, 4, 5, 6)
			WHERE AA.NEW_CODE IN (SELECT EMP_CODE FROM EMP_LIST) AND AA.EDI_STATUS = 3 AND VIEW_YN = 'Y' AND AA.DOC_TYPE IN (1, 2)
				AND AA.OUT_DATE >= @START_DATE AND AA.JOIN_DATE <= @END_DATE
		) C ON B.EMP_CODE = C.NEW_CODE AND A.DATE = C.DATE
		WHERE A.DATE >= @START_DATE AND A.DATE < @END_DATE AND A.WEEK_DAY IN (2, 3, 4, 5, 6)
			AND A.DATE NOT IN (SELECT HOLIDAY FROM PUB_HOLIDAY WITH(NOLOCK) WHERE HOLIDAY >= @START_DATE AND HOLIDAY < @END_DATE)
			AND C.DATE IS NULL 
	)
	, EMP_MONTH_WORK_LIST AS
	(
		SELECT A.EMP_CODE, COUNT(*) AS [WORK_COUNT]
		FROM EMP_WORK_DATE_LIST A
		GROUP BY A.EMP_CODE
	)
	, CALL_TIME_LIST AS
	(
		SELECT A.EMP_CODE
			, (SUM(B.IN_CALL_TIME) + SUM(B.OUT_CALL_TIME)) AS [CALL_TIME]
			, SUM(B.RESERVE_COUNT) AS [RES_COUNT]
		FROM EMP_WORK_DATE_LIST A
		INNER JOIN Sirens.cti.CTI_STAT_WORKTIME B WITH(NOLOCK) ON B.S_DATE = A.YMD_DATE AND B.TEAM_CODE = A.TEAM_CODE AND B.EMP_CODE = A.EMP_CODE
		GROUP BY A.EMP_CODE
	)
	, COMMENT_LIST AS
	(
		SELECT A.EMP_CODE--, A.WORK_COUNT AS [TOTAL_WORK_COUNT]
			, COUNT(*) AS [TOTAL_CALL_COUNT]
			, ISNULL(SUM(CASE WHEN B.CONSULT_CONTENT LIKE '상담내용없음' AND B.DURATION_TIME > 20 THEN 1 END), 0) AS [NO_COMMENT]
		FROM EMP_LIST A
		INNER JOIN Sirens.cti.CTI_CONSULT B WITH(NOLOCK) ON A.EMP_CODE = B.EMP_CODE AND B.CONSULT_DATE >= @START_DATE AND B.CONSULT_DATE < @END_DATE
		GROUP BY A.EMP_CODE--, A.WORK_COUNT
	)
	, COMMENT_RATE_LIST AS 
	(
		SELECT A.EMP_CODE, A.TOTAL_CALL_COUNT, B.WORK_COUNT AS [TOTAL_WORK_COUNT]
			, ROUND(((A.TOTAL_CALL_COUNT * 1.0) / B.WORK_COUNT), 1) AS [DAY_AVG_CALL_COUNT]
			, ROUND(100 - (A.NO_COMMENT * 100.0 / A.TOTAL_CALL_COUNT), 1) AS [AVG_COMMENT_RATE]
		FROM COMMENT_LIST A
		INNER JOIN EMP_MONTH_WORK_LIST B ON A.EMP_CODE = B.EMP_CODE

		--SELECT A.EMP_CODE
		--	, ROUND(((A.TOTAL_CALL_COUNT * 1.0) / A.TOTAL_WORK_COUNT), 1) AS [DAY_AVG_CALL_COUNT]
		--	, ROUND(100 - (A.NO_COMMENT * 100.0 / A.TOTAL_CALL_COUNT), 1) AS [AVG_COMMENT_RATE]
		--FROM COMMENT_LIST A
	)
	, CALL_TIME_DAY_LIST AS
	(
		SELECT A.EMP_CODE, A.RES_COUNT--, A.WORK_COUNT AS [TOTAL_WORK_COUNT]
			, A.CALL_TIME AS [TOTAL_CALL_TIME], (A.CALL_TIME / (CASE WHEN B.WORK_COUNT > 0 THEN B.WORK_COUNT ELSE 1 END)) AS [DAY_CALL_TIME]
		FROM CALL_TIME_LIST A
		INNER JOIN EMP_MONTH_WORK_LIST B ON A.EMP_CODE = B.EMP_CODE
	)
	SELECT
		A.TEAM_NAME AS [팀명]
		, A.EMP_CODE AS [사번]
		, A.KOR_NAME AS [성명]
		, B.TOTAL_WORK_COUNT AS [근무일수]
		, B.TOTAL_CALL_COUNT AS [총통화수]
		, Sirens.cti.FN_GET_TIME_STRING(C.TOTAL_CALL_TIME) AS [총통화시간]
		, Sirens.cti.FN_GET_TIME_STRING(C.TOTAL_CALL_TIME / B.TOTAL_CALL_COUNT) AS [콜평균통화시간]
		, Sirens.cti.FN_GET_TIME_STRING(C.DAY_CALL_TIME) AS [일평균통화시간]
		, B.DAY_AVG_CALL_COUNT AS [일평균통화수]
		, B.AVG_COMMENT_RATE AS [평균작성율]
		, C.RES_COUNT AS [예약건수]
	FROM EMP_LIST A
	INNER JOIN COMMENT_RATE_LIST B ON A.EMP_CODE = B.EMP_CODE
	INNER JOIN CALL_TIME_DAY_LIST C ON A.EMP_CODE = C.EMP_CODE
	ORDER BY A.TEAM_NAME, A.KOR_NAME;
	*/
END




GO
