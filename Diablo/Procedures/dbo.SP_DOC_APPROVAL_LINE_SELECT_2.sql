USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*================================================================================================================
■ USP_NAME					: SP_DOC_APPROVAL_LINE_SELECT_2
■ DESCRIPTION				: 전자결재 결재라인 검색
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: 

exec SP_DOC_APPROVAL_LINE_SELECT_2 @DOC_TYPE='1',@APP_TYPE='1',@EMP_CODE='2000007',@EDI_CODE='1908077338',@FLAG=N'1'

exec SP_DOC_APPROVAL_LINE_SELECT_2 @DOC_TYPE='7',@APP_TYPE='1',@EMP_CODE='2012042',@EDI_CODE='1704034783',@FLAG=N'1'

exec SP_DOC_APPROVAL_LINE_SELECT_2 @DOC_TYPE='8',@APP_TYPE='1',@EMP_CODE='2014064',@EDI_CODE='1704034783',@FLAG=N'1',@DETAIL_TYPE='3'


■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2014-01-20		김성호			최초생성
   2017-04-03		김성호			로직 개편
   2018-08-13		김성호			휴가, 출장 시 임원은 대표님까지 결재가 되도록 수정
   2020-02-10		김성호			DETAIL_TYPE 추가
================================================================================================================*/ 
CREATE PROCEDURE [dbo].[SP_DOC_APPROVAL_LINE_SELECT_2]
	@DOC_TYPE		VARCHAR(10),	-- 문서종류
	@APP_TYPE		CHAR(1),		-- 결재라인
	@EMP_CODE		VARCHAR(10),	-- 결재자 코드
	@EDI_CODE		VARCHAR(10),	-- 문서번호
	@FLAG			VARCHAR(1),		-- 1: 문서기준, 2: 사원코드기준
	@DETAIL_TYPE	VARCHAR(1) = '0'	-- 상세타입
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	SET NOCOUNT ON;

	-- FLAG=1일때 결재자 존재하면 결제가 가져옴
	IF EXISTS(SELECT 1 FROM EDI_APPROVAL WITH(NOLOCK) WHERE EDI_CODE = @EDI_CODE AND APP_STATUS = 'N' AND @FLAG = '1')
	BEGIN
		SELECT @EMP_CODE = APP_CODE FROM EDI_APPROVAL WITH(NOLOCK) WHERE EDI_CODE = @EDI_CODE AND APP_STATUS = 'N'
	END

	-- 최종결재직책코드 가져오기
	-- 작성자의 직책 구분
	DECLARE @LEADER_CODE VARCHAR(1), @FINAL_DUTY_TYPE VARCHAR(10)

	IF @FLAG = '1'
	BEGIN
		IF EXISTS(
			SELECT 1 FROM EMP_MASTER_damo A WITH(NOLOCK) 
			WHERE @DOC_TYPE IN ('1', '2') AND A.DUTY_TYPE >= 5 AND A.EMP_CODE IN (SELECT ISNULL((SELECT NEW_CODE FROM EDI_MASTER_damo WITH(NOLOCK) WHERE EDI_CODE = @EDI_CODE), @EMP_CODE)))
		BEGIN
			SET @LEADER_CODE = '3'
		END
		ELSE IF EXISTS(
			SELECT 1 FROM EMP_MASTER_damo A WITH(NOLOCK) 
			WHERE A.DUTY_TYPE >= 3 AND A.EMP_CODE IN (SELECT ISNULL((SELECT NEW_CODE FROM EDI_MASTER_damo WITH(NOLOCK) WHERE EDI_CODE = @EDI_CODE), @EMP_CODE)))
		BEGIN
		--ELSE IF EXISTS(SELECT 1 FROM EMP_TEAM WITH(NOLOCK) WHERE TEAM_EMP_CODE = (SELECT NEW_CODE FROM EDI_MASTER_damo WITH(NOLOCK) WHERE EDI_CODE = @EDI_CODE))
			SET @LEADER_CODE = '2'
		END
		ELSE
		BEGIN
			SET @LEADER_CODE = '1'
		END
	END
	ELSE IF @FLAG = '2'
	BEGIN
		IF EXISTS(SELECT 1 FROM EMP_MASTER_damo A WITH(NOLOCK) WHERE @DOC_TYPE IN ('1', '2') AND A.DUTY_TYPE >= 5 AND A.EMP_CODE = @EMP_CODE)
			SET @LEADER_CODE = '3'
		ELSE IF EXISTS(SELECT 1 FROM EMP_MASTER_damo A WITH(NOLOCK) WHERE A.DUTY_TYPE >= 3 AND A.EMP_CODE = @EMP_CODE)
		--ELSE IF EXISTS(SELECT * FROM EMP_TEAM WITH(NOLOCK) WHERE TEAM_EMP_CODE = @EMP_CODE)
			SET @LEADER_CODE = '2'
		ELSE
			SET @LEADER_CODE = '1'
	END
	
	SELECT @FINAL_DUTY_TYPE = FINAL_DUTY_TYPE 
	FROM EDI_APPROVAL_TEMPLATE WITH(NOLOCK)
	WHERE DOC_TYPE = @DOC_TYPE AND DETAIL_TYPE = (
		CASE
			WHEN EXISTS(SELECT 1 FROM EDI_APPROVAL_TEMPLATE WITH(NOLOCK) WHERE DOC_TYPE = @DOC_TYPE AND DETAIL_TYPE = @DETAIL_TYPE) THEN @DETAIL_TYPE
			ELSE '0'
		END) AND DUTY_CODE = @LEADER_CODE AND APP_TYPE = @APP_TYPE

	--SELECT @FINAL_DUTY_TYPE = FINAL_DUTY_TYPE 
	--FROM EDI_APPROVAL_TEMPLATE WITH(NOLOCK)
	--WHERE DOC_TYPE = @DOC_TYPE AND DETAIL_TYPE = @DETAIL_TYPE AND DUTY_CODE = @LEADER_CODE AND APP_TYPE = @APP_TYPE

	-- 실행 쿼리를 담을 변수
	DECLARE @QUERY VARCHAR(8000)
	-- 사원 코드를 담을 변수
	DECLARE @CODES VARCHAR(100) = ''
	DECLARE @TEAM VARCHAR(100) = ''
	-- 임시 변수 선언
	DECLARE @TMP_TEAM_CODE VARCHAR(10) = ''
	DECLARE @TMP_EMP_CODE VARCHAR(10) = ''
	DECLARE @TMP_DUTY_TYPE VARCHAR(10) = ''
	DECLARE @COUNT INT = 0

	SELECT TOP 1
		@TMP_TEAM_CODE = A.TEAM_CODE,
		@TMP_EMP_CODE = B.TEAM_EMP_CODE,
		@TMP_DUTY_TYPE = A.DUTY_TYPE
	FROM EMP_MASTER_damo A WITH(NOLOCK)
	INNER JOIN EMP_TEAM B WITH(NOLOCK) ON A.TEAM_CODE = B.TEAM_CODE AND B.USE_YN = 'Y'
	WHERE A.EMP_CODE = @EMP_CODE

--	PRINT @TMP_TEAM_CODE + '^' + @TMP_DUTY_TYPE + '^' + @FINAL_DUTY_TYPE + '^' + CONVERT(VARCHAR(10), @COUNT)

	-- 상위 결재자코드를 변수에 담는다
	-- 상위자가 있고 최종직책코드를 넘지않고 최대 10단계를 넘지 않는다
	WHILE ISNULL(@TMP_TEAM_CODE, '') <> '' AND CONVERT(INT, @TMP_DUTY_TYPE) <= CONVERT(INT, @FINAL_DUTY_TYPE) AND @COUNT < 10
	BEGIN
		
		IF @FLAG = '2' OR @TMP_EMP_CODE <> @EMP_CODE
		BEGIN
			SET @CODES = (ISNULL(@CODES, '') + ', ''' + @TMP_EMP_CODE + '''')
			SET @TEAM = (ISNULL(@TEAM, '') + ', ' + @TMP_TEAM_CODE)
		END
		--PRINT @TEAM
		--PRINT @COUNT
		--PRINT @TMP_DUTY_TYPE
		
		--PRINT @TMP_TEAM_CODE + '^' +  @TMP_EMP_CODE + '^' + @FINAL_DUTY_TYPE 
		SELECT @TMP_TEAM_CODE = DBO.FN_DOC_PARENT_TEAM(@TMP_TEAM_CODE, @TMP_EMP_CODE, @FINAL_DUTY_TYPE), @TMP_EMP_CODE = '', @TMP_DUTY_TYPE = '';

		SELECT @TMP_TEAM_CODE = ISNULL(A.TEAM_CODE, ''), @TMP_EMP_CODE = ISNULL(A.TEAM_EMP_CODE, ''), @TMP_DUTY_TYPE = ISNULL(B.DUTY_TYPE, '')
		FROM EMP_TEAM A
		LEFT JOIN EMP_MASTER_damo B ON A.TEAM_EMP_CODE = B.EMP_CODE
		WHERE A.TEAM_CODE = @TMP_TEAM_CODE

		SET @COUNT = @COUNT + 1
	END

	-- 상위결재자가 존재하면 상하구조로 출력
	IF (LEN(@CODES) > 7)
	BEGIN
		SET @CODES = SUBSTRING(@CODES, 3, 100)
		SET @TEAM = '''' + SUBSTRING(@TEAM, 2, 100) + ''''
	END
	ELSE
	BEGIN
		SET @CODES = ''''''
		SET @TEAM = ''''''
	END

	SET @QUERY = '
	SELECT A.TEAM_CODE, A.TEAM_NAME, A.PARENT_CODE, A.TEAM_EMP_CODE AS [APP_CODE], C.KOR_NAME AS [APP_NAME], C.DUTY_TYPE, D.PUB_VALUE AS [DUTY_NAME], E.APP_DATE
	FROM EMP_TEAM A WITH(NOLOCK)
	INNER JOIN dbo.FN_SPLIT(' + @TEAM + ',  '','') B ON A.TEAM_CODE = B.Data
	INNER JOIN EMP_MASTER_damo C WITH(NOLOCK) ON A.TEAM_EMP_CODE = C.EMP_CODE
	LEFT JOIN COD_PUBLIC D WITH(NOLOCK) ON D.PUB_TYPE = ''EMP.DUTYTYPE'' AND C.DUTY_TYPE = D.PUB_CODE
	LEFT JOIN EDI_APPROVAL E WITH(NOLOCK) ON E.EDI_CODE = ''' + @EDI_CODE + ''' AND E.APP_CODE = A.TEAM_EMP_CODE AND E.APP_TYPE = ''' + @APP_TYPE + '''
	WHERE C.EMP_CODE IN (' + @CODES + ')
	ORDER BY B.ID'

	--PRINT @QUERY
	EXEC (@QUERY)

END
GO
