USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: ZP_SET_AIR_CUSTOMER_DSR_UPDATE
■ DESCRIPTION				: 업로드된 DSR 정산 > 항공비 자동 적용
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: 

	EXEC DIABLO.schedule.ZP_SET_AIR_CUSTOMER_DSR_UPDATE 

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2021-09-23		김성호			최초생성
   2022-01-06		김성호			법인팀 제한 조건 삭제
   2022-05-20		김성호			행사 정산 마감 시 업데이트 금지
================================================================================================================*/ 
CREATE PROC [schedule].[ZP_SET_AIR_CUSTOMER_DSR_UPDATE]
(
	@START_DATE DATETIME = NULL,
	@END_DATE DATETIME = NULL
	--@TARGET_DATE DATE = NULL
)
AS
BEGIN
	
	DECLARE @PRO_CODE PRO_CODE, @AIR_SEQ_NO INT;
	DECLARE @PRO_LIST TABLE (PRO_CODE PRO_CODE PRIMARY KEY, AIR_SEQ_NO INT);
	
	-- 기준일자 default
	-- START: O / END: O => 입력일자 그대로
	-- START: O / END: X => 입력일자부터 그 다음날까지
	-- START: X / END: X => 어제부터 오늘까지
	-- START: X / END: O => 실행 중지
	IF @END_DATE IS NULL
	BEGIN
		IF @START_DATE IS NULL
		BEGIN
			SELECT
				@START_DATE = CONVERT(VARCHAR(10), (GETDATE() - 1), 120),
				@END_DATE = CONVERT(VARCHAR(10), (GETDATE() + 1), 120);
		END
		ELSE
		BEGIN
			SELECT
				@END_DATE = CONVERT(VARCHAR(10), (@START_DATE + 2), 120);
		END  
	END
	ELSE IF @START_DATE IS NULL
	BEGIN
		RETURN;
	END
	
	--SET @TARGET_DATE = ISNULL(@TARGET_DATE, GETDATE());
	
	--public enum TicketStatusEnum { 전체 = 0, Normal = 1, Void, Refund };
	
	-- 행사코드 수집
	INSERT @PRO_LIST (PRO_CODE, AIR_SEQ_NO)
		SELECT A.PRO_CODE, A.AIR_SEQ_NO
	FROM (
		SELECT DT.PRO_CODE
			, (SELECT TOP 1 AIR_SEQ_NO FROM SET_AIR_AGENT SAA WITH(NOLOCK) WHERE SAA.PRO_CODE = DT.PRO_CODE ORDER BY AIR_SEQ_NO) AIR_SEQ_NO
		FROM DSR_TICKET DT WITH(NOLOCK)
		INNER JOIN RES_MASTER_damo RM WITH(NOLOCK) ON DT.RES_CODE = RM.RES_CODE --AND RM.NEW_TEAM_CODE NOT IN (524)	-- 법인팀 제외
		--WHERE DT.NEW_DATE > DATEADD(DD, -1, @TARGET_DATE) AND DT.NEW_DATE < @TARGET_DATE
		WHERE DT.NEW_DATE >= @START_DATE AND DT.NEW_DATE < @END_DATE
			AND DT.RES_CODE LIKE 'RT%' AND DT.CLOSE_YN = 'N' AND DT.TICKET_STATUS = 1 AND RM.PRICE_SEQ = 1
	) A
	GROUP BY A.PRO_CODE, A.AIR_SEQ_NO;
	
	
	DECLARE USER_CURSOR CURSOR FOR
	
		SELECT PL.PRO_CODE, PL.AIR_SEQ_NO
		FROM @PRO_LIST PL

	OPEN USER_CURSOR

	FETCH NEXT FROM USER_CURSOR	INTO @PRO_CODE, @AIR_SEQ_NO

	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		IF NOT EXISTS(SELECT 1 FROM dbo.SET_MASTER WHERE PRO_CODE = @PRO_CODE AND SET_STATE = 2) -- 2: 정산마감
		BEGIN
				-- DSR 반영 유무 초기화
			UPDATE SET_AIR_CUSTOMER SET DSR_YN = 'N' WHERE PRO_CODE = @PRO_CODE AND AIR_SEQ_NO = @AIR_SEQ_NO;

			-- DSR 과 매칭되는 데이타를 가져온다.
			UPDATE SET_AIR_CUSTOMER
			SET
				FARE_PRICE = X.FARE,
				DC_PRICE = X.DISCOUNT,
				NET_PRICE = X.NET_PRICE + X.TAX_PRICE,
				COM_RATE = X.COMM_RATE,
				COMM_PRICE = X.COMM_PRICE,
				TAX_PRICE = X.TAX_PRICE,
				PAY_PRICE = X.FARE - X.DISCOUNT + X.TAX_PRICE- X.COMM_PRICE,
				VAT_PRICE = X.COMM_PRICE * 0.1,
				PROFIT = X.COMM_PRICE,
				DSR_YN = 'Y'
			FROM 
			(
				SELECT 
					PRO_CODE,
					RES_CODE,
					RES_SEQ_NO,
					SUM(ISNULL(A.FARE, 0)) AS FARE,
					SUM(ISNULL(A.DISCOUNT, 0)) AS DISCOUNT,
					SUM(ISNULL(A.NET_PRICE, 0)) AS NET_PRICE,
					SUM(ISNULL(A.TAX_PRICE, 0)) AS TAX_PRICE,
					MAX(ISNULL(A.COMM_RATE, '')) AS COMM_RATE,
					SUM(ISNULL(A.COMM_PRICE, 0)) AS COMM_PRICE
				FROM DSR_TICKET A
				WHERE 
					A.PRO_CODE = @PRO_CODE
					AND A.TICKET_STATUS = 1 AND A.CONJ_YN = 'N'
					AND A.AIRLINE_CODE = (SELECT AIRLINE_CODE FROM SET_AIR_AGENT WHERE PRO_CODE = @PRO_CODE AND AIR_SEQ_NO = @AIR_SEQ_NO)
				GROUP BY A.PRO_CODE, A.RES_CODE, A.RES_SEQ_NO
			) X
			WHERE SET_AIR_CUSTOMER.PRO_CODE = @PRO_CODE 
				AND SET_AIR_CUSTOMER.AIR_SEQ_NO = @AIR_SEQ_NO
				AND X.PRO_CODE = @PRO_CODE 
				AND X.RES_CODE = SET_AIR_CUSTOMER.RES_CODE 
				AND X.RES_SEQ_NO = SET_AIR_CUSTOMER.RES_SEQ_NO
				AND SET_AIR_CUSTOMER.FARE_TYPE NOT IN (6,7,8,9)

			-- 환불데이타를 초기화한다.
			-- DSR 과 매칭되는 데이타를 가져온다.
			UPDATE SET_AIR_CUSTOMER
			SET 
				FARE_TYPE = 6,
				FARE_PRICE = 0,
				DC_PRICE = 0,
				NET_PRICE = 0,
				COM_RATE = 0,
				COMM_PRICE = 0,
				TAX_PRICE = 0,
				PAY_PRICE = 0,
				VAT_PRICE = 0,
				PROFIT = 0,
				DSR_YN = 'Y'
			FROM DSR_TICKET A
			INNER JOIN DSR_REFUND B ON B.TICKET = A.TICKET
			WHERE 
				SET_AIR_CUSTOMER.PRO_CODE = @PRO_CODE 
				AND SET_AIR_CUSTOMER.AIR_SEQ_NO = @AIR_SEQ_NO
				AND A.PRO_CODE = @PRO_CODE AND A.RES_CODE = SET_AIR_CUSTOMER.RES_CODE AND A.RES_SEQ_NO = SET_AIR_CUSTOMER.RES_SEQ_NO
				AND A.TICKET_STATUS = 1 AND A.CONJ_YN = 'N'
				AND A.AIRLINE_CODE = (SELECT AIRLINE_CODE FROM SET_AIR_AGENT WHERE PRO_CODE = @PRO_CODE AND AIR_SEQ_NO = SET_AIR_CUSTOMER.AIR_SEQ_NO)
				AND SET_AIR_CUSTOMER.FARE_TYPE NOT IN (6,7,8,9)

			-- 예외로된 데이타를 초기화한다.
			UPDATE SET_AIR_CUSTOMER
			SET DSR_YN = 'Y'
			WHERE PRO_CODE = @PRO_CODE AND AIR_SEQ_NO = @AIR_SEQ_NO AND SET_AIR_CUSTOMER.FARE_TYPE IN (6,7,8,9)
		END
		
		FETCH NEXT FROM USER_CURSOR	INTO @PRO_CODE, @AIR_SEQ_NO
	END

	CLOSE USER_CURSOR
	DEALLOCATE USER_CURSOR
	
END

GO
