USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*================================================================================================================
■ USP_NAME					: XP_WEB_RES_AIR_INFO_SELECT
■ DESCRIPTION				: 항공 예약된 상품 정보
■ INPUT PARAMETER			:
■ OUTPUT PARAMETER			: 
■ EXEC						: 
	XP_WEB_RES_AIR_INFO_SELECT 'RT1704045185' 
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2014-02-14		박형만			최초생성
   2015-03-03		김성호			주민번호 삭제, 생년월일 사용
   2015-06-24		박형만			국내항공 할인정보 조회
   2016-08-26		박형만			ROUTING_TYPE 항공 루팅 타입 함수로 조회 
   2016-10-21		박형만			FREE_BAG_INFO 무료 수하물 정보 추가 
   2016-11-15		박형만			출발자 RES_STATE = 0 정상만나오기 
   2017-02-14		박형만			DC_SUM_PRICE 추가 
   2017-02-20		박형만			CUSTOMER 에 TOTAL_PRICE  추가 
   2017-03-02		박형만			FARE_SEAT_TYPE 추가 
   2017-03-15		박형만			ADT_TAX ,CHD_TAX ,INF_TAX 추가 ( RES_CUSTOMER.SALE_PRICE 에 TAX 가 포함되어 있으므로(FARE+TAX) 분리 해서 가져올때 사용하기 위함 ) 
   2017-03-16		박형만			출발자 DSR_TICKET 정보 추가 ,취소요청여부 추가 CXL_REQ . TOTAL_SUM_PRICE 추가 . 티몬 가격 재 계산 
   2017-04-05		박형만			FARE_XML 추가 
   2017-04-27		박형만			티몬은 DC 제외 
   2018-06-04		박형만			생년월일 CUS_CUSTOMER 에서 REs_CUSTOMER 에서 불러오도록 (고객병합관련) 
   2021-03-29		홍종우			SYSTEM_STATE 추가
================================================================================================================*/ 
CREATE PROC [dbo].[XP_WEB_RES_AIR_INFO_SELECT]
	@RES_CODE RES_CODE 
AS 
BEGIN 


	--DECLARE @RES_CODE RES_CODE 
	----SET @RES_CODE = 'RT1307098920'
	--SET @RES_CODE = 'RT1208014636'
	--예약및 스케쥴 정보 

	DECLARE @PROVIDER INT 
	SELECT @PROVIDER = PROVIDER 
	FROM RES_MASTER_damo  WITH(NOLOCK)
	WHERE RES_CODE = @RES_CODE 

	SELECT 
		A.CUS_NO,
		A.RES_CODE,			A.RES_STATE,		A.RES_NAME,			A.PRO_NAME , 
		A.LAST_PAY_DATE,	A.DEP_DATE,			A.NEW_DATE,			A.CUS_RESPONSE,
		--E.TOTAL_PRICE,		E.RES_COUNT,		E.RES_ADULT_COUNT,
		--E.RES_CHILD_COUNT,	E.RES_INFANT_COUNT,
		--//F.COMPARTMENT,		ISNULL(F.FARE_CODE,'') AS FARE_CODE,
		C.KOR_NAME AS DEP_AIRPORT_NAME,			B.PNR_CODE1,            B.PNR_CODE2,
		D.KOR_NAME AS ARR_AIRPORT_NAME,			B.AIR_GDS,              B.AIR_GDS2,
		B.TTL_DATE,			B.AUTO_ISSUE_YN,	B.FARE_SEAT_TYPE,		B.OPEN_YN,
		B.FARE_ID_KEY,		B.FARE_KEY,			B.ROUTE_ID_NBR,         B.INTER_YN,		--B.ROUTING_TYPE , 
		dbo.FN_RES_AIR_GET_RTG_TYPE(A.RES_CODE) AS ROUTING_TYPE,
		--A.SOC_NUM1,			damo.dbo.dec_varchar('DIABLO','dbo.RES_MASTER','SOC_NUM2', A.SEC_SOC_NUM2) AS SOC_NUM2 ,
		A.BIRTH_DATE,		A.GENDER,
		/*ISNULL(H.PRO_CODE,'')*/ A.PRO_CODE,		A.CUS_RESPONSE,
		dbo.FN_RES_GET_PAY_STATE(A.RES_CODE) AS PAY_STATE,
		--(CASE WHEN E.TAX_PRICE = 0 THEN 'N' ELSE 'Y' END) AS TAX_YN,
		(CASE WHEN G.SEAT_OK_COUNT > 0 THEN 'N' ELSE 'Y' END) AS SEAT_YN,
		--(CASE WHEN F.MAX_STAY IS NULL THEN H.MAX_STAY ELSE F.MAX_STAY END) AS MAX_STAY,
		--dbo.FN_AIR_GET_BOOKING_TAX_PRICE(F.REGION_CODE) AS BOOKING_TAX,
		(CASE WHEN B.AIR_PRO_TYPE = 0 THEN 'Y' ELSE 'N' END) AS REAL_YN,
		--(CASE WHEN F.ETICKET_YN IS NULL THEN 'Y' ELSE ISNULL(F.ETICKET_YN,'Y') END) AS ETICKET_YN,
		dbo.FN_RES_GET_PAY_PRICE(A.RES_CODE) AS [PAY_PRICE],
		(SELECT STUFF((
			SELECT ('-' + DEP_CITY_NAME + '(' + DEP_AIRPORT_CODE + ')' + '-' + ARR_CITY_NAME + '(' + ARR_AIRPORT_CODE + ')') AS [text()]
			FROM (
				SELECT SEQ_NO, DEP_AIRPORT_CODE, ARR_AIRPORT_CODE
					, (SELECT KOR_NAME FROM PUB_CITY WITH(NOLOCK) WHERE CITY_CODE IN (SELECT CITY_CODE FROM PUB_AIRPORT WITH(NOLOCK) WHERE AIRPORT_CODE = DEP_AIRPORT_CODE)) AS [DEP_CITY_NAME]
					, (SELECT KOR_NAME FROM PUB_CITY WITH(NOLOCK) WHERE CITY_CODE IN (SELECT CITY_CODE FROM PUB_AIRPORT WITH(NOLOCK) WHERE AIRPORT_CODE = ARR_AIRPORT_CODE)) AS [ARR_CITY_NAME]
				FROM RES_SEGMENT WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE
			) A
			FOR XML PATH('')
		), 1, 1, '')) AS [JOURNEY]
		, B.RULE_XML , B.FARE_XML 
		, A.NEW_CODE  AS EMP_CODE , (SELECT KOR_NAME FROM EMP_MASTER WHERE EMP_CODE = A.NEW_CODE ) AS EMP_NAME 
		, B.ADT_TAX , B.CHD_TAX , B.INF_TAX 
		, B.CXL_REQ_YN  , B.CXL_REQ_DATE 
		,CASE A.PRO_TYPE WHEN 2 THEN (CASE WHEN L.PNR_SEQNO IS NOT NULL THEN 'NA' ELSE 'OA' END) ELSE '' END SYSTEM_STATE
		,L.PNR_SEQNO
	FROM RES_MASTER_damo A WITH(NOLOCK)
	INNER JOIN RES_AIR_DETAIL B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
	INNER JOIN PUB_AIRPORT C WITH(NOLOCK) ON B.DEP_DEP_AIRPORT_CODE = C.AIRPORT_CODE
	INNER JOIN PUB_AIRPORT D WITH(NOLOCK) ON B.DEP_ARR_AIRPORT_CODE = D.AIRPORT_CODE
	--LEFT JOIN 
	--	(
	--		SELECT 
	--			RES_CODE,
	--			COUNT(RES_CODE) AS [RES_COUNT],
	--			SUM(CASE AGE_TYPE WHEN 0 THEN 1 END) AS [RES_ADULT_COUNT],
	--			SUM(CASE AGE_TYPE WHEN 1 THEN 1 END) AS [RES_CHILD_COUNT],
	--			SUM(CASE AGE_TYPE WHEN 2 THEN 1 END) AS [RES_INFANT_COUNT],
	--			SUM(TAX_PRICE) AS [TAX_PRICE],
	--			SUM(SALE_PRICE - DC_PRICE + CHG_PRICE + TAX_PRICE + PENALTY_PRICE) AS [TOTAL_PRICE]
	--		FROM RES_CUSTOMER_DAMO WITH(NOLOCK)
	--		WHERE RES_CODE = @RES_CODE AND RES_STATE IN (0, 3)
	--		GROUP BY RES_CODE
	--	) E ON E.RES_CODE = A.RES_CODE AND A.RES_STATE <= 7
	--LEFT JOIN FARE_MASTER F ON F.FARE_CODE = B.FARE_CODE
	--LEFT JOIN FARE_GROUP H ON H.PRO_CODE = B.PRO_CODE
	INNER JOIN 
		(
			SELECT RES_CODE, SUM(CASE WHEN SEAT_STATUS = 'HK' THEN 0 ELSE 1 END) AS SEAT_OK_COUNT
			FROM RES_SEGMENT WITH(NOLOCK)
			GROUP BY RES_CODE
		) G ON G.RES_CODE = A.RES_CODE
		
	LEFT JOIN INTERFACE.TB_VGT_RV100 L
      ON A.RES_CODE = L.IF_SYS_RSV_NO		
	WHERE A.RES_CODE = @RES_CODE;
	
	--세그정보
	SELECT 
		A.DIRECTION,
		ROW_NUMBER() OVER( PARTITION BY A.DIRECTION ORDER BY A.DIRECTION , A.SEQ_NO) AS SEG_NUM ,
		(SELECT COUNT(*) FROM RES_SEGMENT WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE AND DIRECTION = A.DIRECTION ) AS SEG_CNT,
		CASE WHEN ROW_NUMBER() OVER( PARTITION BY A.DIRECTION ORDER BY A.DIRECTION , A.SEQ_NO) 
			= (SELECT COUNT(*) FROM RES_SEGMENT WHERE RES_CODE = A.RES_CODE AND DIRECTION = A.DIRECTION ) 
			THEN 'Y' ELSE 'N' END AS LAST_YN,
		A.RES_CODE,			A.SEQ_NO,			A.DEP_AIRPORT_CODE,		A.ARR_AIRPORT_CODE,	
		A.DEP_CITY_CODE,	A.ARR_CITY_CODE,	A.AIRLINE_CODE,			A.SEAT_STATUS,
		A.FLIGHT,			A.NEW_DATE,			A.NEW_CODE,				A.[START_DATE],
		A.END_DATE,			A.FLYING_TIME,		A.GROUND_TIME,			A.AIRLINE_PNR,
		A.BKG_CLASS,		A.DIRECTION,		A.OP_AIRLINE_CODE,
		dbo.FN_GET_TIME_BY_MINUTE(DATEDIFF(MINUTE, A.END_DATE,(SELECT TOP 1 START_DATE FROM RES_SEGMENT WITH(NOLOCK) 
			WHERE RES_CODE = A.RES_CODE AND DIRECTION = A.DIRECTION AND SEQ_NO > A.SEQ_NO ORDER BY SEQ_NO)) )AS WAIT_TIME ,
		(SELECT TOP 1 GROUND_TIME FROM RES_TRANSIT_SEGMENT WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE AND SEQ_NO = A.SEQ_NO ORDER BY [NO] DESC) AS [TRANSIT_GROUND_TIME],
		(
			SELECT KOR_NAME FROM PUB_CITY WITH(NOLOCK) WHERE CITY_CODE IN (
				SELECT TOP 1 DEP_CITY_CODE FROM RES_TRANSIT_SEGMENT WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE AND SEQ_NO = A.SEQ_NO ORDER BY [NO] DESC
			)
		) AS [TRANSIT_CITY_NAME],
		(SELECT KOR_NAME FROM PUB_AIRLINE WITH(NOLOCK) WHERE AIRLINE_CODE = A.AIRLINE_CODE) AS AIRLINE_NAME,
		(SELECT KOR_NAME FROM PUB_AIRLINE WITH(NOLOCK) WHERE AIRLINE_CODE = A.OP_AIRLINE_CODE) AS OP_AIRLINE_NAME,
		(SELECT KOR_NAME FROM PUB_AIRPORT WITH(NOLOCK) WHERE AIRPORT_CODE = A.DEP_AIRPORT_CODE) AS DEP_AIRPORT_NAME,
		(SELECT KOR_NAME FROM PUB_AIRPORT WITH(NOLOCK) WHERE AIRPORT_CODE = A.ARR_AIRPORT_CODE) AS ARR_AIRPORT_NAME,
		(SELECT KOR_NAME FROM PUB_CITY WITH(NOLOCK) WHERE CITY_CODE IN (SELECT CITY_CODE FROM PUB_AIRPORT WITH(NOLOCK) WHERE AIRPORT_CODE = A.DEP_AIRPORT_CODE)) AS [DEP_CITY_NAME],
		(SELECT KOR_NAME FROM PUB_CITY WITH(NOLOCK) WHERE CITY_CODE IN (SELECT CITY_CODE FROM PUB_AIRPORT WITH(NOLOCK) WHERE AIRPORT_CODE = A.ARR_AIRPORT_CODE)) AS [ARR_CITY_NAME],
		(CASE WHEN SEAT_STATUS = 'HK' THEN 'Y' ELSE 'N' END) AS SEAT_YN	 ,
		A.FREE_BAG_INFO ,
		(SELECT TOP 1 FARE_SEAT_TYPE FROM RES_AIR_DETAIL WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE ) AS FARE_SEAT_TYPE 
	FROM RES_SEGMENT A WITH(NOLOCK)
	WHERE A.RES_CODE = @RES_CODE
	ORDER BY A.SEQ_NO

	--스케쥴요금정보
	IF @PROVIDER = 36 
	BEGIN
		--티몬 스케쥴요금정보 , RES_AIR_DETAIL 의 ADT_TAX 컬럼을 이용함, SALE_PRICE 에서 ADT_TAX 금액 뺀다 . ADT_TAX 변경시 SALE_PRICE 가 틀릴수 있으므로 주의!!!!
		-- dc 금액은 참좋은 쿠폰부담액이므로 계산 하지 않는다 
		SELECT 
			A.RES_CODE , AGE_TYPE , 
			--COUNT(RES_CODE) AS [RES_COUNT],
			COUNT(AGE_TYPE) AS RES_COUNT ,
			SUM(SALE_PRICE-(CASE WHEN AGE_TYPE = 1 THEN C.CHD_TAX WHEN AGE_TYPE = 2 THEN C.INF_TAX ELSE C.ADT_TAX END)) AS SALE_SUM_PRICE , --  AIR_DETAIL 의 TAX 빼기 
			SUM(SALE_PRICE-(CASE WHEN AGE_TYPE = 1 THEN C.CHD_TAX WHEN AGE_TYPE = 2 THEN C.INF_TAX ELSE C.ADT_TAX END)) AS BASE_SUM_PRICE ,
			SUM(TAX_PRICE) AS FUEL_SUM_PRICE , -- CUSTOMER 의 TAX는 FUEL 임 
			SUM((CASE WHEN AGE_TYPE = 1 THEN C.CHD_TAX WHEN AGE_TYPE = 2 THEN C.INF_TAX ELSE C.ADT_TAX END)) AS TAX_SUM_PRICE , -- AIR_DETAIL 의 TAX 임 변경시 주의!!
			SUM(CHG_PRICE) AS SVC_SUM_CHARGE ,
			SUM(DC_PRICE) AS DC_SUM_PRICE ,
			SUM(SALE_PRICE + CHG_PRICE + TAX_PRICE + PENALTY_PRICE) AS [TOTAL_SUM_PRICE]
		FROM RES_CUSTOMER_DAMO A WITH(NOLOCK)
			INNER JOIN RES_MASTER_DAMO B WITH(NOLOCK)
				ON A.RES_CODE = B.RES_CODE 
			INNER JOIN RES_AIR_DETAIL C WITH(NOLOCK)
				ON A.RES_CODE = C.RES_CODE 
		WHERE A.RES_CODE = @RES_CODE AND A.RES_STATE IN (0, 3)
		GROUP BY A.RES_CODE , A.AGE_TYPE
		ORDER BY A.AGE_TYPE ASC 
	END 
	ELSE 
	BEGIN
		--스케쥴요금정보
		SELECT 
			RES_CODE , AGE_TYPE , 
			--COUNT(RES_CODE) AS [RES_COUNT],
			COUNT(AGE_TYPE) AS RES_COUNT ,
			SUM(SALE_PRICE) AS SALE_SUM_PRICE ,
			SUM(SALE_PRICE-FIRST_QCHARGE) AS BASE_SUM_PRICE ,
			SUM(FIRST_QCHARGE) AS FUEL_SUM_PRICE ,
			SUM(TAX_PRICE) AS TAX_SUM_PRICE ,
			SUM(CHG_PRICE) AS SVC_SUM_CHARGE ,
			SUM(DC_PRICE) AS DC_SUM_PRICE ,
			SUM(SALE_PRICE - DC_PRICE + CHG_PRICE + TAX_PRICE + PENALTY_PRICE) AS [TOTAL_PRICE]
		FROM RES_CUSTOMER_DAMO A WITH(NOLOCK)
		WHERE RES_CODE = @RES_CODE AND RES_STATE IN (0, 3)
		GROUP BY RES_CODE , AGE_TYPE
		ORDER BY AGE_TYPE ASC 
	END 

	--예약자정보
	SELECT A.* , B.GENDER, B.BIRTH_DATE 
	FROM RES_MASTER_DAMO A WITH(NOLOCK)
		LEFT JOIN CUS_CUSTOMER_DAMO B WITH(NOLOCK)
			ON A.CUS_NO = B.CUS_NO
	WHERE A.RES_CODE = @RES_CODE;

	--출발자정보
	SELECT
		A.RES_CODE, A.SEQ_NO, A.CUS_NAME, A.GENDER, A.LAST_NAME, A.FIRST_NAME
		, B.BIRTH_DAY , A.BIRTH_DATE--, A.SOC_NUM1
		--, DAMO.DBO.DEC_VARCHAR('DIABLO', 'DBO.RES_CUSTOMER', 'SOC_NUM2', A.SEC_SOC_NUM2) AS SOC_NUM2
		, (A.SALE_PRICE - A.DC_PRICE + A.CHG_PRICE + A.PENALTY_PRICE) AS SALE_SUM_PRICE	   --요금
		, A.SALE_PRICE 
		, A.CHG_PRICE , A.DC_PRICE
		, A.TAX_PRICE, A.AGE_TYPE
		, (A.SALE_PRICE - A.DC_PRICE + A.CHG_PRICE + TAX_PRICE + A.PENALTY_PRICE) AS TOTAL_PRICE 
		--, B.STAY_ADDRESS, B.STAY_TEL
		--, B.DEP_AIRLINE_CODE , E1.KOR_NAME AS DEP_AIRLINE_NAME 
		--, B.ARR_AIRLINE_CODE , E2.KOR_NAME AS ARR_AIRLINE_NAME 
		,  B.DEP_MILEAGE_REF ,B.DEP_DC_NAME ,B.DEP_DC_RATE
		,  B.ARR_MILEAGE_REF, B.ARR_DC_NAME, B.ARR_DC_RATE
		 , A.VISA_YN  , A.PASS_EXPIRE , A.PASS_ISSUE
		, DAMO.DBO.DEC_VARCHAR('DIABLO', 'DBO.RES_CUSTOMER', 'PASS_NUM', A.SEC_PASS_NUM) AS PASS_NUM
		,( SELECT TOP 1 TICKET FROM  DSR_TICKET WHERE RES_CODE = A.RES_CODE AND RES_SEQ_NO = A.SEQ_NO )  AS TICKET_NUMBER
	FROM RES_CUSTOMER_DAMO A WITH(NOLOCK)
		LEFT JOIN RES_AIR_CUSTOMER_DETAIL B WITH(NOLOCK)
			ON A.RES_CODE = B.RES_CODE 
			AND A.SEQ_NO = B.SEQ_NO 
		LEFT JOIN CUS_CUSTOMER_DAMO C WITH(NOLOCK)
			ON A.CUS_NO = C.CUS_NO
		--LEFT JOIN PUB_AIRLINE E1 WITH(NOLOCK)
		--	ON E1.AIRLINE_CODE = B.DEP_AIRLINE_CODE
		--LEFT JOIN PUB_AIRLINE E2 WITH(NOLOCK)
		--	ON E2.AIRLINE_CODE = B.ARR_AIRLINE_CODE
	WHERE A.RES_CODE =  @RES_CODE
	AND A.RES_STATE = 0 ;

	--담당자정보
	SELECT 
		EMP_CODE, KOR_NAME, INNER_NUMBER1, INNER_NUMBER2, INNER_NUMBER3, 
		CASE WHEN INNER_NUMBER1 IS NOT NULL AND INNER_NUMBER2 IS NOT NULL AND INNER_NUMBER3 IS NOT NULL 
			THEN ISNULL(INNER_NUMBER1,'')+'-'+ISNULL(INNER_NUMBER2,'')+'-'+ISNULL(INNER_NUMBER3,'') END AS INNER_NUMBER, 
		FAX_NUMBER1, FAX_NUMBER2, FAX_NUMBER3, EMAIL, GREETING , TEAM_CODE,
		CASE WHEN FAX_NUMBER1 IS NOT NULL AND FAX_NUMBER2 IS NOT NULL AND FAX_NUMBER3 IS NOT NULL 
			THEN ISNULL(FAX_NUMBER1,'')+'-'+ISNULL(FAX_NUMBER2,'')+'-'+ISNULL(FAX_NUMBER3,'') END AS FAX_NUMBER, 
		DBO.XN_COM_GET_TEAM_NAME(EMP_CODE) AS TEAM_NAME ,
		( SELECT KEY_NUMBER FROM EMP_TEAM WHERE TEAM_CODE = A.TEAM_CODE )  AS KEY_NUMBER  
	FROM EMP_MASTER A WITH(NOLOCK)
	WHERE EMP_CODE = (SELECT NEW_CODE FROM RES_MASTER_damo WITH(NOLOCK) WHERE RES_CODE = @RES_CODE )

END 



GO
