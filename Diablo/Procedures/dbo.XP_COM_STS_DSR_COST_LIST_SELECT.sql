USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*================================================================================================================
■ USP_NAME					: XP_COM_STS_DSR_COST_LIST_SELECT
■ DESCRIPTION				: BTMS DSR 항공권 비용현황 리스트 검색
■ INPUT PARAMETER			: 
	@START_DATE		DATE	: 발권일 시작점
	@END_DATE		DATE	: 발권일 종료점
■ OUTPUT PARAMETER			: 
■ EXEC						: 
   DBO.XP_COM_STS_DSR_COST_LIST_SELECT  '2016-01-01', '2016-12-31', '93971', '', '','', 'I'
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ Change History                   
------------------------------------------------------------------------------------------------------------------
   Date				Author			Description           
------------------------------------------------------------------------------------------------------------------   
	2016-06-14		이유라			최초생성
	2016-09-29		이유라			발권일 외 출발일 조회 추가 (@DATE_TYPE 추가로 구분)
	2016-10-11		이유라			합계계산식수정 (환불수수료 마이너스 -> 플러스)
	2016-10-12		이유라			티켓 조건 수정 (컨정션티켓, 보이드티켓도 나오도록 조건절 삭제)
	2016-10-19		이유라			발권수수료 항목추가
	2016-11-30		이유라			총합계 계산식에서 환불발권수수료 제외
	2016-12-26		이유라			날짜별 GROUPBY 수정
	2017-05-12		박형만			티켓건수정렬 -> 합계금액순정렬
	2018-01-19		박형만			RES_AIR_DETAIL JOIN 제거 ( DSR등록된 RP 기타 예약 건수 나오도록 )
================================================================================================================*/ 
CREATE PROC [dbo].[XP_COM_STS_DSR_COST_LIST_SELECT]
(
	@START_DATE		VARCHAR(10),		
	@END_DATE		VARCHAR(10),
	@AGT_CODE		VARCHAR(10),
	@TEAM_SEQ		INT,
	@EMP_SEQ		INT,
	@ROUTE_TYPE		VARCHAR(1),
	@DATE_TYPE		VARCHAR(1)
)
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	DECLARE @SQLSTRING NVARCHAR(MAX), @PARMDEFINITION NVARCHAR(1000), @WHERE NVARCHAR(MAX) = '', @GROUP NVARCHAR(100), @GROUP2 NVARCHAR(100), @GROUP3 NVARCHAR(100);

	-- 검색 조건 만들기
	IF LEN(@AGT_CODE) > 0
	BEGIN
		SET @WHERE = @WHERE + ' AND D.AGT_CODE = @AGT_CODE'
		SET @GROUP = ' H.KOR_NAME, I.TEAM_NAME'
		SET @GROUP2 = ' A.KOR_NAME, A.TEAM_NAME'
	END
	ELSE
	BEGIN 
		SET @GROUP = ' H.KOR_NAME '
		SET @GROUP2 = ' A.KOR_NAME '
	END

	IF @EMP_SEQ > 0
	BEGIN
		SET @WHERE = @WHERE + ' AND E.NEW_SEQ = @EMP_SEQ'
	END
	ELSE IF @TEAM_SEQ > 0
	BEGIN
		SET @WHERE = @WHERE + ' AND F.TEAM_SEQ = @TEAM_SEQ'
	END

	IF @ROUTE_TYPE = 'I'
	BEGIN 
		SET @WHERE = @WHERE + ' AND A.CITY_CODE NOT IN (SELECT CITY_CODE FROM PUB_CITY WHERE NATION_CODE = ''KR'') '
	END
	ELSE IF @ROUTE_TYPE = 'D'
	BEGIN 
		SET @WHERE = @WHERE + ' AND A.CITY_CODE IN (SELECT CITY_CODE FROM PUB_CITY WHERE NATION_CODE = ''KR'') '
	END

	IF @START_DATE IS NOT NULL AND @END_DATE IS NOT NULL
	BEGIN 
		IF @DATE_TYPE = 'I'
		BEGIN
			SET @WHERE = @WHERE + ' AND A.ISSUE_DATE >= @START_DATE AND A.ISSUE_DATE < DATEADD(DAY, 1, CONVERT(DATETIME, @END_DATE, 121)) '	
		END
		IF @DATE_TYPE = 'S'
		BEGIN
			SET @WHERE = @WHERE + ' AND A.START_DATE >= @START_DATE AND A.START_DATE < DATEADD(DAY, 1, CONVERT(DATETIME, @END_DATE, 121)) '			
		END
	END

	IF LEN(@WHERE) > 10
	BEGIN
		SELECT @WHERE = (N'WHERE ' + SUBSTRING(@WHERE, 5, 1000))
	END

	IF @DATE_TYPE = 'I'
	BEGIN
		SET @GROUP3 = ' A.ISSUE_DATE ';
	END
	IF @DATE_TYPE = 'S'
	BEGIN
		SET @GROUP3 = ' A.START_DATE ';
	END

	SET @SQLSTRING = N'

		DECLARE @TOTAL_TICKET INT, @TOTAL_PRICE DECIMAL;

		WITH LIST AS (
			SELECT 
				--(SELECT COUNT(*) FROM RES_AIR_DETAIL Z WHERE A.RES_CODE = Z.RES_CODE ) AS TICKET_COUNT,
				--(SELECT ISNULL(A.NET_PRICE,0) + ISNULL(A.TAX_PRICE,0) FROM RES_AIR_DETAIL Z WHERE A.RES_CODE = Z.RES_CODE ) AS TICKET_PRICE,
				1 AS TICKET_COUNT,
				ISNULL(A.NET_PRICE,0) + ISNULL(A.TAX_PRICE,0) AS TICKET_PRICE,
				ROW_NUMBER() OVER (PARTITION BY A.RES_CODE, A.RES_SEQ_NO ORDER BY A.START_DATE) AS [ROWNUMBER],
				ISNULL(J.CHG_PRICE,0) AS CHG_PRICE
			FROM DSR_TICKET A WITH(NOLOCK) 
			JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE AND B.PROVIDER = ''33''
			--JOIN RES_AIR_DETAIL C WITH(NOLOCK) ON A.RES_CODE = C.RES_CODE 
			JOIN COM_BIZTRIP_DETAIL D WITH(NOLOCK) ON B.RES_CODE = D.RES_CODE
			JOIN COM_BIZTRIP_MASTER E WITH(NOLOCK) ON D.AGT_CODE = E.AGT_CODE AND D.BT_CODE = E.BT_CODE
			LEFT JOIN COM_EMPLOYEE F WITH(NOLOCK) ON E.AGT_CODE = F.AGT_CODE AND E.NEW_SEQ = F.EMP_SEQ
			LEFT JOIN DSR_REFUND G WITH(NOLOCK) ON A.TICKET = G.TICKET	
			JOIN RES_CUSTOMER_damo J WITH(NOLOCK) ON A.RES_CODE = J.RES_CODE AND A.RES_SEQ_NO = J.SEQ_NO
			' + @WHERE + N'
		)
		SELECT 
			@TOTAL_TICKET = (CASE WHEN ISNULL(SUM(A.TICKET_COUNT),0) = 0 THEN 1 ELSE ISNULL(SUM(A.TICKET_COUNT),0) END),  
			@TOTAL_PRICE = (CASE WHEN ISNULL(SUM(A.TICKET_PRICE),0) = 0 THEN 1 ELSE ISNULL(SUM(A.TICKET_PRICE),0) END)
		FROM LIST A ;

		WITH LIST AS (
			SELECT 
				' + @GROUP3 + N',
				A.TICKET,
				ISNULL(A.FARE,0) AS FARE,
				ISNULL(A.DISCOUNT,0) AS DISCOUNT,
				ISNULL(A.NET_PRICE,0) AS NET_PRICE,
				ISNULL(A.TAX_PRICE,0) AS TAX_PRICE, 
				ISNULL(A.COMM_PRICE,0) AS COMM_PRICE, 
				ISNULL(A.NET_PRICE,0) + ISNULL(A.TAX_PRICE,0) AS PRICE,
				G.TICKET AS CANCEL_TICKET,
				ISNULL(G.CASH_PRICE,0) + ISNULL(G.CARD_PRICE,0) AS CANCEL_PRICE, 
				ISNULL(G.CANCEL_CHARGE,0) AS CANCEL_CHARGE,
				ISNULL(A.NET_PRICE,0) + ISNULL(A.TAX_PRICE,0) - ISNULL(G.CASH_PRICE,0) - ISNULL(G.CARD_PRICE,0) AS TOTAL_PRICE,
				ROW_NUMBER() OVER (PARTITION BY A.RES_CODE, A.RES_SEQ_NO ORDER BY A.START_DATE) AS [ROWNUMBER],
				ISNULL(J.CHG_PRICE,0) AS CHG_PRICE
			FROM DSR_TICKET A WITH(NOLOCK) 
			JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE AND B.PROVIDER = ''33''
			--JOIN RES_AIR_DETAIL C WITH(NOLOCK) ON A.RES_CODE = C.RES_CODE 
			JOIN COM_BIZTRIP_DETAIL D WITH(NOLOCK) ON B.RES_CODE = D.RES_CODE
			JOIN COM_BIZTRIP_MASTER E WITH(NOLOCK) ON D.AGT_CODE = E.AGT_CODE AND D.BT_CODE = E.BT_CODE
			LEFT JOIN COM_EMPLOYEE F WITH(NOLOCK) ON E.AGT_CODE = F.AGT_CODE AND E.NEW_SEQ = F.EMP_SEQ
			LEFT JOIN DSR_REFUND G WITH(NOLOCK) ON A.TICKET = G.TICKET	
			JOIN RES_CUSTOMER_damo J WITH(NOLOCK) ON A.RES_CODE = J.RES_CODE AND A.RES_SEQ_NO = J.SEQ_NO
			' + @WHERE + N'	
		)
		SELECT 
			CONVERT(VARCHAR(7),' + @GROUP3 + N',121) AS MONTH_DATE,
			COUNT(A.TICKET) AS TICKET_COUNT,
			CONVERT(FLOAT,COUNT(A.TICKET) / CONVERT(FLOAT,@TOTAL_TICKET) * 100) AS TICKET_SHARE,
			SUM(A.FARE) AS FARE,
			SUM(A.DISCOUNT) AS DISCOUNT,
			SUM(A.NET_PRICE) AS NET_PRICE,
			SUM(A.TAX_PRICE) AS TAX_PRICE,
			SUM(A.COMM_PRICE) AS COMM_PRICE,
			SUM(A.PRICE) AS PRICE,
			CONVERT(FLOAT, SUM(A.PRICE)) / CONVERT(FLOAT,@TOTAL_PRICE) * 100 AS PRICE_SHARE,
			COUNT(A.CANCEL_TICKET) AS CANCEL_COUNT,
			SUM(A.CANCEL_PRICE) AS CANCEL_PRICE,
			SUM(A.CANCEL_CHARGE) AS CANCEL_CHARGE,
			SUM(A.TOTAL_PRICE) + SUM(CASE WHEN A.ROWNUMBER = 1 THEN A.CHG_PRICE ELSE 0 END) AS TOTAL_PRICE,
			SUM(CASE WHEN A.ROWNUMBER = 1 THEN A.CHG_PRICE ELSE 0 END) AS CHG_PRICE
		FROM LIST A WITH(NOLOCK) 
		GROUP BY CONVERT(VARCHAR(7),' + @GROUP3 + N',121)
		ORDER BY MONTH_DATE DESC;
			
		WITH LIST AS (
			SELECT 
				' + @GROUP + N',
				A.TICKET,
				ISNULL(A.FARE,0) AS FARE,
				ISNULL(A.DISCOUNT,0) AS DISCOUNT,
				ISNULL(A.NET_PRICE,0) AS NET_PRICE,
				ISNULL(A.TAX_PRICE,0) AS TAX_PRICE, 
				ISNULL(A.COMM_PRICE,0) AS COMM_PRICE, 
				ISNULL(A.NET_PRICE,0) + ISNULL(A.TAX_PRICE,0) AS PRICE,
				G.TICKET AS CANCEL_TICKET,
				ISNULL(G.CASH_PRICE,0) + ISNULL(G.CARD_PRICE,0) AS CANCEL_PRICE, 
				ISNULL(G.CANCEL_CHARGE,0) AS CANCEL_CHARGE,
				ISNULL(A.NET_PRICE,0) + ISNULL(A.TAX_PRICE,0) - ISNULL(G.CASH_PRICE,0) - ISNULL(G.CARD_PRICE,0) AS TOTAL_PRICE,
				ROW_NUMBER() OVER (PARTITION BY A.RES_CODE, A.RES_SEQ_NO ORDER BY A.START_DATE) AS [ROWNUMBER],
				ISNULL(J.CHG_PRICE,0) AS CHG_PRICE
			FROM DSR_TICKET A WITH(NOLOCK) 
			JOIN RES_MASTER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE AND B.PROVIDER = ''33''
			--JOIN RES_AIR_DETAIL C WITH(NOLOCK) ON A.RES_CODE = C.RES_CODE 
			JOIN COM_BIZTRIP_DETAIL D WITH(NOLOCK) ON B.RES_CODE = D.RES_CODE
			JOIN COM_BIZTRIP_MASTER E WITH(NOLOCK) ON D.AGT_CODE = E.AGT_CODE AND D.BT_CODE = E.BT_CODE
			LEFT JOIN COM_EMPLOYEE F WITH(NOLOCK) ON E.AGT_CODE = F.AGT_CODE AND E.NEW_SEQ = F.EMP_SEQ
			LEFT JOIN DSR_REFUND G WITH(NOLOCK) ON A.TICKET = G.TICKET
			LEFT JOIN AGT_MASTER H WITH(NOLOCK) ON E.AGT_CODE = H.AGT_CODE
			LEFT JOIN COM_TEAM I WITH(NOLOCK) ON I.AGT_CODE = H.AGT_CODE AND I.TEAM_SEQ = F.TEAM_SEQ
			JOIN RES_CUSTOMER_damo J WITH(NOLOCK) ON A.RES_CODE = J.RES_CODE AND A.RES_SEQ_NO = J.SEQ_NO
			' + @WHERE + N'	
		)
		SELECT 
			' + @GROUP2 + N',
			COUNT(A.TICKET) AS TICKET_COUNT,
			CONVERT(FLOAT,COUNT(A.TICKET) / CONVERT(FLOAT,@TOTAL_TICKET) * 100) AS TICKET_SHARE,
			SUM(A.FARE) AS FARE,
			SUM(A.DISCOUNT) AS DISCOUNT,
			SUM(A.NET_PRICE) AS NET_PRICE,
			SUM(A.TAX_PRICE) AS TAX_PRICE,
			SUM(A.COMM_PRICE) AS COMM_PRICE,
			SUM(A.PRICE) AS PRICE,
			CONVERT(FLOAT,SUM(A.PRICE)) / CONVERT(FLOAT,@TOTAL_PRICE) * 100 AS PRICE_SHARE,
			COUNT(A.CANCEL_TICKET) AS CANCEL_COUNT,
			SUM(A.CANCEL_PRICE) AS CANCEL_PRICE,
			SUM(A.CANCEL_CHARGE) AS CANCEL_CHARGE,
			SUM(A.TOTAL_PRICE) + SUM(CASE WHEN A.ROWNUMBER = 1 THEN A.CHG_PRICE ELSE 0 END) AS TOTAL_PRICE,
			SUM(CASE WHEN A.ROWNUMBER = 1 THEN A.CHG_PRICE ELSE 0 END) AS CHG_PRICE
		FROM LIST A WITH(NOLOCK) 
		GROUP BY ' + @GROUP2 + N'
		ORDER BY /*COUNT(A.TICKET) DESC */ SUM(A.TOTAL_PRICE) + SUM(CASE WHEN A.ROWNUMBER = 1 THEN A.CHG_PRICE ELSE 0 END) DESC ; '

	SET @PARMDEFINITION = N'	
		@AGT_CODE			VARCHAR(10),
		@START_DATE			DATE,
		@END_DATE			DATE,
		@TEAM_SEQ			INT,
		@EMP_SEQ			INT,
		@ROUTE_TYPE			VARCHAR(1)';

	PRINT @SQLSTRING

	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, 		
		@AGT_CODE,
		@START_DATE,
		@END_DATE,
		@TEAM_SEQ,
		@EMP_SEQ,
		@ROUTE_TYPE;
END



GO
