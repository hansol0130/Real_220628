USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*================================================================================================================
■ USP_NAME					: SP_PPT_MASTER_LIST_SELECT
■ DESCRIPTION				: 여권사본 수신함 LIST
■ INPUT PARAMETER			: 
	@MASTER_CODE_STRING		: 마스터 코드
■ OUTPUT PARAMETER			: 
■ EXEC						: 

	EXEC SP_PPT_MASTER_LIST_SELECT_TEST 'C', 15, 1, '', '', '', '', '', '', '', '', '2019-02-16', '2019-02-20'

	EXEC SP_PPT_MASTER_LIST_SELECT_TEST 'L', 15, 1, '', '', '', '', '', '', '', '', '2019-02-16', '2019-02-20'

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
2016-05-01   		김낙겸			최초 생성 
2019-02-18          김남훈          수신함에 필요없는 카운팅 제거 및 속도개선
================================================================================================================*/ 
CREATE PROCEDURE [dbo].[SP_PPT_MASTER_LIST_SELECT_TEST]
	@FLAG			char(1),
	@PAGE_SIZE		INT,
	@PAGE_INDEX		INT,	
	@RES_CODE		char(12),
	@PRO_CODE		varchar(20),
	@CUS_NAME		varchar(20),
	@NOR_TEL1		varchar(6),
	@NOR_TEL2		varchar(5),
	@NOR_TEL3		varchar(4),
	@SALE_EMP_CODE	char(7),
	@SALE_TEAM_CODE varchar(3),
	@START_DATE		VARCHAR(12),
	@END_DATE		VARCHAR(12)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @SQLSTRING NVARCHAR(4000) = '', @PARMDEFINITION NVARCHAR(1000);
	
	-- 조건절
	IF (@RES_CODE <> '')
	BEGIN
		SET @SQLSTRING = @SQLSTRING + '
				AND PM.RES_CODE = @RES_CODE';
	END
	ELSE IF (@PRO_CODE <> '')
	BEGIN
		SET @SQLSTRING = @SQLSTRING + '
				AND RM.PRO_CODE = @PRO_CODE';
	END

	IF ISNULL(@START_DATE, '') <> ''
	BEGIN
		SET @SQLSTRING = @SQLSTRING + ' AND PM.NEW_DATE >= CONVERT(DATETIME,@START_DATE)'; 
	END
	 
	IF ISNULL(@END_DATE, '') <> ''
	BEGIN
		SET @SQLSTRING = @SQLSTRING + ' AND PM.NEW_DATE < CONVERT(DATETIME,@END_DATE)'; 
	END

	IF (@CUS_NAME <> '')
	BEGIN
		SET @SQLSTRING = @SQLSTRING + '
				AND CC.CUS_NAME LIKE ''%'' + @CUS_NAME + ''%'''
	END

	IF ISNULL(@NOR_TEL1, '') <> '' AND ISNULL(@NOR_TEL2, '') <> '' AND ISNULL(@NOR_TEL3, '') <> ''
	BEGIN
		SET @SQLSTRING = @SQLSTRING + ' 
				AND CC.NOR_TEL3 = @NOR_TEL3 AND CC.NOR_TEL2 = @NOR_TEL2 AND CC.NOR_TEL1 = @NOR_TEL1'
	END

	IF (@SALE_EMP_CODE <> '')
	BEGIN
		SET @SQLSTRING = @SQLSTRING + '
				AND RM.SALE_EMP_CODE = @SALE_EMP_CODE';
	END	
	IF (@SALE_TEAM_CODE <> '')
	BEGIN
		SET @SQLSTRING = @SQLSTRING + '
				AND RM.SALE_TEAM_CODE = @SALE_TEAM_CODE';
	END

	IF LEN(@SQLSTRING) > 10
	BEGIN
		SET @SQLSTRING = 'WHERE ' + SUBSTRING(@SQLSTRING, 6, 4000) + ' AND RM.RES_STATE < 7'
	END

	-- 검색된 데이타의 카운트를 돌려준다.
	IF @FLAG = 'C'
	BEGIN
		SET @SQLSTRING = N'
			SELECT COUNT(*)
			FROM (
				SELECT PM.RES_CODE
				FROM PPT_MASTER PM WITH(NOLOCK)
				INNER JOIN CUS_CUSTOMER_damo CC WITH(NOLOCK) ON PM.CUS_NO = CC.CUS_NO
				INNER JOIN RES_MASTER_damo RM WITH(NOLOCK) ON PM.RES_CODE = RM.RES_CODE
				' + @SQLSTRING + N'
				GROUP BY PM.RES_CODE
			) A;'
	END
	-- 검색된 데이타의 리스트를 돌려준다.
	ELSE IF @FLAG = 'L'
	BEGIN
		SET @SQLSTRING = N'
			SELECT
				A.RES_CODE, A.PPT_NO, PM.CUS_NO, PM.NEW_DATE, PM.PASS_STATUS,
				CC.CUS_NAME, CC.NOR_TEL1, CC.NOR_TEL2, CC.NOR_TEL3,
				RM.PRO_CODE, RM.PRO_NAME, RM.NEW_TEAM_CODE AS [SALE_TEAM_CODE], RM.NEW_CODE AS [SALE_EMP_CODE],
				(SELECT RC.CUS_NAME FROM RES_CUSTOMER_damo RC WITH(NOLOCK) WHERE RC.RES_CODE = PM.RES_CODE AND RC.SEQ_NO = PM.RES_NO AND RC.RES_STATE = 0) AS CUS_NAME_BAL
			FROM (
				SELECT PM.RES_CODE, MAX(PM.PPT_NO) AS [PPT_NO]
				FROM PPT_MASTER PM WITH(NOLOCK)
				INNER JOIN CUS_CUSTOMER_damo CC WITH(NOLOCK) ON PM.CUS_NO = CC.CUS_NO
				INNER JOIN RES_MASTER_damo RM WITH(NOLOCK) ON PM.RES_CODE = RM.RES_CODE
				' + @SQLSTRING + N'
				GROUP BY PM.RES_CODE
			) A
			INNER JOIN PPT_MASTER PM WITH(NOLOCK) ON A.RES_CODE = PM.RES_CODE AND A.PPT_NO = PM.PPT_NO
			INNER JOIN RES_MASTER_damo RM WITH(NOLOCK) ON A.RES_CODE = RM.RES_CODE
			INNER JOIN CUS_CUSTOMER_damo CC WITH(NOLOCK) ON PM.CUS_NO = CC.CUS_NO
			ORDER BY (CASE WHEN PM.PASS_STATUS = 1 THEN 1 ELSE 2 END), PM.NEW_DATE DESC
			OFFSET ((@PAGE_INDEX - 1) * @PAGE_SIZE) ROWS FETCH NEXT @PAGE_SIZE
			ROWS ONLY;
			
			--SELECT 
			--	A.RES_CODE, A.PPT_NO, A.CUS_NO, A.NEW_DATE, A.PASS_STATUS, A.CUS_NAME_BAL,
			--	CC.CUS_NAME, CC.NOR_TEL1, CC.NOR_TEL2, CC.NOR_TEL3,
			--	RM.PRO_CODE, RM.PRO_NAME, RM.NEW_TEAM_CODE AS [SALE_TEAM_CODE], RM.NEW_CODE AS [SALE_EMP_CODE]
			--FROM (
			--	SELECT 
			--		PM.RES_CODE, MAX(PM.PPT_NO) AS [PPT_NO], MAX(RM.PRO_CODE) AS [PRO_CODE], 
			--		MIN(PM.PASS_STATUS) AS [PASS_STATUS], MAX(PM.NEW_DATE) AS [NEW_DATE],
			--		(SELECT PPM.CUS_NO FROM PPT_MASTER PPM WITH(NOLOCK) WHERE PPM.RES_CODE = PM.RES_CODE AND PPM.PPT_NO = MAX(PM.PPT_NO)) AS [CUS_NO],
			--		(SELECT RC.CUS_NAME FROM RES_CUSTOMER_damo RC WITH(NOLOCK) WHERE RC.RES_CODE = PM.RES_CODE AND RC.SEQ_NO = MIN(PM.RES_NO) AND RC.RES_STATE = 0) AS CUS_NAME_BAL
			--	FROM PPT_MASTER PM WITH(NOLOCK)
			--	INNER JOIN CUS_CUSTOMER_damo CC WITH(NOLOCK) ON PM.CUS_NO = CC.CUS_NO
			--	INNER JOIN RES_MASTER_damo RM WITH(NOLOCK) ON PM.RES_CODE = RM.RES_CODE
			--	' + @SQLSTRING + N'
			--	GROUP BY PM.RES_CODE
			--	ORDER BY (CASE WHEN MIN(PM.PASS_STATUS) = 1 THEN 1 ELSE 2 END), MAX(PM.NEW_DATE) DESC
			--	OFFSET ((@PAGE_INDEX - 1) * @PAGE_SIZE) ROWS FETCH NEXT @PAGE_SIZE
			--	ROWS ONLY
			--) A
			--INNER JOIN CUS_CUSTOMER_damo CC WITH(NOLOCK) ON A.CUS_NO = CC.CUS_NO
			--INNER JOIN RES_MASTER_damo RM WITH(NOLOCK) ON A.RES_CODE = RM.RES_CODE;
			'
	END

	PRINT @SQLSTRING;

	SET @PARMDEFINITION = N'
		@PAGE_INDEX INT, 
		@PAGE_SIZE INT,
		@RES_CODE CHAR(12), 
		@PRO_CODE VARCHAR(20), 
		@CUS_NAME VARCHAR(20), 
		@NOR_TEL1 VARCHAR(6), 
		@NOR_TEL2 VARCHAR(5), 
		@NOR_TEL3 VARCHAR(4), 
		@SALE_EMP_CODE CHAR(7),
		@SALE_TEAM_CODE VARCHAR(3),
		@START_DATE VARCHAR(12),
		@END_DATE VARCHAR(12)';

	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, 
		@PAGE_INDEX, 
		@PAGE_SIZE, 
		@RES_CODE, 
		@PRO_CODE, 
		@CUS_NAME, 
		@NOR_TEL1, 
		@NOR_TEL2, 
		@NOR_TEL3, 
		@SALE_EMP_CODE, 
		@SALE_TEAM_CODE, 
		@START_DATE, 
		@END_DATE;
END
GO
