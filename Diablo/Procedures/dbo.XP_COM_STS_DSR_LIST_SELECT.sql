USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*================================================================================================================
■ USP_NAME					: XP_COM_STS_DSR_LIST_SELECT
■ DESCRIPTION				: BTMS DSR 리스트 검색
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: 

   EXEC DBO.XP_COM_STS_DSR_LIST_SELECT '', '', '', '2016-09-26', '2016-09-29', 0, 0, '', 'S'

■ MEMO                  : 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY
------------------------------------------------------------------------------------------------------------------
	DATE			AUTHOR		DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
	2016-05-18		김성호		최초생성
	2016-06-15		이유라		ROUTE_TYPE추가 - 국제선/국내선 구분 (ERP용)
	2016-09-08		이유라	    행사번호 추가
	2016-09-20		김성호		분리발권으로 인한 수수료 중복 계산을 방지하기 출발자 별 한번만 계산되도록 쿼리 수정
	2016-09-29		이유라		발권일 외 출발일 조회 추가 (@DATE_TYPE 추가로 구분)
	2016-10-11		김성호		티켓 환불 유무 추가
	2016-11-29		이유라		TASF계산식 테이블 조인 -> SUM 으로 변경
	2016-12-09		이유라		도시코드 공항코드로 조인 변경
================================================================================================================*/ 
CREATE PROC [dbo].[XP_COM_STS_DSR_LIST_SELECT]
	@AGT_CODE			VARCHAR(10),
	@TICKET				VARCHAR(10),
	@RES_CODE			VARCHAR(12),
	@START_DATE			DATE,
	@END_DATE			DATE,
	@TEAM_SEQ			INT,				/* 거래처 팀 */
	@EMP_SEQ			INT,
	@ROUTE_TYPE			VARCHAR(1),
	@DATE_TYPE			VARCHAR(1)
AS 
BEGIN

	DECLARE @SQLSTRING NVARCHAR(MAX) = '', @PARMDEFINITION NVARCHAR(1000), @WHERE1 NVARCHAR(1000) = '', @WHERE2 NVARCHAR(1000) = '', @ORDERBY NVARCHAR(100) = '';

	IF LEN(@TICKET) > 0
	BEGIN
		SET @WHERE1 = ' AND A.TICKET = @TICKET'
	END
	ELSE IF LEN(@RES_CODE) > 0
	BEGIN
		SET @WHERE1 = ' AND A.RES_CODE = @RES_CODE'
	END
	ELSE
	BEGIN

		IF @START_DATE IS NOT NULL AND @END_DATE IS NOT NULL
		BEGIN 
			IF @DATE_TYPE = 'I'
			BEGIN
				SET @WHERE1 = @WHERE1 + ' AND A.ISSUE_DATE >= @START_DATE AND A.ISSUE_DATE < DATEADD(DAY, 1, CONVERT(DATETIME, @END_DATE, 121)) '	
				SET @ORDERBY = ' A.ISSUE_DATE, '
			END
			IF @DATE_TYPE = 'S'
			BEGIN
				SET @WHERE1 = @WHERE1 + ' AND A.START_DATE >= @START_DATE AND A.START_DATE < DATEADD(DAY, 1, CONVERT(DATETIME, @END_DATE, 121)) '	
				SET @ORDERBY = ' A.START_DATE, '				
			END
		END

		IF @ROUTE_TYPE = 'I'
		BEGIN 
			SET @WHERE1 = @WHERE1 + ' AND A.CITY_CODE NOT IN (SELECT CITY_CODE FROM PUB_CITY WHERE NATION_CODE = ''KR'') '
		END
		ELSE IF @ROUTE_TYPE = 'D'
		BEGIN 
			SET @WHERE1 = @WHERE1 + ' AND A.CITY_CODE IN (SELECT CITY_CODE FROM PUB_CITY WHERE NATION_CODE = ''KR'') '
		END

		IF LEN(@AGT_CODE) > 0
		BEGIN
			SET @WHERE2 = @WHERE2 + ' AND D.AGT_CODE = @AGT_CODE'
		END

		IF @EMP_SEQ > 0
		BEGIN
			SET @WHERE2 = @WHERE2 + ' AND E.NEW_SEQ = @EMP_SEQ'
		END
		ELSE IF @TEAM_SEQ > 0
		BEGIN
			SET @WHERE2 = @WHERE2 + ' AND H.TEAM_SEQ = @TEAM_SEQ'
		END
	END

	IF LEN(@WHERE1) > 10
	BEGIN
		SELECT @WHERE1 = (N'WHERE ' + SUBSTRING(@WHERE1, 5, 1000))
	END

	IF LEN(@WHERE2) > 10
	BEGIN
		SELECT @WHERE2 = (N'WHERE ' + SUBSTRING(@WHERE2, 5, 1000))
	END

    SET @SQLSTRING = @SQLSTRING + CONVERT(NVARCHAR(MAX), N'
		WITH TICKET_LIST AS
		(
			SELECT A.ISSUE_DATE, A.RES_CODE, A.RES_SEQ_NO, A.PAX_NAME, A.ROUTING, A.START_DATE, A.END_DATE, A.AIRLINE_CODE, A.AIRLINE_NUM, A.AIR_CLASS
				, A.TICKET, A.FARE, A.TAX_PRICE, A.DISCOUNT, A.NET_PRICE, A.CASH_PRICE, A.CARD_PRICE, A.CARD_NUM, A.COMM_PRICE, A.CITY_CODE
				, (CASE
					WHEN A.CARD_PRICE > 0 AND A.CASH_PRICE > 0 THEN ''복합''
					WHEN A.CARD_PRICE > 0 THEN ''카드''
					WHEN A.CASH_PRICE > 0 THEN ''현금''
					ELSE ''''
				END) AS [PAY_WAY]
				, ROW_NUMBER() OVER (PARTITION BY A.RES_CODE, A.RES_SEQ_NO ORDER BY A.START_DATE) AS [ROWNUMBER]
			FROM DSR_TICKET A WITH(NOLOCK)
			' + @WHERE1 + N'
		)
		SELECT A.ISSUE_DATE, A.RES_CODE, A.RES_SEQ_NO, A.PAX_NAME, A.ROUTING, A.START_DATE, A.END_DATE, A.AIRLINE_CODE, A.AIRLINE_NUM, A.AIR_CLASS
			, A.TICKET, A.FARE, A.PAY_WAY, A.ROWNUMBER
			, A.TAX_PRICE, A.DISCOUNT, A.NET_PRICE, A.CASH_PRICE, A.CARD_PRICE, A.CARD_NUM, A.COMM_PRICE
			, G.KOR_NAME AS [AGT_NAME], I.TEAM_NAME, H.KOR_NAME AS [AGT_EMP_NAME], J.POS_NAME
			, K.KOR_NAME AS [CITY_NAME]
			, (CASE WHEN A.ROWNUMBER = 1 THEN B.CHG_PRICE ELSE 0 END) AS [CHG_PRICE]
			--, B.CHG_PRICE
			--, F.TOTAL_PRICE AS [TASF_PRICE]
			, (SELECT SUM(F.TOTAL_PRICE) FROM DSR_TASF F WHERE A.TICKET = F.PARENT_TICKET) AS [TASF_PRICE]
			, E.PRO_CODE
			, (CASE WHEN L.TICKET IS NULL THEN ''N'' ELSE ''Y'' END) AS REFUND_YN
		FROM TICKET_LIST A
		INNER JOIN RES_CUSTOMER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE AND A.RES_SEQ_NO = B.SEQ_NO
		INNER JOIN RES_MASTER_damo C WITH(NOLOCK) ON B.RES_CODE = C.RES_CODE
		INNER JOIN COM_BIZTRIP_DETAIL D WITH(NOLOCK) ON C.RES_CODE = D.RES_CODE
		INNER JOIN COM_BIZTRIP_MASTER E WITH(NOLOCK) ON D.AGT_CODE = E.AGT_CODE AND D.BT_CODE = E.BT_CODE
		--LEFT JOIN DSR_TASF F WITH(NOLOCK) ON A.TICKET = F.PARENT_TICKET
		LEFT JOIN AGT_MASTER G WITH(NOLOCK) ON E.AGT_CODE = G.AGT_CODE
		LEFT JOIN COM_EMPLOYEE H WITH(NOLOCK) ON E.AGT_CODE = H.AGT_CODE AND E.NEW_SEQ = H.EMP_SEQ
		LEFT JOIN COM_TEAM I WITH(NOLOCK) ON H.AGT_CODE = I.AGT_CODE AND H.TEAM_SEQ = I.TEAM_SEQ
		LEFT JOIN COM_POSITION J WITH(NOLOCK) ON H.AGT_CODE = J.AGT_CODE AND H.POS_SEQ = J.POS_SEQ
		LEFT JOIN PUB_AIRPORT K WITH(NOLOCK) ON A.CITY_CODE = K.AIRPORT_CODE
		LEFT JOIN DSR_REFUND L WITH(NOLOCK) ON A.TICKET = L.TICKET
		' + @WHERE2 + N'
		ORDER BY ' + @ORDERBY + N' A.RES_CODE, A.RES_SEQ_NO;')

	SET @PARMDEFINITION = N'
		@AGT_CODE			VARCHAR(10),
		@TICKET				VARCHAR(10),
		@RES_CODE			VARCHAR(12),
		@START_DATE			DATE,
		@END_DATE			DATE,
		@TEAM_SEQ			INT,
		@EMP_SEQ			INT,
		@ROUTE_TYPE			VARCHAR(1)';
	  
	--PRINT @SQLSTRING
      
   EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION,
		@AGT_CODE,
		@TICKET,
		@RES_CODE,
		@START_DATE,
		@END_DATE,
		@TEAM_SEQ,
		@EMP_SEQ,
		@ROUTE_TYPE;

END 

GO
