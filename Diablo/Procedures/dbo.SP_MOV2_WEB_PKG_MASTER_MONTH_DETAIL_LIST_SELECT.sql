USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*================================================================================================================
■ USP_NAME					: SP_MOV2_WEB_PKG_MASTER_MONTH_DETAIL_LIST_SELECT ( <== XP_WEB_PKG_MASTER_MONTH_DETAIL_LIST_SELECT )
■ DESCRIPTION				: 마스터 월별 행사리스트
■ INPUT PARAMETER			: 
	@MASTER_CODE			: 마스터 코드
	@START_DATE				: 시작일
	@END_DATE				: 도착일
	@ORDER_BY				: 정렬순서 (1: 출발일 ASC, 2: 출발일 DESC, 3: 가격 ASC, 4: 가격 DESC)
■ OUTPUT PARAMETER			: 
■ EXEC						: 
	DECLARE @MASTER_CODE VARCHAR(10), @START_DATE DATETIME, @END_DATE DATETIME, @ORDER_BY INT
	SELECT @MASTER_CODE = 'upp245', @START_DATE = '2017-11-01', @END_DATE = '2017-12-01', @ORDER_BY = ''


	exec SP_MOV2_WEB_PKG_MASTER_MONTH_DETAIL_LIST_SELECT @MASTER_CODE, @START_DATE, @END_DATE, @ORDER_BY, @AIRLINE, @WEEKDAY, @MIN_PRICE, @MAX_PRICE, @RES_STATE, @AMPM
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2013-03-22		김성호			최초생성
   2013-05-22		김성호			SHOW_YN 추가
   2013-05-24		김성호			항공 출도착 시간 추가
   2013-06-09		김성호			오늘 이전 행사 검색 안되게 수정
   2013-06-10		김성호			WITH(NOLOCK) 추가
   2014-06-19		정지용			가격정찰제 관련 쿼리수정
   2016-12-09		정지용			SORT TYPE 추가
   2016-12-12		정지용			석수 > 예약가능(1111) > 대기예약(8888) > 예약마감(9999) 순 정렬을 위해 항목 추가
   2017-07-12		오준욱			XP_WEB_PKG_MASTER_MONTH_DETAIL_LIST_SELECT 에서 정렬순서 및 조건 변경
   2017-11-24		박형만			RES_STATE 출발확정은 예약가능여부와 다른 조건으로 ,  남은좌석제외, 예약가능에 남은좌석 포함
   2019-11-27		박형만			CFM_YN 일때 출발확정 전체 DEP_CFM_YN IN (Y,F인것)
================================================================================================================*/ 
CREATE PROCEDURE [dbo].[SP_MOV2_WEB_PKG_MASTER_MONTH_DETAIL_LIST_SELECT]
(
	@MASTER_CODE	VARCHAR(10),
	@START_DATE		DATETIME,
	@END_DATE		DATETIME,
	@ORDER_BY		INT,
	@AIRLINE		VARCHAR(100),
	@WEEKDAY		VARCHAR(100),
	@MIN_PRICE		INT,
	@MAX_PRICE		INT,
	@RES_STATE		INT,
	@AMPM			VARCHAR(5)
)

AS  
BEGIN

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
--declare @MASTER_CODE	VARCHAR(10),
--	@START_DATE		DATETIME,
--	@END_DATE		DATETIME,
--	@ORDER_BY		INT,
--	@AIRLINE		VARCHAR(100),
--	@WEEKDAY		VARCHAR(100),
--	@MIN_PRICE		INT,
--	@MAX_PRICE		INT,
--	@RES_STATE		INT,
--	@AMPM			VARCHAR(5)
----SELECT @MASTER_CODE = 'APP2801', @START_DATE = '2017-12-01', @END_DATE = '2018-01-01', @ORDER_BY = '1',@RES_STATE = 1 
--SELECT @MASTER_CODE = 'EPP214', @START_DATE = '2018-01-01', @END_DATE = '2018-02-01', @ORDER_BY = '1',@RES_STATE = 1


	DECLARE @SQLSTRING NVARCHAR(4000), @PARMDEFINITION NVARCHAR(1000), @SORT_STRING VARCHAR(50);
	DECLARE @QUERY_STRING NVARCHAR(1000), @WHERE NVARCHAR(1000);

	-- 이전 행사는 검색에서 제외한다.
	IF @START_DATE < GETDATE()
		SET @START_DATE = GETDATE();

	-- filter 생성
	SET @WHERE = N''

	IF ISNULL(@AIRLINE, '') <> ''
	BEGIN
		SELECT @AIRLINE = STUFF((SELECT (',''' + DATA + '''') AS [text()] FROM [DBO].[FN_SPLIT] (@AIRLINE, ',') FOR XML PATH('')), 1, 1, '')
		SET @WHERE = @WHERE + N' AND Z.TRANS_CODE IN (' + @AIRLINE + ')'
	END

	IF ISNULL(@WEEKDAY, '') <> ''
	BEGIN
		SELECT @WEEKDAY = STUFF((SELECT (',''' + DATA + '''') AS [text()] FROM [DBO].[FN_SPLIT] (@WEEKDAY, ',') FOR XML PATH('')), 1, 1, '')
		SET @WHERE = @WHERE + N' AND DATENAME(DW, Z.DEP_DATE) IN (' + @WEEKDAY + ')'
	END

	IF ISNULL(@MIN_PRICE, '') <> ''
	BEGIN
		SET @WHERE = @WHERE + N' AND Z.ADT_PRICE >= CONVERT(BIGINT, @MIN_PRICE)'
	END

	IF ISNULL(@MAX_PRICE, '') <> ''
	BEGIN
		SET @WHERE = @WHERE + N' AND Z.ADT_PRICE <= CONVERT(BIGINT, @MAX_PRICE)'
	END

	IF ISNULL(@AMPM, '') <> ''
	BEGIN
		IF @AMPM = 'AM'
			SET @WHERE = @WHERE + N' AND DATEPART(HH, CONVERT(VARCHAR(10), CONVERT(DATETIME, Z.DEP_DEP_DATE), 120) + '' '' + Z.DEP_DEP_TIME + '':00'') < 12 '
		ELSE
			SET @WHERE = @WHERE + N' AND DATEPART(HH, CONVERT(VARCHAR(10), CONVERT(DATETIME, Z.DEP_DEP_DATE), 120) + '' '' + Z.DEP_DEP_TIME + '':00'') >= 12 '
	END
	
	IF @RES_STATE > 0 
	BEGIN
		IF @RES_STATE = 1										-- 예약가능 (남은좌석 포함)
			SET @WHERE = @WHERE + N' AND Z.RSERV_SORT = ''1111'' OR  (Z.RSERV_SORT BETWEEN ''0'' AND ''1000'' )   '
		ELSE IF @RES_STATE = 2									-- 대기예약
			SET @WHERE = @WHERE + N' AND Z.RSERV_SORT = ''8888'' '
		ELSE IF @RES_STATE = 3									-- 출발확정
			SET @WHERE = @WHERE + N' AND Z.DEP_CFM_YN IN (''Y'',''F'') '--  N' AND Z.RSERV_SORT = ''9999'' '
		ELSE IF @RES_STATE = 4									-- 예약마감
			SET @WHERE = @WHERE + N' AND Z.RSERV_SORT = ''9990'' '
		--ELSE													-- 남은좌석 17.11.24 남은좌석 제외 (IT기획요청)
		--	SET @WHERE = @WHERE + N' AND Z.RSERV_SORT <> ''1111'' AND Z.RSERV_SORT <> ''8888'' AND Z.RSERV_SORT <> ''9999'' AND Z.RSERV_SORT <> ''9990''  '
	END

	-- SORT 조건 만들기  
	SELECT @SORT_STRING = (  
		CASE @ORDER_BY
			WHEN 1 THEN 'Z.DEP_DATE, Z.ADT_PRICE'
			WHEN 2 THEN 'Z.DEP_DATE DESC, Z.ADT_PRICE' -- 출발일 기준
			WHEN 3 THEN 'Z.ADT_PRICE, Z.DEP_DATE'
			WHEN 4 THEN 'Z.ADT_PRICE DESC, Z.DEP_DATE' -- 가격 기준
			WHEN 5 THEN 'Z.TRANS_NAME, Z.DEP_DATE'
			WHEN 6 THEN 'Z.TRANS_NAME DESC, Z.DEP_DATE' -- 항공사 기준
			WHEN 7 THEN 'Z.RSERV_SORT DESC, Z.DEP_DATE'
			WHEN 8 THEN 'Z.RSERV_SORT, Z.DEP_DATE' -- 예약상태 기준
			ELSE 'Z.DEP_DATE, Z.ADT_PRICE'
		END
	)

	-- 함수 사용이 많아서 실제 SORT 할 시에만 실행
	-- 남은좌석수를  RSERV_SORT CODE 로 반환 
	SET @QUERY_STRING = '';
	IF @ORDER_BY = 7 OR @ORDER_BY = 8 OR @RES_STATE IN (1,2,3,4,5)
	BEGIN
		SET @QUERY_STRING = 'WHEN A.RES_ADD_YN = ''Y'' AND (A.MAX_COUNT > 0 AND (A.MAX_COUNT - (DBO.FN_PRO_GET_RES_COUNT(A.PRO_CODE) + A.FAKE_COUNT)) > 0) THEN A.MAX_COUNT - (DBO.FN_PRO_GET_RES_COUNT(A.PRO_CODE) + A.FAKE_COUNT)'; -- 남은좌석
	END

	SET @SQLSTRING = N'
	WITH LIST AS
	(
		SELECT A.PRO_CODE, A.DEP_DATE
			--, (SELECT TOP 1 ADT_PRICE FROM PKG_DETAIL_PRICE WITH(NOLOCK) WHERE PRO_CODE = A.PRO_CODE ORDER BY ADT_PRICE) AS [ADT_PRICE]
			, DBO.XN_PRO_DETAIL_SALE_PRICE_CUTTING(A.PRO_CODE, 0) AS [ADT_PRICE]
			, (SELECT TOP 1 PRICE_SEQ FROM PKG_DETAIL_PRICE WITH(NOLOCK) WHERE PRO_CODE = A.PRO_CODE ORDER BY ADT_PRICE) AS [PRICE_SEQ]
		FROM PKG_DETAIL A WITH(NOLOCK)
		WHERE A.MASTER_CODE = @MASTER_CODE AND A.DEP_DATE >= @START_DATE AND A.DEP_DATE < @END_DATE AND A.SHOW_YN = ''Y''
	)
	SELECT * FROM (
		SELECT @START_DATE AS [BASIC_DATE], A.PRO_CODE, A.DEP_DATE, A.ARR_DATE, A.PRO_NAME, A.MAX_COUNT, A.MIN_COUNT, A.FAKE_COUNT
			, A.TOUR_NIGHT, A.TOUR_DAY, A.RES_ADD_YN, A.DEP_CFM_YN, A.CONFIRM_YN, A.SALE_TYPE, A.PRICE_TYPE
			, C.DEP_TRANS_CODE AS [TRANS_CODE], C.DEP_DEP_DATE, C.DEP_DEP_TIME, C.ARR_ARR_DATE, C.ARR_ARR_TIME
			, CASE
				WHEN A.TRANSFER_TYPE = 1 THEN (SELECT KOR_NAME FROM PUB_AIRLINE WITH(NOLOCK) WHERE AIRLINE_CODE = C.DEP_TRANS_CODE)
				WHEN A.TRANSFER_TYPE = 2 THEN (SELECT KOR_NAME FROM PUB_SHIP WITH(NOLOCK) WHERE SHIP_CODE = C.DEP_TRANS_CODE)
				ELSE '''' 
			END AS [TRANS_NAME]
			, DBO.FN_PRO_GET_RES_COUNT(A.PRO_CODE) AS [RES_COUNT]
			, Z.ADT_PRICE, Z.PRICE_SEQ, B.BRANCH_CODE, B.ATT_CODE
			, (CASE WHEN A.PRO_CODE = B.EVENT_PRO_CODE THEN ''Y'' ELSE ''N'' END) AS [EVENT_YN]
			, CASE  -- 석수 > 예약가능 > 대기예약 > 예약마감 순 정렬을 위해 추가
			 -- 
				WHEN A.RES_ADD_YN = ''Y'' AND A.MAX_COUNT = -1 THEN ''8888''	-- 대기예약
				WHEN A.RES_ADD_YN = ''Y'' AND A.MAX_COUNT = 0 THEN ''1111''		-- 예약가능 
				' + @QUERY_STRING + N'				--1,2,3,4,5,6,7
				WHEN A.DEP_CFM_YN IN (''Y'',''F'') THEN ''9999''							-- 출발확정
				ELSE ''9990'' END AS RSERV_SORT									-- 예약마감 
		FROM LIST Z 
		INNER JOIN PKG_DETAIL A WITH(NOLOCK) ON Z.PRO_CODE = A.PRO_CODE
		INNER JOIN PKG_MASTER B WITH(NOLOCK) ON A.MASTER_CODE = B.MASTER_CODE
		LEFT OUTER JOIN PRO_TRANS_SEAT C WITH(NOLOCK) ON A.SEAT_CODE = C.SEAT_CODE 
	) Z
	WHERE 1 = 1 ' + @WHERE  + N'		
	ORDER BY ' + @SORT_STRING;

	--PRINT @SQLSTRING

	SET @PARMDEFINITION = N'
		@MASTER_CODE	VARCHAR(10),
		@START_DATE		DATETIME,
		@END_DATE		DATETIME,
		@ORDER_BY		INT,
		@AIRLINE		VARCHAR(100),
		@WEEKDAY		VARCHAR(100),
		@MIN_PRICE		INT,
		@MAX_PRICE		INT,
		@RES_STATE		INT,
		@AMPM			VARCHAR(5) ';

		
	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION,
		@MASTER_CODE,
		@START_DATE,
		@END_DATE,
		@ORDER_BY,
		@AIRLINE,
		@WEEKDAY,
		@MIN_PRICE,
		@MAX_PRICE,
		@RES_STATE,
		@AMPM;
END






GO
