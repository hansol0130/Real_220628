USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING
■ DESCRIPTION				: 2019 네이버 패키지 상품연동 상품생성
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING ''

 SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL 'JPP066-200108|1'
 SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL 'UPP623-191007GPS|1'
 GO 
 SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL 'UPP623-191007GPS|1'
 GO 
 SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL 'EPP1351'
 GO 
 SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL 'APP5010'

SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'APP5010'

SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_NEW 'APP5010'
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING_NEW 'APP5010'

SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING_NEW 'JPP4850-200420|1' , NULL , NULL , 2  

SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING_NEW 'JPP4850' , 'JPP4850-200420|1' , NULL , 2 

SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING_NEW 'APP5010' , 'APP5010-191205KE|1' , NULL , 1 
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING_NEW 'APP5010' , 'APP5010-191205KE|1' , NULL , 1 


SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'JPP066','JPP066-200108|1'

GO 
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'PPP247'
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'PPP282'
PPP2466
PPP235
PPP202
PPP258
PPP337
PPP236'
GO 
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'XPP3019'
GO 
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'JPP6677'

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           TITLE
------------------------------------------------------------------------------------------------------------------
2019-03-18			박형만			
2019-04-04			네이버 4.1.6 적용  ,
2019-05-22			NOTIP추가 
2019-05-24			대기예약 2좌석으로 , 선택관광 통화 없음 EP 이면 EUR 로 . 12월 출발까지 
2019-06-20			기존 테이블 에서 마지막 수정일 가져옴 
2019-06-21			마스터명으로 테마 만들기 적용 
2019-06-24			도시명 없는경우 스케쥴 도시 테이블에서 다시 검색 
2019-07-04			현재일 +2일 출발 부터 전송 
2019-10-01			네이버 간략일정표 추가 
2019-10-14			포함불포함 코드순 정렬 추가 
2019-11-05			부산pus 이고 , 교통편이 배편이면 BS1(부산항) 으로 
2019-11-21			경유시 네이버 도착편 대표항공편 아닌 마지막 한국 항공편으로 수정  
2019-11-27			박형만			DEP_CFM_YN = 'F' 출발확정(가) 도 확정으로 전송되도록 수정  ,긴급모객-> 긴급모객or 집중모객 
2019-11-28			박형만			셀링포인트 , 포함 불포함 제외 로직 빼기 ! !!
================================================================================================================*/ 
CREATE  PROC [dbo].[SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING_NEW]
	@MASTER_CODE VARCHAR(10),
	@CHILDCODE VARCHAR(30) = NULL ,
	@BASE_DATE VARCHAR(10) = NULL , 
	@PROCESS_MODE INT = 0  -- 0=기본 업데이트 만 하기  ,1=업데이트 하고 가져오기 , 2=생성될 데이터 보여주기 
	
AS
BEGIN

--DECLARE @MASTER_CODE VARCHAR(1000)
--,@CHILDCODE  VARCHAR(30)
--,@BASE_DATE VARCHAR(10) 
--,@PROCESS_MODE int
----------------------------------SET @MASTER_CODE = 'APP2787,APP2091,APP1833,APP5959,APP2525'
----SET @MASTER_CODE = 'APP1100'
----SET @CHILDCODE = 'APP1100-190825LJ|6' 
--SET @MASTER_CODE = 'UPP243'
--SET @CHILDCODE = 'JPC650-200302NN|1' 
----SET @BASE_DATE = '2019-07-10'

	-- 생성 시작 기준일 처리 보통은 현재일 +2일 
	DECLARE @START_DATE DATETIME 
	DECLARE @END_DATE DATETIME 
	IF ISNULL(@BASE_DATE,'') = ''
	BEGIN
		-- 행사 있을경우 행사 날짜 , 넉넉하게 4일전 까지 
		IF ISNULL(@CHILDCODE,'') <> '' 
		BEGIN
			SET @START_DATE = DATEADd(D,-4,(SELECT DEP_DATE FROM PKG_DETAIL
			WHERE PRO_CODE = SUBSTRING(@CHILDCODE , 1 ,  CHARINDEX( '|' , @CHILDCODE ) -1 ) ) )
		END 
		
		-- 날짜 없는 경우 
		IF @START_DATE IS NULL 
		BEGIN
			-- 일반적인 경우 현재일 +3일 부터 ( 다음날 네이버에서 가져가 므로 실제로는 +2일 ) 
			SET @START_DATE = DATEADD(D,3,CONVERT(VARCHAR(10),GETDATE(),121))	
		END 
	END 
	ELSE 
	BEGIN
		-- 일반적인 경우 현재일 +3일 부터 ( 다음날 네이버에서 가져가 므로 실제로는 +2일 ) 
		SET @START_DATE =  DATEADD(D,3,CONVERT(VARCHAR(10),@BASE_DATE,121))	   
	END

	SET @END_DATE = DATEADD(D,-1,DATEADD(M,7,CONVERT(VARCHAR(7),@START_DATE,121)+'-01')) -- 현재월 + 7개월 까지의 상품  
	
	--테이블 있으면 지우기 
	IF OBJECT_id('tempdb..#TMP_PRODUCT') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_PRODUCT
	END
	IF OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_NAVER_PKG_DETAIL
	END
	IF OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_OPTION') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_NAVER_PKG_DETAIL_OPTION
	END
	IF OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_HOTEL') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_NAVER_PKG_DETAIL_HOTEL
	END
	IF OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_SCH') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_NAVER_PKG_DETAIL_SCH
	END


DECLARE @PROC_TIME DATETIME 
SET @PROC_TIME = GETDATE() 

PRINT '1.네이버 대상행사 테이블 임시테이블 등록 시작'

	-- 생성될 행사코드 넣기 
	CREATE TABLE #TMP_PRODUCT (MASTER_CODE VARCHAR(20), PRO_CODE VARCHAR(20) , PRICE_SEQ INT , SCH_SEQ INT  , CHILDCODE VARCHAR(30) , LAST_UPD_DATE DATETIME  , CITYLIST VARCHAR(1000), COUNTRYLIST VARCHAR(400) ) 	
	INSERT INTO  #TMP_PRODUCT (MASTER_CODE,PRO_CODE,PRICE_SEQ,SCH_SEQ,CHILDCODE,LAST_UPD_DATE)
	--삭제전에 기존테이블의 최종 UPDATEDDATE 를 가져온다 
	SELECT 
	T1.MASTER_CODE ,T1.PRO_CODE ,T1.PRICE_SEQ ,T1.SCH_SEQ , T1.CHILDCODE  ,T2.UPDATEDDATE --,  * 
	FROM 
	( 
		SELECT A.MASTER_CODE , B.PRO_CODE , D.PRICE_SEQ  , D.SCH_SEQ , B.PRO_CODE +'|' + CONVERT(VARCHAR,D.PRICE_SEQ) AS CHILDCODE ,
		-- 내부 체크로직 
		--CASE WHEN (SELECT COUNT(*)
		--	FROM PKG_DETAIL_PRICE_INOUT WITH(NOLOCK)
		--	WHERE PRO_CODE = CC.PRO_CODE AND PRICE_SEQ = DD.PRICE_SEQ ) = 0 THEN 1 ELSE 0 END  AS INOUT_NO ,
		CASE WHEN (SELECT COUNT(*)
			FROM PKG_DETAIL_PRICE_INOUT WITH(NOLOCK)
			WHERE PRO_CODE = B.PRO_CODE AND PRICE_SEQ = D.PRICE_SEQ ) = 0 THEN B.PRO_CODE ELSE NULL END  AS INOUT_NO_PRO_CODE , -- 포함불포함 입력안됨 
		CASE WHEN (SELECT COUNT(*)
			FROM PKG_DETAIL_PRICE_INOUT WITH(NOLOCK)
			WHERE PRO_CODE = B.PRO_CODE AND PRICE_SEQ = D.PRICE_SEQ ) = 0 THEN D.PRICE_SEQ ELSE NULL END  AS INOUT_NO_PRICE_SEQ , 
		--CASE WHEN ISNULL(PKG_SUMMARY,'') = '' THEN 1 ELSE 0 END   SELLPOINT_NO ,
		CASE WHEN ISNULL(B.PKG_SUMMARY,'') = '' THEN B.PRO_CODE ELSE NULL END   SELLPOINT_NO_PRO_CODE ,
		--CASE WHEN   CHARINDEX( CHAR(13) , PKG_SUMMARY ) = 0 
		--		AND CHARINDEX( CHAR(10) , PKG_SUMMARY ) = 0 
		--		AND LEN ( ISNULL(PKG_SUMMARY,'') ) > 80   THEN 1 ELSE 0 END as SELLPOINT_EX ,
		CASE WHEN   CHARINDEX( CHAR(13) , B.PKG_SUMMARY ) = 0 
				AND CHARINDEX( CHAR(10) , B.PKG_SUMMARY ) = 0 
				AND LEN ( ISNULL(B.PKG_SUMMARY,'') ) > 80   THEN  B.PRO_CODE ELSE NULL END as SELLPOINT_EX_PRO_CODE ,
		CASE WHEN ISNULL(E.TRAFFIC_POINT,'') = ''
				AND ISNULL(E.STAY_POINT,'') = ''
				AND ISNULL(E.TOUR_POINT,'') = ''
				AND ISNULL(E.EAT_POINT,'') = ''
				AND ISNULL(E.DISCOUNT_POINT,'') = ''
				AND ISNULL(E.OTHER_POINT,'') = '' THEN B.PRO_CODE ELSE NULL END AS PRO_POINT_NO_PRO_CODE 
		FROM PKG_MASTER A WITH(NOLOCK)
		INNER JOIN PKG_DETAIL B WITH(NOLOCK) ON A.MASTER_CODE = B.MASTER_CODE
		INNER JOIN PKG_DETAIL_PRICE D WITH(NOLOCK) ON B.PRO_CODE = D.PRO_CODE
		LEFT JOIN PKG_DETAIL_SELL_POINT E WITH(NOLOCK) ON B.PRO_CODE = E.PRO_CODE
		WHERE 1 =1 
		AND B.DEP_DATE >= @START_DATE   
		AND B.DEP_DATE < @END_DATE 
		--AND B.DEP_DATE >= '2019-06-18' AND B.DEP_DATE < '2020-01-01' 
		AND A.MASTER_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@MASTER_CODE,','))
		AND A.SHOW_YN = 'Y' 
		--AND B.SHOW_YN = 'Y' 
		AND A.MASTER_CODE NOT LIKE 'K%' 
		AND A.ATT_CODE NOT IN ( 'T' ,'H' , 'R' ) -- 항공, 호텔 단품 상품 제외 
		AND B.TOUR_DAY > 1 -- 무박1일 제외 
		--ORDER BY B.PRO_CODE , D.PRICE_SEQ  
	) 
	T1
		LEFT JOIN NAVER_PKG_DETAIL T2 
			ON T1.MASTER_CODE = T2.MSTCODE 
			AND T1.CHILDCODE = T2.CHILDCODE
	WHERE 1=1

	--2019-11-28삭제
	--AND INOUT_NO_PRO_CODE IS NULL 
	--AND  INOUT_NO_PRICE_SEQ IS NULL 
	--AND  SELLPOINT_NO_PRO_CODE IS NULL 
	--AND  SELLPOINT_EX_PRO_CODE IS  NULL 
	--AND  PRO_POINT_NO_PRO_CODE IS  NULL 

	AND (T1.CHILDCODE = @CHILDCODE OR ISNULL(@CHILDCODE,'') = ''  )

	ORDER BY PRO_CODE , PRICE_SEQ 

PRINT '1.네이버 대상행사 테이블 임시테이블 등록  종료('   + CONVERT(VARCHAR,DATEDIFF( SS ,  @PROC_TIME , GETDATE())  ) +'s) ' + CHAR(13)+ CHAR(13)
--select * from #TMP_PRODUCT ORDER BY CHILDCODE 
 

	
	----------------------------------------------------------------------------------------
	-- 1. 일자별 스케쥴 우선등록 
	----------------------------------------------------------------------------------------

SET @PROC_TIME = GETDATE() 
PRINT '2-1.네이버 행사 스케쥴 테이블 임시테이블 등록 시작'

	-- 행사 스케쥴 임시 테이블 담기 
	SELECT * INTO #TMP_NAVER_PKG_DETAIL_SCH
	FROM (
		SELECT
		UPPER(Z.MASTER_CODE) AS??mstCode,
		(UPPER(Z.PRO_CODE) + '|' + CONVERT(VARCHAR(3), Z.PRICE_SEQ)) AS childCode,
		--E.DAY_SEQ , 
		E.DAY_NUMBER as [day],
		ROW_NUMBER() OVER ( PARTITION BY Z.PRO_CODE,Z.PRICE_SEQ, E.DAY_NUMBER ORDER BY Z.PRO_CODE,Z.PRICE_SEQ, E.DAY_NUMBER, F.CITY_SHOW_ORDER ,G.CNT_SHOW_ORDER )    as [index], 
		
		ISNULL(H.KOR_TITLE,NC.CNT_SUBJECT) AS [TITLE], -- 신규: 네이버 간략 추가 
		--H.KOR_TITLE as [TITLE] , -- 기존 : 간략일정 없음 

		J.N_CNT_CODE as spotPoiID, -- 네이버 컨텐츠 ID 
		'http://contents.verygoodtour.com/CONTENT/' + H3.REGION_CODE + '/' + H3.NATION_CODE + '/' + H3.STATE_CODE + '/' + H3.CITY_CODE 
		+ '/IMAGE/' + CONVERT(VARCHAR(10), H3.FILE_CODE) + (CASE WHEN ISNULL(H3.FILE_NAME_M,'') <> '' THEN '_2' ELSE '_3' END) + '.JPG' 
		AS imageUrl 
		 ,Z.PRO_CODE,Z.PRICE_SEQ,Z.SCH_SEQ,E.DAY_NUMBER
		 , (SELECT TOP 1 KOR_NAME FROM PUB_CITY WHERE CITY_CODE=  F.CITY_CODE ) AS CITY_NAME 
		 , H.CNT_CODE 
		 , CASE WHEN H.CNT_CODE IS NOT NULL THEN G.CNT_INFO ELSE NC.CNT_INFO END  AS CNT_INFO   -- 신규:네이버 간략 추가 
		 --, G.CNT_INFO  -- 기존: 간략일정 아님 
		 --,H.KOR_TITLE , H.CNT_TYPE  

		--F.CITY_SEQ,F.CITY_SHOW_ORDER,
		, F.CITY_CODE 
		--, ISNULL(J2.N_CITY_CODE,I.N_CITY_CODE)  AS N_CITY_CODE -- 네이버 컨텐츠 도시 우선 , 없으면 참좋은-네이버 매핑도시 
		, I.N_CITY_CODE  AS N_CITY_CODE -- 참좋은-네이버 매핑도시 우선 컨텐츠 도시 오류 많음

		--I2.NAME_KR ,I2.NAME_EN ,  -- 네이버 도시 코드 
		--F.MAINCITY_YN,

		--G.CNT_SEQ , G.CNT_SHOW_ORDER,G.CNT_CODE,
		--J.N_CNT_CODE as spotPoiID -- 네이버 컨텐츠 ID 
		--J2.NAME_KR , J2.NAME_EN , 

		FROM #TMP_PRODUCT Z WITH(NOLOCK)
		INNER JOIN PKG_DETAIL_SCH_MASTER  D  WITH(NOLOCK) ON Z.PRO_CODE = D.PRO_CODE AND Z.SCH_SEQ = D.SCH_SEQ 
		INNER JOIN PKG_DETAIL_SCH_DAY E  WITH(NOLOCK) ON Z.PRO_CODE = E.PRO_CODE AND Z.SCH_SEQ = E.SCH_SEQ 

		INNER JOIN PKG_DETAIL_SCH_CITY F  WITH(NOLOCK) ON Z.PRO_CODE = F.PRO_CODE AND Z.SCH_SEQ = F.SCH_SEQ AND E.DAY_SEQ = F.DAY_SEQ 
		INNER JOIN PKG_DETAIL_SCH_CONTENT G  WITH(NOLOCK) ON Z.PRO_CODE = G.PRO_CODE AND Z.SCH_SEQ = G.SCH_SEQ AND E.DAY_SEQ = G.DAY_SEQ  AND F.CITY_SEQ = G.CITY_SEQ

		---- 네이버 2019-09-30
		LEFT JOIN NAVER_PKG_DETAIL_SCH_CONTENT NC WITH(NOLOCK) ON Z.PRO_CODE = NC.PRO_CODE AND Z.SCH_SEQ = NC.SCH_SEQ AND E.DAY_SEQ = NC.DAY_SEQ  AND F.CITY_SEQ = NC.CITY_SEQ
		AND G.CNT_SEQ = NC.CNT_SEQ  
		--AND NC.CNT_SUBJECT NOT LIKE '%호텔%'
		--AND NC.CNT_SUBJECT NOT LIKE '%공항%'

		LEFT JOIN INF_MASTER H WITH(NOLOCK) ON G.CNT_CODE = H.CNT_CODE
			AND H.CNT_TYPE = 1  
			AND H.KOR_TITLE NOT LIKE ('% TIP')
			AND H.KOR_TITLE NOT LIKE ('% 팁')
	
			AND H.KOR_TITLE NOT LIKE ('%안내')

			AND H.KOR_TITLE NOT LIKE ('%유의사항%')
			AND H.KOR_TITLE NOT LIKE ('%주의사항%')
	
			AND H.KOR_TITLE NOT LIKE ('%입국심사%')
			AND H.KOR_TITLE NOT LIKE ('%공항%')
			AND H.KOR_TITLE NOT LIKE ('%입국')

			AND H.KOR_TITLE NOT LIKE ('%안전수칙%')
			AND H.KOR_TITLE NOT LIKE ('%대체일정%')

			AND H.KOR_TITLE NOT LIKE ('%주세요%')
			AND H.KOR_TITLE NOT LIKE ('%스케줄')

			AND H.KOR_TITLE NOT LIKE ('%Q&A')


		LEFT JOIN INF_FILE_MANAGER H2 WITH(NOLOCK) ON H.CNT_CODE = H2.CNT_CODE
			AND H2.FILE_CODE = ( SELECT TOP 1 BB.FILE_CODE FROM INF_FILE_MANAGER AA
				INNER JOIN INF_FILE_MASTER BB ON AA.FILE_CODE = BB.FILE_CODE 
				WHERE AA.CNT_CODE = H2.CNT_CODE AND BB.FILE_TYPE = 1 ORDER BY AA.SHOW_ORDER ) 
			--AND H2.FILE_CODE IN ( SELECT FILE_CODE FROM INF_FILE_MANAGER WHERE CNT_CODE = H2.CNT_CODE ) 

		LEFT JOIN INF_FILE_MASTER H3 WITH(NOLOCK) ON H2.FILE_CODE = H3.FILE_CODE 

		LEFT JOIN PUB_CITY_MAP_NAVER I 
			ON F.CITY_CODE = I.CITY_CODE 
			AND I.N_CITY_CODE = (SELECT TOP 1 N_CITY_CODE FROM PUB_CITY_MAP_NAVER AA WHERE AA.CITY_CODE =  I.CITY_CODE ORDER BY SHOW_ORDER ) 

		LEFT JOIN NAVER_CITY_CODE I2 
			ON I.N_CITY_CODE = I2.N_CITY_CODE 

		LEFT JOIN INF_MASTER_MAP_NAVER J 
			ON H.CNT_CODE = J.CNT_CODE 
			AND J.N_CNT_CODE = (SELECT TOP 1 N_CNT_CODE FROM INF_MASTER_MAP_NAVER AA WHERE AA.CNT_CODE =  J.CNT_CODE ORDER BY SHOW_ORDER ) 

		LEFT JOIN NAVER_POI_SPOT_CODE J2 
			ON J.N_CNT_CODE = J2.N_CNT_CODE 

		--WHERE  F.CITY_CODE NOT IN ( SELECT CITY_CODE FROM PUB_CITY WHERE NATION_CODE = 'KR' )  
		----AND H.CNT_TYPE = 1  -- 관광지만  
		WHERE  (H.CNT_CODE IS NULL)
			OR (H.CNT_CODE IS NOT NULL AND F.CITY_CODE NOT IN ( SELECT CITY_CODE FROM PUB_CITY WHERE NATION_CODE = 'KR' ))  
		--관광지가 없거나 , 관광지가 있는것중 국내 아닌것 

		
		--and Z.PRO_CODE=  'EPP4007-190601VIE'
		--WHERE Z.PRO_CODE IN ('APP5004-190501OZ','APP0717-190321VJ','JPP693-190330JJ','CPP345-190328','EPP4545-190410','EPP5000-190310TK','EPF001-190401KE','UPP243-190321OZ','UPP646-190408BIZ','IPF565-180325LJ5D')
		--WHERE Z.MASTEr_CODE = 'APP5004' AND B.DEP_DATE > '2019-03-01' AND B.DEP_DATE > '2019-04-01'
		--ORDER BY Z.PRO_CODE,Z.PRICE_SEQ,Z.SCH_SEQ,E.DAY_NUMBER,F.CITY_SHOW_ORDER ,G.CNT_SHOW_ORDER 
	) T 
	WHERE 1=1 
	and t.title is not null 
	ORDER BY childCode , [DAY],[INDEX] 

PRINT '2-1.네이버 행사 스케쥴 테이블 임시테이블 등록 종료('   + CONVERT(VARCHAR,DATEDIFF( SS ,  @PROC_TIME , GETDATE())  ) +'s) ' + CHAR(13)

	
	----------------------------------------------------------------------------------------
	-- 2. 스케쥴에 해당하는 방문 도시 업데이트 
	----------------------------------------------------------------------------------------
SET @PROC_TIME = GETDATE() 
PRINT '2-2.네이버 국가, 도시 리스트 업데이트 시작 '
	------------------------------------------------------------------------------

	--국가, 도시 리스트  1차 업데이트 (컨텐츠 관광지 ) 
	UPDATE A 
		SET CITYLIST = STUFF((SELECT ',' + AA.N_CITY_CODE 
				FROM #TMP_NAVER_PKG_DETAIL_SCH AA WITH(NOLOCK)
				WHERE AA.mstCode = A.MASTER_CODE
				AND AA.childCode = A.childCode
				AND ( 
					(AA.CNT_CODE IS NULL AND ( CHARINDEX('관광지',AA.TITLE) = 1 OR CHARINDEX('선택관광',AA.TITLE) = 1 OR CHARINDEX('자유시간',AA.TITLE) = 1 ) ) 
					OR (AA.CNT_CODE IS NOT NULL) 
				) 
				AND AA.N_CITY_CODE NOT IN (SELECT N_CITY_CODE FROM NAVER_CITY_CODE WHERE N_NATION_CODE ='KR')
				GROUP BY AA.N_CITY_CODE  
				FOR XML PATH('')), 1, 1, '') --AS cityList --	매칭된 네이버 도시코드 
		, COUNTRYLIST = STUFF((SELECT ',' + CC.N_NATION_CODE 
				FROM #TMP_NAVER_PKG_DETAIL_SCH AA WITH(NOLOCK)
					INNER JOIN PUB_CITY_MAP_NAVER BB WITH(NOLOCK) ON AA.N_CITY_CODE = BB.N_CITY_CODE 
					INNER JOIN NAVER_CITY_CODE CC WITH(NOLOCK) ON BB.N_CITY_CODE = CC.N_CITY_CODE 
				WHERE AA.mstCode = A.MASTER_CODE
				AND AA.childCode = A.childCode
				AND ( 
					(AA.CNT_CODE IS NULL AND ( CHARINDEX('관광지',AA.TITLE) = 1 OR CHARINDEX('선택관광',AA.TITLE) = 1 OR CHARINDEX('자유시간',AA.TITLE) = 1 ) ) 
					OR (AA.CNT_CODE IS NOT NULL) 
				) 
				AND CC.N_NATION_CODE  <> 'KR' 
				GROUP BY  CC.N_NATION_CODE 
				FOR XML PATH('')), 1, 1, '')  --AS countryList  --	매칭된 네이버 국가  
	FROM #TMP_PRODUCT A 
	--ON A.MSTCODE = B.MASTER_CODE 
	--AND A.childCode = B.PRO_CODE + '|'+ CONVERT(VARCHAR,B.PRICE_SEQ)


	-- 국가코드 관광지 2차 업데이트 
	
	-- 도시코드가 없는 것은 다시 갱신 하여 준다 
	-- 도시별 기준 단 경유지 포함될수 있음 
	UPDATE A 
	--select a.childcode , 
	SET countryList = 
		STUFF((SELECT ',' + DD.N_NATION_CODE
			FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK) 
			INNER JOIN PKG_DETAIL_SCH_DAY BB WITH(NOLOCK) 
				ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ  AND AA.DAY_SEQ = BB.DAY_SEQ  
			INNER JOIN PUB_CITY_MAP_NAVER CC WITH(NOLOCK) ON AA.CITY_CODE = CC.CITY_CODE
			AND CC.N_CITY_CODE = (SELECT TOP 1 N_CITY_CODE FROM PUB_CITY_MAP_NAVER AAA WHERE AAA.CITY_CODE =  CC.CITY_CODE ORDER BY SHOW_ORDER ) 
			INNER JOIN NAVER_CITY_CODE DD WITH(NOLOCK) ON CC.N_CITY_CODE = DD.N_CITY_CODE
			WHERE AA.PRO_CODE = A.PRO_CODE /*AND AA.SCH_SEQ = D.SCH_SEQ*/ AND CC.CITY_CODE NOT IN ( SELECT BBB.CITY_CODE FROM  PUB_CITY BBB WHERE NATION_CODE = 'KR' ) 
			GROUP BY DD.N_NATION_CODE
			FOR XML PATH('')), 1, 1, '') 
	--AS countryList , 
	, cityList = 
	STUFF((SELECT ',' + CC.N_CITY_CODE
		FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK) 
		INNER JOIN PKG_DETAIL_SCH_DAY BB WITH(NOLOCK) 
			ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ  AND AA.DAY_SEQ = BB.DAY_SEQ  
		INNER JOIN PUB_CITY_MAP_NAVER CC WITH(NOLOCK) ON AA.CITY_CODE = CC.CITY_CODE
		AND CC.N_CITY_CODE = (SELECT TOP 1 N_CITY_CODE FROM PUB_CITY_MAP_NAVER AAA WHERE AAA.CITY_CODE =  CC.CITY_CODE ORDER BY SHOW_ORDER ) 
		WHERE AA.PRO_CODE = A.PRO_CODE /*AND AA.SCH_SEQ = D.SCH_SEQ*/ AND CC.CITY_CODE NOT IN ( SELECT BBB.CITY_CODE FROM  PUB_CITY BBB WHERE NATION_CODE = 'KR' ) 
		GROUP BY CC.N_CITY_CODE
		FOR XML PATH('')), 1, 1, '') 
	--	AS cityList
	--SELECT *  -- 도시 없는것 
	FROM #TMP_PRODUCT A
	WHERE A.CITYLIST IS NULL 

	------------------------------------------------------------------------------

PRINT '2-2.네이버 국가, 도시 리스트 업데이트 종료 ('   + CONVERT(VARCHAR,DATEDIFF( SS ,  @PROC_TIME , GETDATE())  ) +'s) '+ CHAR(13)

	----------------------------------------------------------------------------------------
	--네이버 행사 상세 정보 
	----------------------------------------------------------------------------------------
	--1. 기본 정보 데이터 넣기 
	-- 최초 등록시 , 컬럼 변경시 

SET @PROC_TIME = GETDATE() 
PRINT '2-3.네이버 행사 임시 테이블 등록 시작 '
	------------------------------------------------

	-- 컬럼추가 주의!!!! 
	SELECT * INTO #TMP_NAVER_PKG_DETAIL 
	FROM (
		SELECT 
		UPPER(C.MASTER_CODE) AS??mstCode,
		--REPLACE(C.MASTER_NAME,',','_') AS??mstTitle,
		REPLACE((CASE WHEN LEN(C.MASTEr_NAME) > 80 THEN SUBSTRING(C.MASTER_NAME,1,80) ELSE C.MASTER_NAME END ),',','_') AS mstTitle , 
		(UPPER(B.PRO_CODE) + '|' + CONVERT(VARCHAR(3), D.PRICE_SEQ)) AS?childCode,
		REPLACE(B.PRO_NAME,',','_') + 

		CASE WHEN (SELECT COUNT(*) FROM PKG_DETAIL_PRICE WHERE PRO_CODE  = D.PRO_cODE ) > 1 THEN +'['+ D.PRICE_NAME +']' ELSE '' END  AS ?childTitle,
		B.NEW_DATE as createdDate ,

		-- 2019-06-20 추가 
		-- 기존 갱신 날짜 있으면 가져오기 , 없으면 신규현재 날짜 
		-- 기존 갱신 날짜 보다 ERP상품수정(생성)일이 크면 ERP상품수정(생성)일로
		--ISNULL(B.EDT_DATE,B.NEW_DATE) as updatedDate ,
		CASE WHEN ISNULL(Z.LAST_UPD_DATE,GETDATE()) < ISNULL(B.EDT_DATE,B.NEW_DATE) 
		THEN ISNULL(B.EDT_DATE,B.NEW_DATE) ELSE ISNULL(Z.LAST_UPD_DATE,GETDATE()) END as updatedDate ,

		CASE WHEN B.SALE_TYPE in ( 2,3) THEN 'Y' ELSE 'N' END AS isEmergency, -- SALE_TYPE ,  -- 모객특성  SaleTypeEnum { None, 일반모객, 긴급모객, 집중모객, 유도모객 }; 
		'/Affiliate/Naver/PackageDetail?ProCode='+ B.PRO_CODE + '&PriceSeq=' + CONVERT(VARCHAR,D.PRICE_SEQ) AS urlInfo_landingPc, 
		'/Affiliate/NaverMobile/PackageDetail?ProCode='+ B.PRO_CODE + '&PriceSeq=' + CONVERT(VARCHAR,D.PRICE_SEQ) AS urlInfo_landingMobile, 
		
		STUFF((SELECT TOP 10 ',' +
		('http://contents.verygoodtour.com/content/' + BB.REGION_CODE + '/' + BB.NATION_CODE + '/' + BB.STATE_CODE + '/' + BB.CITY_CODE + '/image/' + CONVERT(VARCHAR(10), BB.FILE_CODE) 
		+ (CASE WHEN ISNULL(BB.FILE_NAME_M,'') <> '' THEN '_2' ELSE '_3' END) + '.JPG')
			FROM PKG_DETAIL_FILE AA 
				INNER JOIN INF_FILE_MASTER BB 
				ON AA.FILE_CODE = BB.FILE_CODE 
			WHERE AA.PRO_CODE = B.PRO_CODE 
			ORDER BY AA.SHOW_ORDER
		FOR XML PATH('')), 1, 1, '') AS urlInfo_imageS ,

		-- 국가??countryList  도시 cityList
		-- 2단계에서 처리한 CITY 방문도시 리스트 조회 
		Z.COUNTRYLIST AS countryList , 
		Z.CITYLIST AS  cityList , 
		
		--STUFF((SELECT ',' + BB.NATION_CODE FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK)
		--		INNER JOIN PUB_CITY BB WITH(NOLOCK) ON AA.CITY_CODE = BB.CITY_CODE
		--	WHERE AA.PRO_CODE = B.PRO_CODE AND AA.SCH_SEQ = D.SCH_SEQ AND BB.NATION_CODE <> 'KR'
		--	GROUP BY BB.NATION_CODE
		--	FOR XML PATH('')), 1, 1, '') AS countryList,
		--STUFF((SELECT ',' + CC.N_CITY_CODE
		--	FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK) 
		--	INNER JOIN PKG_DETAIL_SCH_DAY BB WITH(NOLOCK) 
		--		ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ  AND AA.DAY_SEQ = BB.DAY_SEQ  
		--	INNER JOIN PUB_CITY_MAP_NAVER CC WITH(NOLOCK) ON AA.CITY_CODE = CC.CITY_CODE
		--	AND CC.N_CITY_CODE = (SELECT TOP 1 N_CITY_CODE FROM PUB_CITY_MAP_NAVER AAA WHERE AAA.CITY_CODE =  CC.CITY_CODE ORDER BY SHOW_ORDER ) 
		--	WHERE AA.PRO_CODE = B.PRO_CODE AND AA.SCH_SEQ = D.SCH_SEQ AND CC.CITY_CODE NOT IN ( SELECT BBB.CITY_CODE FROM  PUB_CITY BBB WHERE NATION_CODE = 'KR' ) 
		--	GROUP BY CC.N_CITY_CODE
		--	FOR XML PATH('')), 1, 1, '') AS cityList,

---- 국가코드 제대로 되었는지 확인용 
--STUFF((SELECT ',' + CC.KOR_NAME FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK)
--		INNER JOIN PUB_CITY BB WITH(NOLOCK) ON AA.CITY_CODE = BB.CITY_CODE
--		INNER JOIN PUB_NATION CC WITH(NOLOCK) ON BB.NATION_CODE = CC.NATION_CODE
--	WHERE AA.PRO_CODE = B.PRO_CODE AND AA.SCH_SEQ = D.SCH_SEQ AND BB.NATION_CODE <> 'KR'
--	GROUP BY CC.KOR_NAME
--	FOR XML PATH('')), 1, 1, '') AS NATION_NAMES,


---- 도시코드 제대로 되었는지 확인용 
--STUFF((SELECT ',' + DD.NAME_KR
--	FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK) 
--	INNER JOIN PUB_CITY_MAP_NAVER CC WITH(NOLOCK) ON AA.CITY_CODE = CC.CITY_CODE
--	AND CC.N_CITY_CODE = (SELECT TOP 1 N_CITY_CODE FROM PUB_CITY_MAP_NAVER AAA WHERE AAA.CITY_CODE =  CC.CITY_CODE ORDER BY SHOW_ORDER )
--	INNER JOIN NAVER_CITY_CODE DD 
--	ON CC.N_CITY_CODE = DD.N_CITY_CODE 
--	WHERE AA.PRO_CODE = B.PRO_CODE AND AA.SCH_SEQ = D.SCH_SEQ AND CC.CITY_CODE NOT IN ( SELECT BBB.CITY_CODE FROM  PUB_CITY BBB WHERE NATION_CODE = 'KR' ) 
--	GROUP BY DD.NAME_KR
--	FOR XML PATH('')), 1, 1, '') AS CITY_NAMES,

		-- 출발편 StartInfo ---------
--F.SEAT_CODE ,
		CONVERT(VARCHAR(10), B.DEP_DATE, 120) AS beginDate,
		CASE WHEN F.DEP_DEP_AIRPORT_CODE = 'PUS' AND F.TRANS_TYPE=2 THEN 'BS1' ELSE F.DEP_DEP_AIRPORT_CODE END AS beginCityCode, -- 19.11.05 부산항 추가 
		CASE WHEN F.TRANS_TYPE=2 THEN 'ship' ELSE 'flight' END AS beginRideType,-- 

		F.DEP_TRANS_CODE as beginFlight_airlineCode, 
		F.DEP_TRANS_CODE + RTRIM(F.DEP_TRANS_NUMBER) AS beginFlight_flightName,
		G1.TRANS_REAL_CODE AS beginFlight_codeShareName, -- 출발편 실제탑승 항공편 편명 
		CONVERT(DATETIME,CONVERT(VARCHAR(10), B.DEP_DATE, 120)  + ' ' + F.DEP_DEP_TIME + ':00') AS beginFlight_departureDate,
		CASE WHEN (SELECT COUNT(*) FROM PRO_TRANS_SEAT_SEGMENT WHERE SEAT_CODE  = F.SEAT_CODE AND TRANS_SEQ = 1  )  > 1 
				THEN (SELECT COUNT(*) FROM PRO_TRANS_SEAT_SEGMENT WHERE SEAT_CODE  = F.SEAT_CODE AND TRANS_SEQ = 1  ) -1 
					ELSE 0 END AS beginFlight_transfer,-- 

		CASE WHEN F.FARE_SEAT_TYPE = 3 THEN 'business' ELSE 'economy' END AS beginFlight_seatGrade,-- 좌석등급 (economy, business, first, premiumEconomy)
		'N' AS beginFlight_upgradable ,--[출발업그레이드가능여부],-- 항공 이용 좌석 업그레이드 가능 여부	true or false	true 
		CASE WHEN CHARINDEX('*',F.DEP_SPEND_TIME) > 0 THEN 0 ELSE DBO.FN_AIR_PRO_TRANS_FLYING_MINUTE(F.SEAT_CODE,1) END AS beginFlight_durationTime ,-- 비행시간	text	 
			
		'N' AS beginFlight_isMileage ,--[출발마일리지 적립여부],-- 마일리지 적립여부	true or false	true 
		'' AS beginFlight_mileageAirline,--마일리지 적립 항공사명	text	KE
		0 AS beginFlight_mileageCost ,--마일리지	number	5000
		'' AS beginFlight_mileageDescription,-- [출발마일리지 적립설명] ,--마일리지 적립 설명 텍스트	text	

		CASE WHEN F.TRANS_TYPE=2 THEN 
			CASE WHEN CHARINDEX('코비',B.PRO_NAME) > 0 THEN 'C76' 
				WHEN CHARINDEX('니나',B.PRO_NAME) > 0 THEN 'C82' 
				WHEN CHARINDEX('오션플라워',B.PRO_NAME) > 0 THEN 'C72' 
				ELSE F.DEP_TRANS_CODE END 
		END AS beginShip_shipCode,--
		CASE WHEN F.TRANS_TYPE=2 THEN CASE WHEN CHARINDEX('*',F.DEP_SPEND_TIME) > 0 THEN 0 ELSE DBO.FN_AIR_PRO_TRANS_FLYING_MINUTE(F.SEAT_CODE,1) END END AS beginShip_durationTime,--
		CASE WHEN F.TRANS_TYPE=2 THEN CONVERT(DATETIME,CONVERT(VARCHAR(10), B.DEP_DATE, 120)  + ' ' + F.DEP_DEP_TIME + ':00') END AS beginShip_departureDate,--


		-- 도착편 EndInfo---------
		CONVERT(VARCHAR(10), B.ARR_DATE, 120) AS endDate,
		CASE WHEN F.ARR_ARR_AIRPORT_CODE = 'PUS' AND F.TRANS_TYPE=2 THEN 'BS1' ELSE F.ARR_ARR_AIRPORT_CODE END AS endCityCode, -- 19.11.05 부산항 추가 
		CASE WHEN F.TRANS_TYPE=2 THEN 'ship' ELSE 'flight' END AS endRideType,-- 
		--2019-11-
		ISNULL(( SELECT TOP 1 AIRLINE_CODE FROM PRO_TRANS_SEAT_SEGMENT WITH(NOLOCK) WHERE SEAT_CODE = F.SEAT_CODE AND TRANS_SEQ=2 ORDER BY SEG_NO DESC ),F.ARR_TRANS_CODE) as endFlight_airlineCode,
		ISNULL(( SELECT TOP 1 AIRLINE_CODE FROM PRO_TRANS_SEAT_SEGMENT WITH(NOLOCK) WHERE SEAT_CODE = F.SEAT_CODE AND TRANS_SEQ=2 ORDER BY SEG_NO DESC ),F.ARR_TRANS_CODE)
		+RTRIM(ISNULL(( SELECT TOP 1 FLIGHT FROM PRO_TRANS_SEAT_SEGMENT WITH(NOLOCK) WHERE SEAT_CODE = F.SEAT_CODE AND TRANS_SEQ=2 ORDER BY SEG_NO DESC ),F.ARR_TRANS_NUMBER))AS endFlight_flightName,
		
		G2.TRANS_REAL_CODE AS endFlight_codeShareName, -- 도착 실제탑승 항공편 편명 
		CONVERT(DATETIME,CONVERT(VARCHAR(10), B.ARR_DATE, 120)  + ' ' + F.ARR_ARR_TIME + ':00') AS endFlight_arriveDate,
		CASE WHEN (SELECT COUNT(*) FROM PRO_TRANS_SEAT_SEGMENT WHERE SEAT_CODE  = F.SEAT_CODE AND TRANS_SEQ = 2  )  > 1 
				THEN (SELECT COUNT(*) FROM PRO_TRANS_SEAT_SEGMENT WHERE SEAT_CODE  = F.SEAT_CODE AND TRANS_SEQ = 2  ) -1 
					ELSE 0 END AS endFlight_transfer,-- 

		CASE WHEN F.FARE_SEAT_TYPE = 3 THEN 'business' ELSE 'economy' END AS endFlight_seatGrade,-- 좌석등급 (economy, business, first, premiumEconomy)
		'N' AS endFlight_upgradable ,--[출발업그레이드가능여부],-- 항공 이용 좌석 업그레이드 가능 여부	true or false	true 
		CASE WHEN CHARINDEX('*',F.ARR_SPEND_TIME) > 0 THEN 0 ELSE DBO.FN_AIR_PRO_TRANS_FLYING_MINUTE(F.SEAT_CODE,2) END AS endFlight_durationTime ,-- 비행시간	text	 
			
		'N' AS endFlight_isMileage ,--[출발마일리지 적립여부],-- 마일리지 적립여부	true or false	true 
		'' AS endFlight_mileageAirline,--마일리지 적립 항공사명	text	KE
		0 AS endFlight_mileageCost ,--마일리지	number	5000
		'' AS endFlight_mileageDescription,-- [출발마일리지 적립설명] ,--마일리지 적립 설명 텍스트	text	

		CASE WHEN F.TRANS_TYPE=2 THEN 
			CASE WHEN CHARINDEX('코비',B.PRO_NAME) > 0 THEN 'C76' 
				WHEN CHARINDEX('니나',B.PRO_NAME) > 0 THEN 'C82' 
				WHEN CHARINDEX('오션플라워',B.PRO_NAME) > 0 THEN 'C72' 
				ELSE F.ARR_TRANS_CODE END 
		END AS endShip_shipCode,--
		CASE WHEN F.TRANS_TYPE=2 THEN CASE WHEN CHARINDEX('*',F.ARR_SPEND_TIME) > 0 THEN 0 ELSE  DBO.FN_AIR_PRO_TRANS_FLYING_MINUTE(F.SEAT_CODE,2) END END AS endShip_durationTime,--
		CASE WHEN F.TRANS_TYPE=2 THEN CONVERT(DATETIME,CONVERT(VARCHAR(10), B.ARR_DATE, 120)  + ' ' + F.ARR_ARR_TIME + ':00') END AS endShip_departureDate,--

		B.TOUR_NIGHT as travelPeriod_night ,
		B.TOUR_DAY as travelPeriod_day,

		-- 상품 가격정보 priceInfo 
		D.ADT_PRICE AS?priceInfo_adult_basePrice,
		(SELECT AA.ADT_SALE_QCHARGE FROM DBO.XN_PKG_DETAIL_PRICE(B.PRO_CODE, D.PRICE_SEQ) AA WHERE AA.PRO_CODE = B.PRO_CODE) AS priceInfo_adult_surcharge,
		(SELECT AA.ADT_SALE_PRICE FROM DBO.XN_PKG_DETAIL_PRICE(B.PRO_CODE, D.PRICE_SEQ) AA WHERE AA.PRO_CODE = B.PRO_CODE) AS priceInfo_adult_total,
		H.ADT_COST AS?[priceInfo_adult_localPrice],
		H.CURRENCY AS [priceInfo_adult_localCurrency],

		D.CHD_PRICE as priceInfo_child_basePrice,
		(SELECT AA.CHD_SALE_QCHARGE FROM DBO.XN_PKG_DETAIL_PRICE(B.PRO_CODE, D.PRICE_SEQ) AA WHERE AA.PRO_CODE = B.PRO_CODE) AS priceInfo_child_surcharge,
		(SELECT AA.CHD_SALE_PRICE FROM DBO.XN_PKG_DETAIL_PRICE(B.PRO_CODE, D.PRICE_SEQ) AA WHERE AA.PRO_CODE = B.PRO_CODE) AS priceInfo_child_total,
		H.CHD_COST AS?[priceInfo_child_localPrice],
		H.CURRENCY AS [priceInfo_child_localCurrency],

		D.INF_PRICE AS priceInfo_infant_basePrice,
		0 AS priceInfo_infant_surcharge,
		D.INF_PRICE AS priceInfo_infant_total,
		
		H.INF_COST AS?[priceInfo_infant_localPrice],
		H.CURRENCY AS [priceInfo_infant_localCurrency],
		CASE WHEN D.INF_PRICE = 0  THEN '담당자문의' ELSE '' END AS priceInfo_infant_description,

		--(SELECT (AA.CURRENCY + ' ' + CONVERT(VARCHAR(10), AA.ADT_COST)) FROM DBO.XN_PKG_DETAIL_PRICE_GROUP_COST_SUMMARY(B.PRO_CODE, D.PRICE_SEQ) AA) AS [현지필수경비],
		--(CASE WHEN D.SGL_PRICE > 0 THEN ('싱글룸사용 ' + CONVERT(VARCHAR(10), D.SGL_PRICE)) ELSE '싱글룸사용 별도문의' END) AS [추가서비스명],
		(CASE WHEN D.SGL_PRICE > 0 THEN '싱글룸사용' ELSE '' END) AS [priceInfo_serviceCharge_serviceName],
		D.SGL_PRICE AS [priceInfo_serviceCharge_price],-- 별도문의 ?? 
		(CASE WHEN D.SGL_PRICE > 0 THEN 'KRW' END) AS [priceInfo_serviceCharge_currency],-- 별도문의 ?? 

		--??productIn 포함 ??productOut 불포함 
		STUFF((SELECT ',' + AA.INOUT_CODE 
				FROM PKG_DETAIL_PRICE_INOUT AA WITH(NOLOCK)
				WHERE AA.PRO_CODE = Z.PRO_CODE AND AA.PRICE_SEQ = Z.PRICE_SEQ AND AA.IN_YN ='Y' 
				ORDER BY RIGHT('0'+ REPLACE(AA.INOUT_CODE,'I',''),2) -- 코드순 정렬 추가 10.14
				FOR XML PATH('')), 1, 1, '') AS productIn,--	String[]	상품 포함내역 코드
		--'I1,I2,I3,I4,I5,I6,I7,I8' AS productIn, -- 임시 포함 
		STUFF((SELECT ',' + AA.INOUT_CODE 
				FROM PKG_DETAIL_PRICE_INOUT AA WITH(NOLOCK)
				WHERE AA.PRO_CODE = Z.PRO_CODE AND AA.PRICE_SEQ = Z.PRICE_SEQ AND AA.IN_YN <> 'Y' 
				ORDER BY RIGHT('0'+ REPLACE(AA.INOUT_CODE,'I',''),2)  -- 코드순 정렬 추가 10.14
				FOR XML PATH('')), 1, 1, '') AS productOut,--	String[]	상품 불포함내역 코드
		--'I10,I12' AS productOut, -- 임시 불포함 

		REPLACE(B.PKG_SUMMARY,',','_') AS productSellingPoints,-- !! 추가 
		E.TRAFFIC_POINT AS productPoints_traffic ,
		E.STAY_POINT AS productPoints_stay ,
		E.TOUR_POINT AS productPoints_tour ,
		E.EAT_POINT AS productPoints_eat ,
		E.DISCOUNT_POINT AS productPoints_discount ,
		E.OTHER_POINT AS productPoints_other,

		--!!!!!!!!! 선택관광 - 테이블 따로 ???
		(CASE WHEN (SELECT COUNT(*) FROM PKG_DETAIL_OPTION AA WITH(NOLOCK) 
			WHERE AA.PRO_CODE = B.PRO_CODE AND OPT_USETIME <> '' AND OPT_USETIME IS NOT NULL  ) > 0 THEN 'Y' ELSE 'N' END) AS?tourOption_isOptionalTour,
		--(SELECT COUNT(*) FROM PKG_MASTER_OPTION AA WITH(NOLOCK) WHERE AA.MASTER_CODE = A.MASTER_CODE) AS [선택관광횟수],
		--?tourOptionList	List	선택관광 목록 (isOptionalTour=true일 경우 필수입니다.)

		CASE WHEN ISNULL((SELECT COUNT(*) FROM PKG_DETAIL_SCH_DAY AA	
			INNER JOIN PKG_DETAIL_PRICE BB ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ 
		WHERE D.PRO_CODE = AA.PRO_CODE AND D.SCH_SEQ = AA.SCH_SEQ AND AA.FREE_SCH_YN = 'Y'),0) > 0 THEN 'Y' ELSE 'N' END  tourOption_isFreeSchedule,
		--0 AS [자유일정횟수],
		(SELECT COUNT(*) FROM PKG_DETAIL_SHOPPING AA WITH(NOLOCK) WHERE AA.PRO_CODE = B.PRO_CODE) AS shoppingTimeNum,

	------------------------------------------------------------------------------------------------------------------------------
	-- 좌석 및 부킹코드  
	-- 대기 예약 일단 2로 넘기기 2019-05-24

	CASE WHEN B.MAX_COUNT = 0 THEN 
		--좌석 제한 없을때 
		CASE WHEN LEFT(B.PRO_CODE,1) = 'E' THEN  -- 유럽
			CASE WHEN B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) > 40 THEN  B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) 
				ELSE B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) + 20  END -- 총좌석은 현재좌석 + 20 , 현재좌석 40 넘으면 현재좌석으로  
		ELSE  -- 그외 지역 
			B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) + 20  -- 총좌석은 현재좌석 + 20 , 최대좌석 제한 없음 
		END 
		WHEN B.MAX_COUNT < 0 THEN 2 ELSE B.MAX_COUNT  END AS bookingStatus_seatAll,  -- 대기시 대기 2좌석

	B.MIN_COUNT AS bookingStatus_seatMin,
	B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) AS bookingStatus_seatNow,
	--RSVPS	예약가능,LEVDC출발확정	,ARBKG대기예약,RSVCD예약마감
	(CASE WHEN B.SHOW_YN = 'N' OR B.RES_ADD_YN = 'N' THEN 'RSVCD' WHEN B.MAX_COUNT < 0 THEN 'ARBKG' WHEN B.DEP_CFM_YN IN( 'Y','F') THEN 'LEVDC' ELSE 'RSVPS' END) AS bookingStatus_bookingCode,

	--CASE WHEN B.MAX_COUNT = 0 THEN 99 WHEN B.MAX_COUNT < 0 THEN 2 ELSE B.MAX_COUNT  END AS bookingStatus_seatAll,
	--B.MIN_COUNT AS bookingStatus_seatMin,
	----0 AS bookingStatus_seatNow,
	----RSVPS	예약가능,LEVDC출발확정	,ARBKG대기예약,RSVCD예약마감
	--DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) AS bookingStatus_seatNow,
	----(CASE WHEN B.RES_ADD_YN = 'N' THEN 'RSVPS' WHEN B.MAX_COUNT < 0 THEN 'ARBKG' WHEN B.DEP_CFM_YN = 'Y' THEN 'LEVDC' ELSE 'RSVPS' END) AS bookingStatus_bookingCode,
	--(CASE WHEN B.RES_ADD_YN = 'N' THEN 'RSVCD' WHEN B.MAX_COUNT < 0 THEN 'ARBKG' WHEN B.DEP_CFM_YN = 'Y' THEN 'LEVDC' ELSE 'RSVPS' END) AS bookingStatus_bookingCode,
	----------------------------------------------------------------------------------------------------------------

		CASE WHEN SUBSTRING(C.MASTEr_CODE,3,1) ='F' THEN 'ART' ELSE 'PKG' END  AS productType ,
		DBO.FN_NAVER_PKG_MASTER_GET_THEME_LIST(C.MASTER_CODE) AS productThemeList, -- 2019-12-02 NEW THEME 
		(SELECT COUNT(*) FROM PRO_COMMENT AA WITH(NOLOCK) WHERE AA.MASTER_CODE = C.MASTER_CODE) AS reviewCount,

		ISNULL((SELECT AVG(AA.GRADE) FROM PRO_COMMENT AA WITH(NOLOCK) WHERE AA.MASTER_CODE = C.MASTER_CODE), 0) AS gradeCount,

		CASE WHEN B.TC_YN = 'Y' AND B.GUIDE_YN = 'Y' THEN 'all'
			WHEN B.TC_YN = 'Y' THEN 'leader'
			WHEN B.GUIDE_YN = 'Y' THEN 'local' ELSE 'none' END AS guideStatus ,
		
		REPLACE(REPLACE(REPLACE(C.KEYWORD,',',';'),'/',';'),' ','') AS hashtag,
		CASE WHEN B.UNITE_YN = 'Y' THEN 'Y' ELSE 'N' END as?isCombine
		--'' AS ??spotPoiList ,  -- 하단 스케쥴 리스트 테이블  
		--'' AS ??stayHotelList  -- 하단 가격 호텔 테이블  
		, GETDATE() AS NEW_DATE,
		-1 as productRank -- 행사랭크 사용안함. 마스터 행사로 이동  
		--상품 담당자 팀대표번호 
		--, CASE WHEN (SELECT KEY_NUMBER FROM EMP_TEAM WITH(NOLOCK) WHERE  TEAM_CODE = EMP.TEAM_CODE ) <> '' 
		-- THEN (SELECT REPLACe(KEY_NUMBER,'-','') FROM EMP_TEAM WITH(NOLOCK) WHERE  TEAM_CODE = EMP.TEAM_CODE ) ELSE '0221884000' END AS callNumber 
		 ,'0221852680' AS callNumber --고정 상담번호 
		
		-- 경비가 있으면 NOTIP N  , 없으면 NOTIP Y 
		 , case when ISNULL(H.ADT_COST,-1) > 0 THEN  'N' ELSE 'Y' END  isNotips  
		--, GETDATE() AS NEW_DATE  
	FROM #TMP_PRODUCT Z WITH(NOLOCK) 
	INNER JOIN PKG_DETAIL B WITH(NOLOCK) ON Z.PRO_CODE = B.PRO_CODE
	INNER JOIN PKG_DETAIL_PRICE D WITH(NOLOCK) ON Z.PRO_CODE = D.PRO_CODE --AND D.PRICE_SEQ IN (SELECT TOP 1 PRICE_SEQ FROM PKG_DETAIL_PRICE AA WITH(NOLOCK) WHERE AA.PRO_CODE = B.PRO_CODE ORDER BY AA.PRICE_SEQ)
	AND Z.PRICE_SEQ = D.PRICE_SEQ 
	INNER JOIN PKG_MASTER C WITH(NOLOCK) ON B.MASTER_CODE = C.MASTER_CODE

	LEFT JOIN PKG_DETAIL_SELL_POINT  E WITH(NOLOCK) ON B.PRO_CODE = E.PRO_CODE
	LEFT JOIN PRO_TRANS_SEAT F WITH(NOLOCK) ON B.SEAT_CODE = F.SEAT_CODE
	LEFT JOIN PRO_TRANS_MASTER G1 WITH(NOLOCK) ON F.DEP_TRANS_CODE = G1.TRANS_CODE AND F.DEP_TRANS_NUMBER = G1.TRANS_NUMBER 
		AND F.DEP_DEP_AIRPORT_CODE = G1.DEP_AIRPORT_CODE AND F.DEP_ARR_AIRPORT_CODE = G1.ARR_AIRPORT_CODE  
	LEFT JOIN PRO_TRANS_MASTER G2 WITH(NOLOCK) ON F.ARR_TRANS_CODE = G2.TRANS_CODE AND F.ARR_TRANS_NUMBER = G2.TRANS_NUMBER 
		AND F.ARR_DEP_AIRPORT_CODE = G2.DEP_AIRPORT_CODE AND F.ARR_ARR_AIRPORT_CODE = G2.ARR_AIRPORT_CODE  
	
	LEFT JOIN PKG_DETAIL_PRICE_GROUP_COST H WITH(NOLOCK) ON D.PRO_CODE = H.PRO_CODE AND D.PRICE_SEQ = H.PRICE_SEQ AND H.COST_SEQ = 1

	LEFT JOIN EMP_MASTER_DAMO EMP WITH(NOLOCK) 
		ON B.NEW_CODE = EMP.EMP_CODE 

	WHERE 1=1
	AND F.SEAT_CODE IS NOT NULL 

	--2019-11-28삭제
	--AND (ISNULL(E.TRAFFIC_POINT,'') <> ''  
	--	OR ISNULL(E.STAY_POINT,'') <> ''
	--	OR ISNULL(E.TOUR_POINT,'') <> ''
	--	OR ISNULL(E.EAT_POINT,'') <> ''
	--	OR ISNULL(E.DISCOUNT_POINT,'') <> ''
	--	OR ISNULL(E.OTHER_POINT,'') <> '')

	AND E.PRO_CODE IS NOT NULL 
	--ORDER BY Z.PRO_CODE , Z.PRICE_SEQ 
	) T 
	ORDER BY childCode
	
	--select PRO_CODE, AVG(CONVERT(DECIMAL,GRADE) )AS AVG_GRADE , COUNT(*) AS COM_COUNT from PRO_COMMENT WITH(NOLOCK)
	--WHERE PRO_CODE IS NOT NULL 
	--AND MASTER_CODE = 'EPP4645'
	--GROUP BY PRO_CODE 
	
PRINT '2-3.네이버 행사 임시 테이블 등록 종료 ('   + CONVERT(VARCHAR,DATEDIFF( SS ,  @PROC_TIME , GETDATE())  ) +'s) '+ CHAR(13)

	----------------------------------------------------------------------------------------
	-- 옵션 리스트   -- ????tourOptionList 
	----------------------------------------------------------------------------------------
	-- 
SET @PROC_TIME = GETDATE() 
PRINT '2-4.네이버 행사옵션 임시 테이블 등록 시작 '

	--  컬럼추가 주의!!!! 
	SELECT * INTO #TMP_NAVER_PKG_DETAIL_OPTION
	FROM (
		SELECT 
		UPPER(Z.MASTER_CODE) AS?mstCode,
		(UPPER(Z.PRO_CODE) + '|' + CONVERT(VARCHAR(3), Z.PRICE_SEQ)) AS ?childCode,
		--OPT_SEQ as opt_seq, 
		ROW_NUMBER()  OVER (PARTITION BY C.PRO_CODE  ORDER BY OPT_SEQ ) as opt_seq, 
		OPT_NAME as opt_name,
		DBO.FN_GET_ONLY_NUMBER_FROM_STRING(OPT_PRICE) as opt_price, 

		CASE 
			WHEN CHARINDEX('CHF',OPT_PRICE) > 0 OR CHARINDEX('프랑',OPT_PRICE) > 0 THEN 'CHF'
			WHEN CHARINDEX('EUR',OPT_PRICE) > 0 OR CHARINDEX('유로',OPT_PRICE) > 0 OR CHARINDEX('€',OPT_PRICE) > 0 THEN 'EUR'
			 WHEN CHARINDEX('JPY',OPT_PRICE) > 0 OR CHARINDEX('엔',OPT_PRICE) > 0 OR CHARINDEX('￥',OPT_PRICE) > 0  THEN 'JPY'
			 WHEN CHARINDEX('KRW',OPT_PRICE) > 0 OR CHARINDEX('원',OPT_PRICE) > 0 THEN 'KRW'
			 WHEN CHARINDEX('USD',OPT_PRICE) > 0 OR CHARINDEX('달러',OPT_PRICE) > 0 OR CHARINDEX('$',OPT_PRICE) > 0 
				OR CHARINDEX('#',OPT_PRICE) > 0  THEN 'USD' 

			 WHEN CHARINDEX('NZ',OPT_PRICE) > 0 THEN 'NZD'
			 WHEN CHARINDEX('AUD',OPT_PRICE) > 0 THEN 'AUD'

			 WHEN CHARINDEX('EP',UPPER(Z.MASTER_CODE)) > 0 THEN 'EUR' 
			 WHEN CHARINDEX('AP',UPPER(Z.MASTER_CODE)) > 0 THEN 'USD' 
			 --WHEN CHARINDEX('UP',UPPER(Z.MASTER_CODE)) > 0 THEN 'USD' 
			 
			 ELSE '' END  as opt_currency, 

		LTRIM(OPT_CONTENT) as opt_descriptions,
		OPT_USETIME as opt_taketime,  
		CASE WHEN CHARINDEX('미동행',OPT_COMPANION) > 0 
			OR CHARINDEX('X',OPT_COMPANION) > 0 
			OR CHARINDEX('비동행',OPT_COMPANION) > 0  
			OR CHARINDEX('안함',OPT_COMPANION) > 0  
			THEN 'N' ELSE 'Y' END  as isUseGuide,
	
		CASE WHEN OPT_PLACE = OPT_REPLACE THEN OPT_PLACE ELSE OPT_PLACE +'/' + OPT_REPLACE END AS [opt_absentDescriptions] ,
		OPT_COMPANION,
		OPT_PRICE AS OPT_PRICE_TXT 

		FROM #TMP_PRODUCT Z 
		INNER JOIN PKG_DETAIL_OPTION  C  WITH(NOLOCK) ON Z.PRO_CODE = C.PRO_CODE 
		--WHERE Z.MASTER_CODE ='APP5004'
		--WHERE Z.PRO_CODE IN ('APP5004-190501OZ','APP0717-190321VJ','JPP693-190330JJ','CPP345-190328','EPP4545-190410','EPP5000-190310TK','EPF001-190401KE','UPP243-190321OZ','UPP646-190408BIZ','IPF565-180325LJ5D')
		--ORDER BY Z.PRO_CODE,Z.PRICE_SEQ,C.OPT_SEQ 
		WHERE OPT_USETIME <> '' AND OPT_USETIME IS NOT NULL -- 빈값 제외 추가 
	) T 
	ORDER BY childCode ,opt_seq


PRINT '2-4.네이버 행사옵션 임시 테이블 등록 종료 ('   + CONVERT(VARCHAR,DATEDIFF( SS ,  @PROC_TIME , GETDATE())  ) +'s) '+ CHAR(13)

	----------------------------------------------------------------------------------------
	-- 일자별 호텔 식사 (추후 교통수단 ) 
	----------------------------------------------------------------------------------------
SET @PROC_TIME = GETDATE() 
PRINT '2-5.네이버 행사식사호텔 임시 테이블 등록 시작 '

	-- 임시테이블 등록  
	SELECT * INTO #TMP_NAVER_PKG_DETAIL_HOTEL
	FROM (
		SELECT 
		UPPER(Z.MASTER_CODE) AS?mstCode,
		(UPPER(Z.PRO_CODE) + '|' + CONVERT(VARCHAR(3), Z.PRICE_SEQ)) AS ?childCode,
		--C.PRO_CODE , C.PRICE_SEQ , D.SCH_SEQ , E.DAY_SEQ , 
		0 AS dayTotal,-- 사용안함으로 바뀜 
		E.DAY_NUMBER AS [day],
		ISNULL(F.DINNER_CODE_1,'') as eat_breakfast,
		LTRIM(REPLACE(REPLACE(REPLACE(F.DINNER_1,( SELECT TOP 1 PUB_VALUE FROM COD_PUBLIC WHERE PUB_TYPE LIKE 'PKG.MEALTYPE.NAVER' AND PUB_CODE =F.DINNER_CODE_1 ),'' ),'중국식',''),'기내식',''))  AS  eat_breakfastText,
		ISNULL(F.DINNER_CODE_2,'') as eat_lunch,
		LTRIM(REPLACE(REPLACE(REPLACE(F.DINNER_2,( SELECT TOP 1 PUB_VALUE FROM COD_PUBLIC WHERE PUB_TYPE LIKE 'PKG.MEALTYPE.NAVER' AND PUB_CODE =F.DINNER_CODE_2 ), '' ),'중국식',''),'기내식','')) AS  eat_lunchText,
		ISNULL(F.DINNER_CODE_3,'') as eat_dinner,
		LTRIM(REPLACE(REPLACE(REPLACE(F.DINNER_3,( SELECT TOP 1 PUB_VALUE FROM COD_PUBLIC WHERE PUB_TYPE LIKE 'PKG.MEALTYPE.NAVER' AND PUB_CODE =F.DINNER_CODE_3 ) , '' ),'중국식',''),'기내식','')) AS  eat_dinnerText,
		ISNULL(J.N_HOTEL_ID,'') AS stay_hotelPoiID,
		F.STAY_INFO as stay_text , 
		F.HTL_MASTER_CODE , 
		G.MASTER_NAME AS HOTEL_NAME 
		FROM #TMP_PRODUCT Z WITH(NOLOCK)
		INNER JOIN PKG_DETAIL_SCH_MASTER  D  WITH(NOLOCK) ON Z.PRO_CODE = D.PRO_CODE AND Z.SCH_SEQ = D.SCH_SEQ 
		INNER JOIN PKG_DETAIL_SCH_DAY E  WITH(NOLOCK) ON Z.PRO_CODE = E.PRO_CODE AND Z.SCH_SEQ = E.SCH_SEQ 

		---- 가격에 물린 호텔 
		LEFT JOIN PKG_DETAIL_PRICE_HOTEL F  WITH(NOLOCK) ON Z.PRO_CODE = F.PRO_CODE AND Z.PRICE_SEQ = F.PRICE_SEQ AND E.DAY_NUMBER = F.DAY_NUMBER

		LEFT JOIN HTL_MASTER G  WITH(NOLOCK) 
			ON F.HTL_MASTEr_CODE = G.MASTER_CODE 

		LEFT JOIN HTL_MASTER_MAP_NAVER J 
			ON G.MASTER_CODE = J.HTL_MASTER_CODE 
			AND J.N_HOTEL_ID = (SELECT TOP 1 N_HOTEL_ID FROM HTL_MASTER_MAP_NAVER AA WHERE AA.HTL_MASTER_CODE =  J.HTL_MASTER_CODE ORDER BY SHOW_ORDER ) 
		--WHERE Z.PRO_CODE=  'APP059-1905017C'
		--ORDER BY Z.PRO_CODE,Z.PRICE_SEQ,E.DAY_NUMBER 
	) T 
	ORDER BY childCode ,[DAY]


PRINT '2-5.네이버 행사식사호텔 임시 테이블 등록 종료 ('   + CONVERT(VARCHAR,DATEDIFF( SS ,  @PROC_TIME , GETDATE())  ) +'s) '+ CHAR(13)+ CHAR(13)



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
-- 모드에 따른 데이터 수정 
IF @PROCESS_MODE IN ( 0 ,1 )   -- 0업데이트만,1업데이트 하고 가져오기 , 
BEGIN

SET @PROC_TIME = GETDATE() 
PRINT '3.임시테이블 -> 실제테이블 이동' 

	---------------------------------------------------------------------------------------------------------------
	-- 임시테이블 -> 실제 테이블 넣기 
	---------------------------------------------------------------------------------------------------------------
	-- [상품정보]임시테이블 있을경우 삭제후 재등록 
	IF( OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL') IS NOT NULL) 
	BEGIN
		-- 해당 마스터, 행사 삭제후 
		DELETE NAVER_PKG_DETAIL_NEW
		WHERE mstCode = @MASTER_CODE 
		AND (ISNULL(@CHILDCODE,'') = '' OR CHILDCODE = @CHILDCODE)

		-- 새로 등록 
		INSERT INTO NAVER_PKG_DETAIL_NEW
		SELECT * FROM #TMP_NAVER_PKG_DETAIL 
		ORDER BY mstCode , childCode
	END 

	-- [상품옵션정보]임시테이블 있을경우 삭제후 재등록 
	IF( OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_OPTION') IS NOT NULL) 
	BEGIN
		-- 해당 마스터, 행사 삭제후 
		DELETE NAVER_PKG_DETAIL_OPTION_NEW
		WHERE mstCode = @MASTER_CODE 
		AND (ISNULL(@CHILDCODE,'') = '' OR CHILDCODE = @CHILDCODE)

		-- 새로 등록 
		INSERT INTO NAVER_PKG_DETAIL_OPTION_NEW
		SELECT * FROM #TMP_NAVER_PKG_DETAIL_OPTION
		ORDER BY mstCode , childCode ,opt_seq 
	END 

	-- [상품호텔정보]임시테이블 있을경우 삭제후 재등록 
	IF( OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_HOTEL') IS NOT NULL) 
	BEGIN
		-- 해당 마스터, 행사 삭제후 
		DELETE NAVER_PKG_DETAIL_HOTEL_NEW
		WHERE mstCode = @MASTER_CODE 
		AND (ISNULL(@CHILDCODE,'') = '' OR CHILDCODE = @CHILDCODE)

		-- 새로 등록 
		INSERT INTO NAVER_PKG_DETAIL_HOTEL_NEW 
		SELECT * FROM #TMP_NAVER_PKG_DETAIL_HOTEL
		ORDER BY mstCode , childCode ,[day]
	END 
	-- [상품가격정보]임시테이블 있을경우 삭제후 재등록 
	IF( OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_SCH') IS NOT NULL) 
	BEGIN
		-- 해당 마스터, 행사 삭제후 
		DELETE NAVER_PKG_DETAIL_SCH_NEW
		WHERE mstCode = @MASTER_CODE 
		AND (ISNULL(@CHILDCODE,'') = '' OR CHILDCODE = @CHILDCODE)

		-- 새로 등록 
		INSERT INTO NAVER_PKG_DETAIL_SCH_NEW 
		SELECT * FROM #TMP_NAVER_PKG_DETAIL_SCH
		ORDER BY mstCode , childCode ,[day] ,[index] 
	END 

PRINT '3.임시테이블 -> 실제테이블 이동 종료 ('   + CONVERT(VARCHAR,DATEDIFF( SS ,  @PROC_TIME , GETDATE())  ) +'s) '

END 
----------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------
IF @PROCESS_MODE IN (1,2) -- 1업데이트 하고 가져오기 ,2업데이트 하지 않음.생성될데이터만 가져오기 
----------------------------------------------------------------------------------------------
BEGIN
	SELECT * FROM #TMP_NAVER_PKG_DETAIL 
	ORDER BY mstCode , childCode

	SELECT * FROM #TMP_NAVER_PKG_DETAIL_OPTION
	ORDER BY mstCode , childCode ,opt_seq 

	SELECT * FROM #TMP_NAVER_PKG_DETAIL_HOTEL
	ORDER BY mstCode , childCode ,[day]

	SELECT * FROM #TMP_NAVER_PKG_DETAIL_SCH
	ORDER BY mstCode , childCode ,[day] ,[index] 
END 


	--테이블 있으면 지우기 
	IF OBJECT_id('tempdb..#TMP_PRODUCT') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_PRODUCT
	END
	IF OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_NAVER_PKG_DETAIL
	END
	IF OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_OPTION') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_NAVER_PKG_DETAIL_OPTION
	END
	IF OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_HOTEL') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_NAVER_PKG_DETAIL_HOTEL
	END
	IF OBJECT_id('tempdb..#TMP_NAVER_PKG_DETAIL_SCH') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_NAVER_PKG_DETAIL_SCH
	END
	IF OBJECT_id('tempdb..#TMP_PRODUCT') IS NOT NULL
	BEGIN
		DROP TABLE #TMP_PRODUCT
	END
 
	------------------------------------------------------------------------------

	-- 업데이트 날짜,상품수 갱신 
	-- 자상품 일경우 제외 
	IF ISNULL(@CHILDCODE,'') = '' AND @PROCESS_MODE IN ( 0,1) -- 업데이트 되었을때만 
	BEGIN
		UPDATE NAVER_PKG_MASTER_NEW
			set updateDate = getdate() 
			, updateChildCount = (select count(*) from NAVER_PKG_DETAIL where mstCode = @MASTER_CODE)
		WHERE mstCode = @MASTER_CODE
	END  
	
--- 좌석구하는 공식 
--유럽이 45명 예약되어 있으면 
--총좌석 45 , 현재좌석 45 , 잔여좌석0 

--유럽이 10명 예약되어 있으면
--총좌석 30 , 현재좌석 10 , 잔여좌석20

--유럽제외지역에 45명 예약되어 있으면 
--총좌석 65 , 현재좌석 45 , 잔여좌석20(무조건)
	--SELECT 
	--B.PRO_CODE , 
	--CASE WHEN B.MAX_COUNT = 0 THEN 
	--	--좌석 제한 없을때 
	--	CASE WHEN LEFT(B.PRO_CODE,1) = 'E' THEN  -- 유럽
	--		CASE WHEN B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) > 40 THEN  B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) 
	--			ELSE B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) + 20  END -- 총좌석은 현재좌석 + 20 , 40 넘으면 40 으로 
	--	ELSE  -- 그외 지역 
	--		B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) + 20  -- 총좌석은 현재좌석 + 20 , 최대좌석 제한 없음 
	--	END 
	--	WHEN B.MAX_COUNT < 0 THEN 2 ELSE B.MAX_COUNT  END AS bookingStatus_seatAll,  -- 대기시 대기 2좌석

	--B.MIN_COUNT AS bookingStatus_seatMin,
	--B.FAKE_COUNT+ DBO.FN_PRO_GET_RES_COUNT(B.PRO_CODE) AS bookingStatus_seatNow,
	--(CASE WHEN B.RES_ADD_YN = 'N' THEN 'RSVCD' WHEN B.MAX_COUNT < 0 THEN 'ARBKG' WHEN B.DEP_CFM_YN = 'Y' THEN 'LEVDC' ELSE 'RSVPS' END) AS bookingStatus_bookingCode,
	--B.MAX_COUNT , 
	--B.MIN_COUNT , 
	--B.FAKE_COUNT , 

	--B.RES_ADD_YN , D.*

	--FROM PKG_DETAIL B 
	--INNER JOIN ( 

	--		SELECT  TOP 100 
	--		bookingStatus_seatAll,
	--		bookingStatus_seatMin,
	--		bookingStatus_seatNow,
	--		bookingStatus_bookingCode,
	--		SUBSTRING(CHILDCODE,1,CHARINDEX('|',CHILDCODE) -1) AS PRO_CODE ,
	--		CONVERT(INT,SUBSTRING(CHILDCODE,CHARINDEX('|',CHILDCODE)+1 , LEN(CHILDCODE) - CHARINDEX('|',CHILDCODE) )) AS PRICE_SEQ 
	--		FROM NAVER_PKG_MASTER A 
	--			INNER JOIN NAVER_PKG_DETAIL B
	--				ON A.MSTCODE = B.MSTCODE 
	--		WHERE bookingStatus_seatNow > 40
	--) D 
	--ON B.PRO_CODE = D.PRO_CODE 

END 
 
GO
