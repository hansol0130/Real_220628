USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		김성호
-- Create date: 2011-06-02
-- Description:	CommonProvider 에서 넘어온 호텔의 정보를 임시 가격테이블에 저장한다.
-- History 
-- 2011-06-02 : 최초생성
-- 2011-07-30 : PROMOTION 적용
-- 2011-08-10 : 임시테이블 VGLog DB로 수정
-- 2011-09-16 : 오프라인 가격 포함 저장
-- 2011-11-08 : 가격수가 100건 이상만 사용하도록 수정
-- 2011-12-30 : 호텔 이벤트 순번 저장
-- 2012-01-05 : 호텔 마스터는 남은 이벤트가 있으면 무조건 이벤트 표시
-- 2012-08-23 : 임시로 GTA 호텔 차단
-- 2012-09-05 : GTA 호텔 차단 해제
-- 2014-03-19 : 등급 기본 별1로 수정
-- 2014-04-24 : PVD_ROOM_TYPE_CODE2 varchar(200)에서 varchar(300)으로 변경
-- =============================================

CREATE PROCEDURE [dbo].[SP_HTL_COM_HOTEL_LIST_INSERT]
	@CITY_CODE CHAR(3),
	@CHECK_IN DATETIME,
	@CHECK_OUT DATETIME,
	@ROOM_TYPE VARCHAR(10),
	@XML Nvarchar(max)
AS
BEGIN

DECLARE @docHandle int
DECLARE @SESSION_NO INT, @DAY_COUNT INT, @CITY_NAME VARCHAR(100), @ROOM_TYPE_COUNT INT, @USE_YN CHAR(1)

SET @USE_YN = 'Y'

-- SET NOCOUNT ON added to prevent extra result sets from
-- interfering with SELECT statements.
SET NOCOUNT ON;

EXEC sp_xml_preparedocument @docHandle OUTPUT, @xml;

SELECT @DAY_COUNT = ABS(DATEDIFF(DAY, @CHECK_IN, @CHECK_OUT))
SELECT @CITY_NAME = KOR_NAME FROM PUB_CITY WHERE CITY_CODE = @CITY_CODE
SELECT @ROOM_TYPE_COUNT = MAX(DIGIT_SEQ) FROM FN_SEQUENCE(@ROOM_TYPE)

INSERT INTO VGLog.dbo.HTL_TMP_PRICE_MASTER(
	CITY_CODE, CHECK_IN, CHECK_OUT, ROOM_TYPE, USE_YN
) VALUES (
	@CITY_CODE, @CHECK_IN, @CHECK_OUT, @ROOM_TYPE, @USE_YN
)

SET @SESSION_NO = @@IDENTITY;

WITH LIST AS
(
	SELECT C.MASTER_CODE, C.PRICE_SEQ, MIN(D.DIGIT_SEQ) AS [DIGIT_SEQ], MIN(D.DIGIT_VALUE) AS [DIGIT_VALUE]
		, MIN(A.MASTER_NAME) AS [MASTER_NAME]
		, MIN(A.HTL_GRADE) AS [HTL_GRADE]
		, MIN(A.CITY_CODE) AS [CITY_CODE]
		, MIN(C.ROOM_NAME) AS [ROOM_NAME]
		, MIN(B.BREAKFAST_YN) AS [BREAKFAST_YN]
		, MIN(C.BREAKFAST_NAME) AS [BREAKFAST_NAME]
		, (SUM(C.NET_PRICE) * MIN(D.DIGIT_VALUE)) AS [NET_PRICE_SUM]
		, (SUM(C.SELLER_PRICE) * MIN(D.DIGIT_VALUE)) AS [SELLER_PRICE_SUM]
		, MIN(A.RECOMMAND_ORDER) AS RECOMMAND_ORDER
		, (
			SELECT TOP 1 EVT_SEQ FROM HTL_EVENT
			WHERE MASTER_CODE = C.MASTER_CODE
				AND (SUP_CODE = 'VGT' OR SUP_CODE IS NULL)
				AND EVT_START_DATE <= @CHECK_IN AND EVT_END_DATE >= @CHECK_IN
				AND '1' = SUBSTRING(EVT_DAY, DATEPART(WEEKDAY, @CHECK_IN), 1)
				AND USE_YN = 'Y'
			ORDER BY EVT_END_DATE
		) AS [EVENT_SEQ]
	FROM HTL_MASTER A
	INNER JOIN HTL_PRICE_MASTER B ON A.MASTER_CODE = B.MASTER_CODE
	INNER JOIN HTL_PRICE_DETAIL C ON B.MASTER_CODE = C.MASTER_CODE AND B.PRICE_SEQ = C.PRICE_SEQ
	INNER JOIN FN_SEQUENCE(@ROOM_TYPE) D ON B.ROOM_TYPE = D.DIGIT_NUM
	WHERE
		-- 사용유무 체크
		A.CITY_CODE = @CITY_CODE AND A.SHOW_YN = 'Y' AND B.SHOW_YN = 'Y' AND C.SHOW_YN = 'Y'
		-- 숙박일 체크
		AND C.BOOKING_DATE >= @CHECK_IN AND C.BOOKING_DATE < @CHECK_OUT
		-- 룸타입 체크
		AND CONVERT(INT, SUBSTRING(@ROOM_TYPE, B.ROOM_TYPE, 1)) > 0
		-- 잔여 객실 수 체크
		AND C.ROOM_COUNT >= C.RES_COUNT + CONVERT(INT, SUBSTRING(@ROOM_TYPE, 1, 1))
	GROUP BY C.MASTER_CODE, C.PRICE_SEQ
	-- 숙박기간내 객실 존재 우무
	HAVING COUNT(*) = @DAY_COUNT
)
SELECT
	@SESSION_NO AS SESSION_NO
	, 20000 + ROW_NUMBER() OVER (ORDER BY A.MASTER_CODE ASC) AS HTL_NO
	, A.MASTER_CODE
	, A.MASTER_NAME
	, CASE A.HTL_GRADE 
		WHEN 10 THEN '별1'
		WHEN 15 THEN '별1_5'
		WHEN 20 THEN '별2'
		WHEN 25 THEN '별2_5'
		WHEN 30 THEN '별3'
		WHEN 35 THEN '별3_5'
		WHEN 40 THEN '별4'
		WHEN 45 THEN '별4_5'
		WHEN 50 THEN '별5'
		WHEN 55 THEN '별5_5'
		WHEN 60 THEN '별6'
		WHEN 65 THEN '별6_5'
		WHEN 70 THEN '별7'
		ELSE '별1'
	END AS HTL_GRADE
	, 'VGT' AS [SUP_CODE]
	, A.MASTER_CODE AS [X_HTL_CODE]
	, A.CITY_CODE AS [X_PROVIDER_CITY_CODE]
	, @CITY_NAME AS [X_PROVIDER_CITY_NAME]
	, REVERSE(SUBSTRING(REVERSE(
		CONVERT(VARCHAR(2), A.PRICE_SEQ) + '|' + ISNULL(CONVERT(VARCHAR(2), B.PRICE_SEQ), '') + '|'
		+ ISNULL(CONVERT(VARCHAR(2), C.PRICE_SEQ), '') + '|' + ISNULL(CONVERT(VARCHAR(2), D.PRICE_SEQ), '') + '|'
		+ ISNULL(CONVERT(VARCHAR(2), E.PRICE_SEQ), '')
	), 6-@ROOM_TYPE_COUNT, 100)) AS [X_PROVIDER_ROOM_TYPE_CODE1]
	, REVERSE(SUBSTRING(REVERSE(
		CONVERT(VARCHAR(30), A.ROOM_NAME) + ' / ' + ISNULL(CONVERT(VARCHAR(30), B.ROOM_NAME), '') + ' / '
		+ ISNULL(CONVERT(VARCHAR(30), C.ROOM_NAME), '') + ' / ' + ISNULL(CONVERT(VARCHAR(30), D.ROOM_NAME), '') + ' / '
		+ ISNULL(CONVERT(VARCHAR(30), E.ROOM_NAME), '')
	), 16-(@ROOM_TYPE_COUNT*3), 200)) AS [X_PROVIDER_ROOM_TYPE_NAME]
	, REVERSE(SUBSTRING(REVERSE(
		CONVERT(VARCHAR(2), A.DIGIT_VALUE) + '|' + ISNULL(CONVERT(VARCHAR(2), B.DIGIT_VALUE), '') + '|'
		+ ISNULL(CONVERT(VARCHAR(2), C.DIGIT_VALUE), '') + '|' + ISNULL(CONVERT(VARCHAR(2), D.DIGIT_VALUE), '') + '|'
		+ ISNULL(CONVERT(VARCHAR(2), E.DIGIT_VALUE), '')
	), 6-@ROOM_TYPE_COUNT, 100)) AS [X_PROVIDER_ROOM_TYPE_CODE2]
	, '확정' AS [X_CFM_TYPE]
	, (CASE A.BREAKFAST_YN WHEN 'Y' THEN 'T' ELSE 'N' END) AS [BREAKFAST_YN]
	, REVERSE(SUBSTRING(REVERSE(
		CONVERT(VARCHAR(30), A.BREAKFAST_NAME) + '|' + ISNULL(CONVERT(VARCHAR(30), B.BREAKFAST_NAME), '') + '|'
		+ ISNULL(CONVERT(VARCHAR(30), C.BREAKFAST_NAME), '') + '|' + ISNULL(CONVERT(VARCHAR(30), D.BREAKFAST_NAME), '') + '|'
		+ ISNULL(CONVERT(VARCHAR(30), E.BREAKFAST_NAME), '')
	), 6-@ROOM_TYPE_COUNT, 200)) AS [X_BREAKFAST_NAME]
	, 'KRW' AS [X_CURRENCY]
	, (A.NET_PRICE_SUM + ISNULL(B.NET_PRICE_SUM, 0) + ISNULL(C.NET_PRICE_SUM, 0)
		+ ISNULL(D.NET_PRICE_SUM, 0) + ISNULL(E.NET_PRICE_SUM, 0)) AS [X_NET_PRICE]
	, (A.SELLER_PRICE_SUM + ISNULL(B.SELLER_PRICE_SUM, 0) + ISNULL(C.SELLER_PRICE_SUM, 0)
		+ ISNULL(D.SELLER_PRICE_SUM, 0) + ISNULL(E.SELLER_PRICE_SUM, 0)) AS [X_SELLER_PRICE]
	, A.RECOMMAND_ORDER
	, A.EVENT_SEQ
INTO #TMP_HOTELS
FROM LIST A
LEFT JOIN LIST B ON A.MASTER_CODE = B.MASTER_CODE AND B.DIGIT_SEQ = 2 AND A.BREAKFAST_YN = B.BREAKFAST_YN
LEFT JOIN LIST C ON B.MASTER_CODE = C.MASTER_CODE AND C.DIGIT_SEQ = 3 AND B.BREAKFAST_YN = C.BREAKFAST_YN
LEFT JOIN LIST D ON C.MASTER_CODE = D.MASTER_CODE AND D.DIGIT_SEQ = 4 AND C.BREAKFAST_YN = D.BREAKFAST_YN
LEFT JOIN LIST E ON D.MASTER_CODE = E.MASTER_CODE AND E.DIGIT_SEQ = 5 AND D.BREAKFAST_YN = E.BREAKFAST_YN
WHERE A.DIGIT_SEQ = 1 
	AND (
		CASE @ROOM_TYPE_COUNT
			WHEN 1 THEN A.DIGIT_SEQ
			WHEN 2 THEN B.DIGIT_SEQ
			WHEN 3 THEN C.DIGIT_SEQ
			WHEN 4 THEN D.DIGIT_SEQ
			WHEN 5 THEN E.DIGIT_SEQ
		END
	) = @ROOM_TYPE_COUNT	-- 기간별 전체 자리가 있는 가격만 노출
UNION ALL
SELECT
	@SESSION_NO AS SESSION_NO
	, 10000 + ROW_NUMBER() OVER (ORDER BY A.X_HTL_CODE ASC) AS HTL_NO
	, B.MASTER_CODE
	, C.MASTER_NAME
	, CASE HTL_GRADE 
		WHEN 10 THEN '별1'
		WHEN 15 THEN '별1_5'
		WHEN 20 THEN '별2'
		WHEN 25 THEN '별2_5'
		WHEN 30 THEN '별3'
		WHEN 35 THEN '별3_5'
		WHEN 40 THEN '별4'
		WHEN 45 THEN '별4_5'
		WHEN 50 THEN '별5'
		WHEN 55 THEN '별5_5'
		WHEN 60 THEN '별6'
		WHEN 65 THEN '별6_5'
		WHEN 70 THEN '별7'
		ELSE '별1'
	END AS HTL_GRADE
	, B.SUP_CODE
	, A.X_HTL_CODE
	, A.X_PROVIDER_CITY_CODE
	, A.X_PROVIDER_CITY_NAME
	, A.X_PROVIDER_ROOM_TYPE_CODE1
	, A.X_PROVIDER_ROOM_TYPE_NAME
	, A.X_PROVIDER_ROOM_TYPE_CODE2
	, A.X_CFM_TYPE
	, SUBSTRING(A.X_BREAKFAST_YN, 1, 1) AS BREAKFAST_YN
	, A.X_BREAKFAST_NAME
	, A.X_CURRENCY
	, A.X_NET_PRICE
	, DBO.FN_GET_HOTEL_SELLER_PRICE(B.MASTER_CODE, B.SUP_CODE, @CHECK_IN, A.X_NET_PRICE) AS [X_SELLER_PRICE]
	, C.RECOMMAND_ORDER
	, (
		SELECT TOP 1 EVT_SEQ FROM HTL_EVENT
		WHERE MASTER_CODE = C.MASTER_CODE
			AND (SUP_CODE = B.SUP_CODE OR SUP_CODE IS NULL)
			AND EVT_START_DATE <= @CHECK_IN AND EVT_END_DATE >= @CHECK_IN
			AND '1' = SUBSTRING(EVT_DAY, DATEPART(WEEKDAY, @CHECK_IN), 1)
			AND USE_YN = 'Y'
		ORDER BY EVT_END_DATE
	) AS [EVENT_SEQ]
FROM OPENXML(@DOCHANDLE, N'/ArrayOfHotelResponseHotelPrice/HotelResponseHotelPrice/Rooms/Room', 0)
WITH
(
	X_PROVIDER_TYPE				varchar(20)		'../../@ProviderType',
	X_HTL_CODE					varchar(20)		'../../ItemCode',
	X_PROVIDER_CITY_CODE		varchar(10)		'../../ProviderCityCode',
	X_PROVIDER_CITY_NAME		varchar(30)		'../../ProviderCityName',
	X_PROVIDER_ROOM_TYPE_CODE1	varchar(100)	'./ProviderRoomTypeCode1',
	X_PROVIDER_ROOM_TYPE_NAME	varchar(50)		'./ProviderRoomTypeName',
	X_PROVIDER_ROOM_TYPE_CODE2	varchar(300)	'./ProviderRoomTypeCode2',
	X_CFM_TYPE					varchar(10)		'./ConfirmationType',
	X_BREAKFAST_YN				varchar(5)		'./IsBreakfast',
	X_BREAKFAST_NAME			varchar(50)		'./BreakfastName',
	X_CURRENCY					varchar(3)		'./Currency',
	X_NET_PRICE					money			'./NetPrice',
	X_SELLER_PRICE				money			'./SellerPrice'
) A
INNER JOIN HTL_CONNECT B ON B.SUP_CODE = A.X_PROVIDER_TYPE AND B.CONNECT_CODE = A.X_HTL_CODE AND B.PROVIDER_CITY_CODE = A.X_PROVIDER_CITY_CODE
INNER JOIN HTL_MASTER C ON C.MASTER_CODE = B.MASTER_CODE AND C.SHOW_YN = 'Y'

EXEC sp_xml_removedocument @docHandle

BEGIN TRY
	INSERT INTO VGLog.dbo.HTL_TMP_PRICE_HOTEL(
		SEQ_NO, MASTER_CODE, MASTER_NAME, HTL_GRADE, MIN_PRICE, ONEDAY_MIN_PRICE, RECOMMAND_ORDER, EVENT_SEQ
	)
	SELECT 
		SESSION_NO, 
		MASTER_CODE, 
		MASTER_NAME,
		HTL_GRADE,
		MIN(X_SELLER_PRICE),
		ROUND(MIN(X_SELLER_PRICE) / @DAY_COUNT, -2),
		RECOMMAND_ORDER,
		ISNULL(MAX(EVENT_SEQ), 0)
	FROM #TMP_HOTELS A
	GROUP BY 
		SESSION_NO, 
		MASTER_CODE, 
		MASTER_NAME,
		HTL_GRADE,
		RECOMMAND_ORDER;

	INSERT INTO VGLog.dbo.HTL_TMP_PRICE_DETAIL (
		SEQ_NO
		, MASTER_CODE
		, PRICE_NO
		, SUP_CODE
		, PVD_HTL_CODE
		, PVD_CITY_CODE
		, PVD_CITY_NAME
		, PVD_ROOM_TYPE_CODE1
		, PVD_ROOM_TYPE_NAME
		, PVD_ROOM_TYPE_CODE2
		, CFM_TYPE
		, BREAKFAST_YN
		, BREAKFAST_NAME
		, CURRENCY
		, NET_PRICE
		, SELLER_PRICE
		, ONEDAY_PRICE
		, EVENT_SEQ
	)
	SELECT 
		@SESSION_NO
		, MASTER_CODE
		, ROW_NUMBER() OVER (ORDER BY X_NET_PRICE ASC) AS PRICE_NO
		, SUP_CODE
		, X_HTL_CODE
		, X_PROVIDER_CITY_CODE
		, X_PROVIDER_CITY_NAME
		, X_PROVIDER_ROOM_TYPE_CODE1
		, UPPER(X_PROVIDER_ROOM_TYPE_NAME)
		, X_PROVIDER_ROOM_TYPE_CODE2
		, X_CFM_TYPE
		, UPPER(BREAKFAST_YN)
		, UPPER(X_BREAKFAST_NAME)
		, X_CURRENCY
		, X_NET_PRICE
		, X_SELLER_PRICE
		, ROUND((X_SELLER_PRICE / @DAY_COUNT), -2)
		, ISNULL(EVENT_SEQ, 0)
	FROM #TMP_HOTELS A
	
	-- 결과값이 있을때만 디비 저장
	IF (SELECT COUNT(*) FROM #TMP_HOTELS WHERE SESSION_NO = @SESSION_NO) < 100
	BEGIN
		UPDATE VGLog.dbo.HTL_TMP_PRICE_MASTER SET USE_YN = 'N' WHERE SEQ_NO = @SESSION_NO
	END

	DROP TABLE #TMP_HOTELS
END TRY
BEGIN CATCH

	DROP TABLE #TMP_HOTELS
END CATCH

-- 임시 테이블
--IF @CITY_CODE = 'PYX'
--BEGIN
--	INSERT INTO VGLog.dbo.HKG_TEMP (SEQ_NO, XML_TEMP) VALUES (@SESSION_NO, @XML)
--END

SELECT @SESSION_NO



END

GO
