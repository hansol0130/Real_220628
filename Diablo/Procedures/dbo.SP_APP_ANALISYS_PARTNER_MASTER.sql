USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: SP_APP_ANALISYS_PARTNER_MASTER
■ DESCRIPTION				: 마스터 행사 대상 구매 동반자 분석하여 PKG_MASTER_PARTNER 에 입력
■ INPUT PARAMETER			: 시작일자, 종료일자
■ OUTPUT PARAMETER			: 저장된 ROW 수
■ EXEC						: 

--	EXEC SP_APP_ANALISYS_PARTNER_MASTER '2019-12-08', '2019-12-15', '2019-12-15'


	SELECT * FROM PKG_MASTER_PARTNER_DATA

	SELECT * FROM PKG_MASTER_PARTNER
	
	UPDATE PKG_MASTER_PARTNER SET STAR_POINT = 0 WHERE STAR_POINT IS NULL
	UPDATE PKG_MASTER_PARTNER SET STAR_COUNT = 0 WHERE STAR_COUNT IS NULL

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2017-05-11		오준욱(IBS)		최초생성
   2017-10-27		김성호			커서 제거, 1년치예약으로 데이터 생산, 결과 데이터 저장으로 수정
   2019-07-17		김성호			고객타입 TC, 가이드, 법인고객 제거
   2019-12-18		김성호			평점평균, 평점갯수 추가
   2020-02-21		김성호			평점평균, 평점갯수 개별 업데이트
   2020-04-07		김성호			법인상품 제거 비교 값 "예약 담당팀"에서 "상품마스터 대표속성 BTMS"로 변경
									PKG_MASTER_PARTNER_DATA 테이블 등록된 법인상품 제거 및 등록 시 법인상품 반영 안되도록 수정
================================================================================================================*/ 
CREATE PROCEDURE [dbo].[SP_APP_ANALISYS_PARTNER_MASTER]
	@START_DATE		VARCHAR(10),
	@END_DATE		VARCHAR(10),
	@TODAY			VARCHAR(20)
AS
BEGIN


	/* PKG_MASTER_PARTNER_DATA 데이터 생성 *****************************************************************************/
	DECLARE @PARTNER_LIST TABLE (PRO_CODE PRO_CODE PRIMARY KEY, MASTER_CODE MASTER_CODE, DEP_DATE DATE, ALONE INT, FRIEND INT, FAMILY INT, COUPLE INT, MEETING INT, ETC INT)

	INSERT INTO @PARTNER_LIST (PRO_CODE, MASTER_CODE, DEP_DATE, ALONE, FRIEND, FAMILY, COUPLE, MEETING, ETC)
	SELECT PIV.PRO_CODE, PIV.MASTER_CODE, PIV.DEP_DATE, ISNULL(PIV.ALONE, 0), ISNULL(PIV.FRIEND, 0), ISNULL(PIV.FAMILY, 0), ISNULL(PIV.COUPLE, 0), ISNULL(PIV.MEETING, 0), ISNULL(PIV.ETC, 0)
	FROM (

		SELECT
			S.PRO_CODE, 
			S.MASTER_CODE,
			S.DEP_DATE,
			S.TOUR_TYPE AS [ATOUR_TYPE],
			COUNT(*) AS [ATOUR_COUNT]
		FROM (

			SELECT
				P.*,
				(
					CASE 										
						WHEN P.출발인원 = 1													THEN 'ALONE'
						WHEN P.출발인원 = 2 AND P.연령차 <=2 AND (P.남성 = 2 OR P.여성 = 2)	THEN 'FRIEND'
						WHEN P.예약팀내최저연령 <= 12 OR P.연령차 >= 20						THEN 'FAMILY'
						WHEN P.출발인원 % 2 = 0 AND P.출발인원 / 2 = P.남성					THEN 'COUPLE'
						WHEN P.출발인원 >= 3													THEN 'MEETING'
						ELSE 'ETC'
					END
				) AS [TOUR_TYPE]
			FROM (

				SELECT
					A2.MASTER_CODE,
					A2.PRO_CODE,
					A2.RES_CODE,
					MAX(A2.DEP_DATE) AS [DEP_DATE],
					COUNT(*) AS [출발인원],
					MAX(A2.출발자나이) AS [예약팀최고연령],
					MIN(A2.출발자나이) AS [예약팀내최저연령],
					(MAX(A2.출발자나이) - MIN(A2.출발자나이)) AS [연령차],
					SUM(CASE WHEN A2.출발자성별 = 'F' THEN 1 ELSE 0 END) AS '여성',
					SUM(CASE WHEN A2.출발자성별 = 'M' THEN 1 ELSE 0 END) AS '남성'
				FROM (

					SELECT 						
						A.MASTER_CODE,					
						A.PRO_CODE,					
						A.RES_CODE,					
						A.GENDER AS [예약자성별],
						DATEDIFF(YEAR,A.BIRTH_DATE,A.DEP_DATE) + 1 AS [예약자나이],
						B.CUS_NO AS [출발자고객번호],
						DATEDIFF(YEAR,B.BIRTH_DATE,A.DEP_DATE) + 1 AS [출발자나이],
						B.GENDER AS [출발자성별],
						C.DEP_DATE
					FROM RES_MASTER_damo A WITH(NOLOCK)
					INNER JOIN RES_CUSTOMER_damo B WITH(NOLOCK) ON A.RES_CODE = B.RES_CODE
					INNER JOIN PKG_DETAIL C WITH(NOLOCK) ON A.PRO_CODE = C.PRO_CODE
					INNER JOIN PKG_MASTER D WITH(NOLOCK) ON C.MASTER_CODE = D.MASTER_CODE
					WHERE
						C.DEP_DATE >= CONVERT(DATE, @START_DATE)
						AND C.DEP_DATE < DATEADD(DD, 1, CONVERT(DATE, @END_DATE))
						AND A.RES_STATE < 7					
						AND B.RES_STATE = 0					
						AND B.BIRTH_DATE IS NOT NULL					
						AND B.SALE_PRICE <> 0					
						AND A.PRO_TYPE = 1
						AND B.CUS_TYPE = 0 -- 고객타입 일반
						--AND A.PROFIT_TEAM_CODE <> 524 -- 법인고객 제외
						AND D.ATT_CODE <> 'U'
						AND B.CUS_NO NOT IN (SELECT AA.CUS_NO FROM TMP_TC_CUS_NO_INFO AA WITH(NOLOCK))
						AND B.CUS_NO NOT IN (SELECT AA.CUS_NO FROM COM_EMPLOYEE_MATCHING AA WITH(NOLOCK))
						AND B.CUS_NAME NOT LIKE '%인솔자%' AND B.CUS_NAME NOT LIKE '%가이드%'
				) A2									
				GROUP BY									
					A2.MASTER_CODE,
					A2.PRO_CODE,								
					A2.RES_CODE
			) P

		) S													
		GROUP BY S.MASTER_CODE, S.PRO_CODE, S.DEP_DATE, S.TOUR_TYPE

	) DDD
	PIVOT
	(
		max(DDD.ATOUR_COUNT)
		for DDD.ATOUR_TYPE in ([ALONE], [FRIEND], [FAMILY], [COUPLE], [MEETING], [ETC])
	) piv
	ORDER BY PIV.MASTER_CODE;

	-- 수정
	UPDATE A SET A.DEP_DATE = B.DEP_DATE, A.ALONE = B.ALONE, A.FRIEND = B.FRIEND, A.FAMILY = B.FAMILY, A.COUPLE = B.COUPLE, A.MEETING = B.MEETING, A.ETC = B.ETC
	FROM PKG_MASTER_PARTNER_DATA A
	INNER JOIN @PARTNER_LIST B ON A.PRO_CODE = B.PRO_CODE;
	
	-- 추가
	INSERT INTO PKG_MASTER_PARTNER_DATA (PRO_CODE, MASTER_CODE, DEP_DATE, ALONE, FRIEND, FAMILY, COUPLE, MEETING, ETC)
	SELECT A.PRO_CODE, A.MASTER_CODE, A.DEP_DATE, A.ALONE, A.FRIEND, A.FAMILY, A.COUPLE, A.MEETING, A.ETC
	FROM @PARTNER_LIST A
	LEFT JOIN PKG_MASTER_PARTNER_DATA B ON A.PRO_CODE = B.PRO_CODE
	WHERE B.PRO_CODE IS NULL;


	/* PKG_MASTER_PARTNER 데이터 생성 *****************************************************************************/
	DECLARE @MASTER_LIST TABLE (MASTER_CODE MASTER_CODE PRIMARY KEY, DEP_DATE DATE, ALONE INT, FRIEND INT, FAMILY INT, COUPLE INT, MEETING INT, ETC INT, TOTAL INT);

	INSERT INTO @MASTER_LIST (MASTER_CODE, DEP_DATE, ALONE, FRIEND, FAMILY, COUPLE, MEETING, ETC, TOTAL)
	SELECT
		A.MASTER_CODE, MAX(A.DEP_DATE) AS [DEP_DATE], SUM(ALONE) AS [ALONE], SUM(FRIEND) AS [FRIEND], SUM(FAMILY) AS [FAMILY], SUM(COUPLE) AS [COUPLE], SUM(MEETING) AS [MEETING], SUM(ETC) AS [ETC]
		, SUM(ALONE + FRIEND + FAMILY + COUPLE + MEETING + ETC) AS [TOTAL]
	FROM PKG_MASTER_PARTNER_DATA A WITH(NOLOCK)
	WHERE DEP_DATE >= DATEADD(YY, -1, GETDATE())
	GROUP BY A.MASTER_CODE;

	-- 수정
	UPDATE A SET A.NEW_DATE = B.DEP_DATE, A.ALONE = B.ALONE, A.FRIEND = B.FRIEND, A.FAMILY = B.FAMILY, A.COUPLE = B.COUPLE, A.MEETING = B.MEETING, A.ETC = B.ETC, A.TOTAL_COUNT = B.TOTAL
		, A.ALONE_PERCENT = (B.ALONE * 100 / B.TOTAL)
		, A.FRIEND_PERCENT = (B.FRIEND * 100 / B.TOTAL)
		, A.FAMILY_PERCENT = (B.FAMILY * 100 / B.TOTAL)
		, A.COUPLE_PERCENT = (B.COUPLE * 100 / B.TOTAL)
		, A.MEETING_PERCENT = (B.MEETING * 100 / B.TOTAL)
		, A.ETC_PERCENT = (B.ETC * 100 / B.TOTAL)
	FROM PKG_MASTER_PARTNER A
	INNER JOIN @MASTER_LIST B ON A.MASTER_CODE = B.MASTER_CODE
	WHERE B.TOTAL >= 15;

	-- 추가
	INSERT INTO PKG_MASTER_PARTNER (MASTER_CODE, NEW_DATE, ALONE, FRIEND, FAMILY, COUPLE, MEETING, ETC, TOTAL_COUNT, ALONE_PERCENT, FRIEND_PERCENT, FAMILY_PERCENT, COUPLE_PERCENT, MEETING_PERCENT, ETC_PERCENT)
	SELECT A.MASTER_CODE, A.DEP_DATE, A.ALONE, A.FRIEND, A.FAMILY, A.COUPLE, A.MEETING, A.ETC, A.TOTAL
		, (A.ALONE * 100 / A.TOTAL)
		, (A.FRIEND * 100 / A.TOTAL)
		, (A.FAMILY * 100 / A.TOTAL)
		, (A.COUPLE * 100 / A.TOTAL)
		, (A.MEETING * 100 / A.TOTAL)
		, (A.ETC * 100 / A.TOTAL)
	FROM @MASTER_LIST A
	LEFT JOIN PKG_MASTER_PARTNER B ON A.MASTER_CODE = B.MASTER_CODE
	WHERE B.MASTER_CODE IS NULL AND A.TOTAL >= 15;
	
	-- 평점 업데이트
	UPDATE A SET A.STAR_POINT = B.START_POINT, A.STAR_COUNT = B.START_COUNT
	FROM PKG_MASTER_PARTNER A
	INNER JOIN (
		SELECT AA.MASTER_CODE, ISNULL(AVG(AA.GRADE), 0) AS [START_POINT], ISNULL(COUNT(*), 0) AS [START_COUNT]
		FROM PRO_COMMENT AA WITH(NOLOCK)
		WHERE AA.MASTER_CODE IN (SELECT MASTER_CODE FROM PKG_MASTER_PARTNER PMP WITH(NOLOCK))
		GROUP BY AA.MASTER_CODE
	) B ON A.MASTER_CODE = B.MASTER_CODE

	INSERT INTO PKG_MASTER_PARTNER (MASTER_CODE, NEW_DATE, STAR_POINT, STAR_COUNT, ALONE, FRIEND, FAMILY, COUPLE, MEETING, ETC, ALONE_PERCENT, FRIEND_PERCENT, FAMILY_PERCENT, COUPLE_PERCENT, MEETING_PERCENT, ETC_PERCENT, TOTAL_COUNT)
	SELECT AA.MASTER_CODE
		, (SELECT MAX(NEW_DATE) FROM PKG_MASTER_PARTNER PMP WITH(NOLOCK))
		, ISNULL(AVG(AA.GRADE), 0) AS [START_POINT], ISNULL(COUNT(*), 0) AS [START_COUNT]
		, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	FROM PRO_COMMENT AA WITH(NOLOCK)
	INNER JOIN PKG_MASTER BB WITH(NOLOCK) ON AA.MASTER_CODE = BB.MASTER_CODE
	WHERE AA.MASTER_CODE NOT IN (SELECT MASTER_CODE FROM PKG_MASTER_PARTNER PMP WITH(NOLOCK))
	GROUP BY AA.MASTER_CODE

	/* 금일 대상 데이터 *****************************************************************************/
	SELECT COUNT(*) AS COUNT FROM @PARTNER_LIST;

END
GO
