USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING
■ DESCRIPTION				: 2019 네이버 패키지 상품연동 상품생성
■ INPUT PARAMETER			: 
■ OUTPUT PARAMETER			: 
■ EXEC						: SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING ''

 --SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL ''

SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'EPP3017'
GO 
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'APP1016'
GO 
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'XPP3019'
GO 
SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING 'JPP6677'

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
2019-03-18			박형만			
================================================================================================================*/ 
CREATE  PROC [dbo].[SP_PKG_MASTER_SELECT_PRODUCT_NAVER_DETAIL_SETTING_BAK]
	@MASTER_CODE VARCHAR(10)
AS
BEGIN
	--SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

--DECLARE @MASTER_CODE VARCHAR(1000)
--------SET @MASTER_CODE = 'APP2787,APP2091,APP1833,APP5959,APP2525'
--SET @MASTER_CODE = 'EPP3017'
------SELECT DATA FROM DBO.FN_SPLIT(@MASTER_CODE,',')

	IF OBJECT_id('tempdb..#TMP_PRODUCT') IS NOT NULL
		DROP TABLE #TMP_PRODUCT

	CREATE TABLE #TMP_PRODUCT (MASTER_CODE VARCHAR(20), PRO_CODE VARCHAR(20) , PRICE_SEQ INT , SCH_SEQ INT  ) 	


	INSERT INTO  #TMP_PRODUCT 
	select A.MASTER_CODE , B.PRO_CODE , D.PRICE_SEQ  , D.SCH_SEQ 
	FROM PKG_MASTER A WITH(NOLOCK)
	INNER JOIN PKG_DETAIL B WITH(NOLOCK) ON A.MASTER_CODE = B.MASTER_CODE
	INNER JOIN PKG_DETAIL_PRICE D WITH(NOLOCK) ON B.PRO_CODE = D.PRO_CODE
	WHERE 1 =1 
	AND B.DEP_DATE >= '2019-06-01' AND B.DEP_DATE < '2019-07-01' 
	--AND B.DEP_DATE > GETDAtE() 
	--AND A.MASTER_CODE = @MASTER_CODE -- ,'APP2091','APP1833','APP5959','APP2525','JPP6644','JPP6640','JPP6620','JPP6699','JPP310','JPP654','JPP676','JPP696','JPP613','JPP693','UPP1719','UPP170','UPP171','UPP1531','UPP142','APP2787','APP2091','APP1833','APP5959','APP2525','IPF560','IPF567','IPF660','IPF665','IPF667','APP059','APP1100','APP5400','APP1650A','APP138','APP123','APP133','APP129','APP135')
	AND A.MASTER_CODE IN (SELECT DATA FROM DBO.FN_SPLIT(@MASTER_CODE,','))

	AND A.SHOW_YN = 'Y' 
	AND B.SHOW_YN = 'Y' 
	and a.master_code not like 'k%' 
	AND A.ATT_CODE NOT IN ( 'T' ,'H' , 'R' ) -- 항공, 호텔 단품 상품 제외 
	ORDER BY B.PRO_CODE , D.PRICE_SEQ  

	--select * from #TMP_PRODUCT 
 
	----------------------------------------------------------------------------------------
	--네이버 행사 상세 정보 
	----------------------------------------------------------------------------------------

	--1. 기본 정보 데이터 넣기 

	-- 최초 등록시 , 컬럼 변경시 
	--SELECT * INTO NAVER_PKG_DETAIL	FROM (

	-- 해당 마스터 삭제후 
	DELETE NAVER_PKG_DETAIL 
	WHERE mstCode = @MASTER_CODE 
	-- 재등록 
	-- 컬럼추가 주의!!!! 
	INSERT INTO NAVER_PKG_DETAIL 
	SELECT * FROM (
		SELECT 
		UPPER(C.MASTER_CODE) AS??mstCode,
		REPLACE(C.MASTER_NAME,',','_') AS??mstTitle,
		(UPPER(B.PRO_CODE) + '|' + CONVERT(VARCHAR(3), D.PRICE_SEQ)) AS ?childCode,
		REPLACE(B.PRO_NAME,',','_') + 
		CASE WHEN (SELECT COUNT(*) FROM PKG_DETAIL_PRICE WHERE PRO_CODE  = D.PRO_cODE ) > 1 THEN +'['+ D.PRICE_NAME +']' ELSE '' END  AS ?childTitle,
		CONVERT(VARCHAR(19),B.NEW_DATE,121) AS createdDate,
		CONVERT(VARCHAR(19),B.EDT_DATE,121) AS updatedDate,
		CASE WHEN B.SALE_TYPE = 2 THEN 'true' ELSE 'false' END AS isEmergency, -- SALE_TYPE ,  -- 모객특성  SaleTypeEnum { None, 일반모객, 긴급모객, 집중모객, 유도모객 }; 
		'http://www.verygoodtour.com/Product/Package/PackageDetail?ProCode='+ B.PRO_CODE + '&PriceSeq=' + CONVERT(VARCHAR,D.PRICE_SEQ) AS urlInfo_landingPc, 
		'http://www.verygoodtour.com/Mov2/Product/PackageDetail?ProCode='+ B.PRO_CODE + '&PriceSeq=' + CONVERT(VARCHAR,D.PRICE_SEQ) AS urlInfo_landingMobile, 
		
		STUFF((SELECT TOP 30 ',' +
		('http://contents.verygoodtour.com/content/' + BB.REGION_CODE + '/' + BB.NATION_CODE + '/' + BB.STATE_CODE + '/' + BB.CITY_CODE + '/image/' + CONVERT(VARCHAR(10), BB.FILE_CODE) + (CASE WHEN BB.FILE_NAME_M IS NOT NULL THEN '_2' ELSE '_3' END) + '.JPG')
			FROM PKG_DETAIL_FILE AA 
				INNER JOIN INF_FILE_MASTER BB 
				ON AA.FILE_CODE = BB.FILE_CODE 
			WHERE AA.PRO_CODE = B.PRO_CODE 
		FOR XML PATH('')), 1, 1, '') AS urlInfo_imageS ,

		-- 국가??countryList  도시 cityList
		STUFF((SELECT ',' + BB.NATION_CODE FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK)
				INNER JOIN PUB_CITY BB WITH(NOLOCK) ON AA.CITY_CODE = BB.CITY_CODE
			WHERE AA.PRO_CODE = B.PRO_CODE AND AA.SCH_SEQ = D.SCH_SEQ AND BB.NATION_CODE <> 'KR'
			GROUP BY BB.NATION_CODE
			FOR XML PATH('')), 1, 1, '') AS countryList,
		STUFF((SELECT ',' + CC.N_CITY_CODE
			FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK) 
			INNER JOIN PKG_DETAIL_SCH_DAY BB WITH(NOLOCK) 
				ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ  AND AA.DAY_SEQ = BB.DAY_SEQ  
			INNER JOIN PUB_CITY_MAP_NAVER CC WITH(NOLOCK) ON AA.CITY_CODE = CC.CITY_CODE
			AND CC.N_CITY_CODE = (SELECT TOP 1 N_CITY_CODE FROM PUB_CITY_MAP_NAVER AAA WHERE AAA.CITY_CODE =  CC.CITY_CODE ORDER BY SHOW_ORDER ) 
			WHERE AA.PRO_CODE = B.PRO_CODE AND AA.SCH_SEQ = D.SCH_SEQ AND CC.CITY_CODE NOT IN ( SELECT BBB.CITY_CODE FROM  PUB_CITY BBB WHERE NATION_CODE = 'KR' ) 
			GROUP BY CC.N_CITY_CODE
			FOR XML PATH('')), 1, 1, '') AS cityList,
		--STUFF((SELECT ',' + DD.NAME_KR
		--	FROM PKG_DETAIL_SCH_CITY AA WITH(NOLOCK) 
		--	INNER JOIN PUB_CITY_MAP_NAVER CC WITH(NOLOCK) ON AA.CITY_CODE = CC.CITY_CODE
		--	AND CC.N_CITY_CODE = (SELECT TOP 1 N_CITY_CODE FROM PUB_CITY_MAP_NAVER AAA WHERE AAA.CITY_CODE =  CC.CITY_CODE ORDER BY SHOW_ORDER )
		--	INNER JOIN NAVER_CITY_CODE DD 
		--	ON CC.N_CITY_CODE = DD.N_CITY_CODE 
		--	WHERE AA.PRO_CODE = B.PRO_CODE AND AA.SCH_SEQ = D.SCH_SEQ AND CC.CITY_CODE NOT IN ( SELECT BBB.CITY_CODE FROM  PUB_CITY BBB WHERE NATION_CODE = 'KR' ) 
		--	GROUP BY DD.NAME_KR
		--	FOR XML PATH('')), 1, 1, '') AS CITY_NAMES,

		-- 출발편 StartInfo ---------
--F.SEAT_CODE ,
		CONVERT(VARCHAR(10), B.DEP_DATE, 120) AS ??startInfo_startDate,
		REPLACE(F.DEP_DEP_TIME,':','') AS startInfo_startTime,
		(CASE
			WHEN(DATEPART(WEEKDAY,B.DEP_DATE) = '1') THEN 'SUN'
			WHEN(DATEPART(WEEKDAY,B.DEP_DATE) = '2') THEN 'MON'
			WHEN(DATEPART(WEEKDAY,B.DEP_DATE) = '3') THEN 'TUE'
			WHEN(DATEPART(WEEKDAY,B.DEP_DATE) = '4') THEN 'WED'
			WHEN(DATEPART(WEEKDAY,B.DEP_DATE) = '5') THEN 'THU'
			WHEN(DATEPART(WEEKDAY,B.DEP_DATE) = '6') THEN 'FRI'
			WHEN(DATEPART(WEEKDAY,B.DEP_DATE) = '7') THEN 'SAT' END) AS startInfo_startDay,
		F.DEP_DEP_AIRPORT_CODE as startInfo_departures,
		F.DEP_TRANS_CODE as startInfo_airlineCode, 
		F.DEP_TRANS_CODE + F.DEP_TRANS_NUMBER AS startInfo_airlineName,
	
		G1.TRANS_REAL_CODE AS startInfo_airCodeShareName, -- 출발편 실제탑승 항공편 편명 
		CASE WHEN F.TRANS_TYPE=2 THEN F.DEP_TRANS_CODE END AS startInfo_shipCode,-- 선박코드 
		
		CASE WHEN ISNULL((SELECT MAX(SEG_NO) FROM PRO_TRANS_MASTER_SEGMENT 
			WHERE F.DEP_TRANS_NUMBER = TRANS_NUMBER AND F.DEP_TRANS_CODE = TRANS_CODE
			AND F.DEP_DEP_AIRPORT_CODE = DEP_AIRPORT_CODE AND F.DEP_ARR_AIRPORT_CODE = ARR_AIRPORT_CODE  ),1) > 1 THEN 'false' ELSE 'true' END AS startInfo_isDirectflight,--직항여부 직항:true, 경유:false
		CASE WHEN ISNULL((SELECT MAX(SEG_NO) FROM PRO_TRANS_MASTER_SEGMENT 
			WHERE F.DEP_TRANS_NUMBER = TRANS_NUMBER AND F.DEP_TRANS_CODE = TRANS_CODE
			AND F.DEP_DEP_AIRPORT_CODE = DEP_AIRPORT_CODE AND F.DEP_ARR_AIRPORT_CODE = ARR_AIRPORT_CODE  ),1) > 1 THEN 
			(	SELECT MAX(SEG_NO) FROM PRO_TRANS_MASTER_SEGMENT WHERE F.DEP_TRANS_NUMBER = TRANS_NUMBER AND F.DEP_TRANS_CODE = TRANS_CODE
				AND F.DEP_DEP_AIRPORT_CODE = DEP_AIRPORT_CODE AND F.DEP_ARR_AIRPORT_CODE = ARR_AIRPORT_CODE ) -1 ELSE 0 END AS startInfo_transferNum,-- 경유 횟수 (출발편 경유 횟수)
		CASE WHEN F.FARE_SEAT_TYPE = 3 THEN 2 ELSE 1 END AS startInfo_seatGrade,--!!!!!!!!이코노미 : 1 / 비즈니스 : 2
		'false' AS startInfo_isSeatUpgrade ,--[출발업그레이드가능여부],-- 항공 이용 좌석 업그레이드 가능 여부	true or false	true 
		'false' AS startInfo_mileage_isMileage ,--[출발마일리지 적립여부],-- 마일리지 적립여부	true or false	true 
		'' AS startInfo_mileage_airline,--마일리지 적립 항공사명	text	KE
		0 AS startInfo_mileage_price ,--마일리지	number	5000
		'' AS startInfo_mileage_description,-- [출발마일리지 적립설명] ,--마일리지 적립 설명 텍스트	text	
		CASE WHEN CHARINDEX(':',F.DEP_SPEND_TIME) > 0 THEN '약 ' + REPLACE(SUBSTRING(F.DEP_SPEND_TIME,1,2),'-','') +'시간'  
		+ SUBSTRING(F.DEP_SPEND_TIME,4,6) +'분 소요' END   AS startInfo_flightTime ,-- 비행시간	text	약 11시간 55분 소요

		-- 도착편 EndInfo---------
		CONVERT(VARCHAR(10), F.ARR_ARR_DATE, 120) AS endInfo_endDate,
		REPLACE(F.ARR_ARR_TIME,':','') AS endInfo_endTime ,
		(CASE
			WHEN(DATEPART(WEEKDAY,F.ARR_ARR_DATE) = '1') THEN 'SUN'
			WHEN(DATEPART(WEEKDAY,F.ARR_ARR_DATE) = '2') THEN 'MON'
			WHEN(DATEPART(WEEKDAY,F.ARR_ARR_DATE) = '3') THEN 'TUE'
			WHEN(DATEPART(WEEKDAY,F.ARR_ARR_DATE) = '4') THEN 'WED'
			WHEN(DATEPART(WEEKDAY,F.ARR_ARR_DATE) = '5') THEN 'THU'
			WHEN(DATEPART(WEEKDAY,F.ARR_ARR_DATE) = '6') THEN 'FRI'
			WHEN(DATEPART(WEEKDAY,F.ARR_ARR_DATE) = '7') THEN 'SAT' END) AS endInfo_endDay ,
		F.ARR_ARR_AIRPORT_CODE as endInfo_destination,
		F.ARR_TRANS_CODE as endInfo_airlineCode ,
		F.ARR_TRANS_CODE + F.ARR_TRANS_NUMBER AS endInfo_airlineName ,
		G2.TRANS_REAL_CODE AS endInfo_airCodeShareName, 
		CASE WHEN F.TRANS_TYPE=2 THEN F.ARR_TRANS_CODE END AS endInfo_shipCode,
		CASE WHEN ISNULL((SELECT MAX(SEG_NO) FROM PRO_TRANS_MASTER_SEGMENT 
			WHERE F.ARR_TRANS_NUMBER = TRANS_NUMBER AND F.ARR_TRANS_CODE = TRANS_CODE
			AND F.ARR_DEP_AIRPORT_CODE = DEP_AIRPORT_CODE AND F.ARR_ARR_AIRPORT_CODE = ARR_AIRPORT_CODE  ),1) > 1 THEN 'false' ELSE 'true' END AS endInfo_isDirectflight,
		CASE WHEN ISNULL((SELECT MAX(SEG_NO) FROM PRO_TRANS_MASTER_SEGMENT 
				WHERE F.ARR_TRANS_NUMBER = TRANS_NUMBER AND F.ARR_TRANS_CODE = TRANS_CODE
				AND F.ARR_DEP_AIRPORT_CODE = DEP_AIRPORT_CODE AND F.ARR_ARR_AIRPORT_CODE = ARR_AIRPORT_CODE  ),1) > 1 THEN 
				(	SELECT MAX(SEG_NO) FROM PRO_TRANS_MASTER_SEGMENT WHERE F.ARR_TRANS_NUMBER = TRANS_NUMBER AND F.ARR_TRANS_CODE = TRANS_CODE
					AND F.ARR_DEP_AIRPORT_CODE = DEP_AIRPORT_CODE AND F.ARR_ARR_AIRPORT_CODE = ARR_AIRPORT_CODE ) -1 ELSE 0 END AS endInfo_transferNum,
		CASE WHEN F.FARE_SEAT_TYPE = 3 THEN 2 ELSE 1 END AS endInfo_seatGrade,
		'false' AS endInfo_isSeatUpgrade,-- 항공 이용 좌석 업그레이드 가능 여부	true or false	true 
		'false' AS endInfo_mileage_isMileage,-- 마일리지 적립여부	true or false	true 
		'' AS endInfo_mileage_airline,--마일리지 적립 항공사명	text	KE
		0 AS endInfo_mileage_price,--마일리지	number	5000
		'' AS endInfo_mileage_description ,--마일리지 적립 설명 텍스트	text	
		CASE WHEN CHARINDEX(':',F.ARR_SPEND_TIME) > 0 THEN '약 ' + REPLACE(SUBSTRING(F.ARR_SPEND_TIME,1,2),'-','') +'시간 '  
		+ SUBSTRING(F.ARR_SPEND_TIME,4,6) +'분 소요' END   AS endInfo_flightTime ,-- 비행시간	text	약 11시간 55분 소요

		B.TOUR_NIGHT as ??travelPeriod_night ,
		B.TOUR_DAY as ??travelPeriod_day,

		-- 상품 가격정보 priceInfo 
		D.ADT_PRICE as ?priceInfo_adult_basePrice,
		(SELECT AA.ADT_SALE_QCHARGE FROM DBO.XN_PKG_DETAIL_PRICE(B.PRO_CODE, D.PRICE_SEQ) AA WHERE AA.PRO_CODE = B.PRO_CODE) AS priceInfo_adult_surcharge,
		(SELECT AA.ADT_SALE_PRICE FROM DBO.XN_PKG_DETAIL_PRICE(B.PRO_CODE, D.PRICE_SEQ) AA WHERE AA.PRO_CODE = B.PRO_CODE) AS priceInfo_adult_total,
		CASE WHEN H.ADT_COST > 0 THEN H.CURRENCY + ' ' + CONVERT(VARCHAR(10), H.ADT_COST) ELSE '' END AS?priceInfo_adult_localExpensesMoney,
		D.CHD_PRICE as priceInfo_child_basePrice,
		(SELECT AA.CHD_SALE_QCHARGE FROM DBO.XN_PKG_DETAIL_PRICE(B.PRO_CODE, D.PRICE_SEQ) AA WHERE AA.PRO_CODE = B.PRO_CODE) AS priceInfo_child_surcharge,
		(SELECT AA.CHD_SALE_PRICE FROM DBO.XN_PKG_DETAIL_PRICE(B.PRO_CODE, D.PRICE_SEQ) AA WHERE AA.PRO_CODE = B.PRO_CODE) AS priceInfo_child_total,
		CASE WHEN H.CHD_COST > 0 THEN (H.CURRENCY + ' ' + CONVERT(VARCHAR(10), H.CHD_COST))  ELSE '' END AS priceInfo_child_localExpensesMoney,
		D.INF_PRICE as priceInfo_infant_basePrice,
		0 AS priceInfo_infant_surcharge,
		D.INF_PRICE AS priceInfo_infant_total,
		CASE WHEN D.INF_PRICE = 0  THEN '담당자문의' ELSE '' END AS priceInfo_infant_totalDesc,
		CASE WHEN H.INF_COST > 0 THEN (H.CURRENCY + ' ' + CONVERT(VARCHAR(10), H.INF_COST))  ELSE '' END AS priceInfo_infant_localExpensesMoney,
		--(SELECT (AA.CURRENCY + ' ' + CONVERT(VARCHAR(10), AA.ADT_COST)) FROM DBO.XN_PKG_DETAIL_PRICE_GROUP_COST_SUMMARY(B.PRO_CODE, D.PRICE_SEQ) AA) AS [현지필수경비],
		--(CASE WHEN D.SGL_PRICE > 0 THEN ('싱글룸사용 ' + CONVERT(VARCHAR(10), D.SGL_PRICE)) ELSE '싱글룸사용 별도문의' END) AS [추가서비스명],
		(CASE WHEN D.SGL_PRICE > 0 THEN '싱글룸사용' ELSE '' END) AS priceInfo_serviceName,
		(CASE WHEN D.SGL_PRICE > 0 THEN (CONVERT(VARCHAR(10), D.SGL_PRICE) +'원') ELSE '' END) AS priceInfo_price,-- 별도문의 ?? 

		--??productIn 포함 ??productOut 불포함 
		STUFF((SELECT ',' + AA.INOUT_CODE 
				FROM PKG_DETAIL_PRICE_INOUT AA WITH(NOLOCK)
				WHERE AA.PRO_CODE = Z.PRO_CODE AND AA.PRICE_SEQ = Z.PRICE_SEQ AND AA.IN_YN ='Y' 
				FOR XML PATH('')), 1, 1, '') AS productIn,--	String[]	상품 포함내역 코드
	
		STUFF((SELECT ',' + AA.INOUT_CODE 
				FROM PKG_DETAIL_PRICE_INOUT AA WITH(NOLOCK)
				WHERE AA.PRO_CODE = Z.PRO_CODE AND AA.PRICE_SEQ = Z.PRICE_SEQ AND AA.IN_YN <> 'Y' 
				FOR XML PATH('')), 1, 1, '') AS productOut,--	String[]	상품 불포함내역 코드

		REPLACE(B.PKG_SUMMARY,',','_') AS ?productSellingPoints,-- !! 추가 
		E.TRAFFIC_POINT AS productPoints_traffic ,
		E.STAY_POINT AS productPoints_stay ,
		E.TOUR_POINT AS productPoints_tour ,
		E.EAT_POINT AS productPoints_eat ,
		E.DISCOUNT_POINT AS productPoints_discount ,
		E.OTHER_POINT AS productPoints_other,

		--!!!!!!!!! 선택관광 - 테이블 따로 ???
		(CASE WHEN (SELECT COUNT(*) FROM PKG_DETAIL_OPTION AA WITH(NOLOCK) WHERE AA.PRO_CODE = B.PRO_CODE) > 0 THEN 'true' ELSE 'false' END) AS?tourOption_isOptionalTour,
		--(SELECT COUNT(*) FROM PKG_MASTER_OPTION AA WITH(NOLOCK) WHERE AA.MASTER_CODE = A.MASTER_CODE) AS [선택관광횟수],
		--?tourOptionList	List	선택관광 목록 (isOptionalTour=true일 경우 필수입니다.)

		CASE WHEN ISNULL((SELECT COUNT(*) FROM PKG_DETAIL_SCH_DAY AA	
			INNER JOIN PKG_DETAIL_PRICE BB ON AA.PRO_CODE = BB.PRO_CODE AND AA.SCH_SEQ = BB.SCH_SEQ 
		WHERE D.PRO_CODE = AA.PRO_CODE AND D.SCH_SEQ = AA.SCH_SEQ AND AA.FREE_SCH_YN = 'Y'),0) > 0 THEN 'true' ELSE 'false' END  tourOption_isFreeSchedule,
		--0 AS [자유일정횟수],
		(SELECT COUNT(*) FROM PKG_DETAIL_SHOPPING AA WITH(NOLOCK) WHERE AA.PRO_CODE = B.PRO_CODE) AS shoppingTimeNum,

	-- 좌석 및 부킹코드  손봐야함 --------------------------------------------------------
	CASE WHEN B.MAX_COUNT = 0 THEN 99 WHEN B.MAX_COUNT < 0 THEN 0 ELSE B.MAX_COUNT  END AS bookingStatus_seatAll,
	B.MIN_COUNT AS bookingStatus_seatMin,
	--0 AS bookingStatus_seatNow,
	--RSVPS	예약가능
	--LEVDC	출발확정
	--ARBKG	대기예약
	--RSVCD	예약마감
	ISNULL((SELECT COUNT(*) 
		FROM RES_MASTER_damo AA WITH(NOLOCK) 
		INNER JOIN RES_CUSTOMER_damo BB WITH(NOLOCK) ON AA.RES_CODE = BB.RES_CODE
		WHERE AA.PRO_CODE = B.PRO_CODE AND AA.RES_STATE < 7 AND BB.RES_STATE = 0), 0) AS bookingStatus_seatNow,
	(CASE WHEN B.RES_ADD_YN = 'N' THEN 'RSVPS' WHEN B.MAX_COUNT < 0 THEN 'ARBKG' WHEN B.DEP_CFM_YN = 'Y' THEN 'LEVDC' ELSE 'RSVPS' END) AS bookingStatus_bookingCode,
	----------------------------------------------------------------------------------------------------------------

		CASE WHEN SUBSTRING(C.MASTEr_CODE,3,1) ='F' THEN 'ART' ELSE 'PKG' END  AS productOptionList ,

		CASE WHEN C.ATT_CODE ='W' THEN 'HYM' 
			WHEN C.ATT_CODE ='C' THEN 'CRU' 
			WHEN C.ATT_CODE ='G' THEN 'GOL' 
			WHEN C.ATT_CODE ='O' THEN 'SPR' 
			WHEN C.ATT_CODE ='F' THEN 'RET' 
		ELSE 'TRV' END AS productThemeList,
		(SELECT COUNT(*) FROM PRO_COMMENT AA WITH(NOLOCK) WHERE AA.MASTER_CODE = C.MASTER_CODE) AS reviewCount,

		ISNULL((SELECT AVG(AA.GRADE) FROM PRO_COMMENT AA WITH(NOLOCK) WHERE AA.MASTER_CODE = C.MASTER_CODE), 0) AS gradePoint_grade,
		ISNULL((SELECT AVG(AA.GRADE) FROM PRO_COMMENT AA WITH(NOLOCK) WHERE AA.MASTER_CODE = C.MASTER_CODE), 0) AS gradePoint_totalGrade,

		CASE WHEN B.TC_YN = 'Y' THEN 'true' ELSE 'false' END AS isUseTourConductor,
		CASE WHEN B.GUIDE_YN = 'Y' THEN 'true' ELSE 'false' END AS isUseLocalGuide,
		REPLACE(REPLACE(C.KEYWORD,',',';'),' ','') AS hashtag,
		CASE WHEN B.UNITE_YN = 'Y' THEN 'true' ELSE 'false' END as?isCombine
		--'' AS ??spotPoiList ,  -- 하단 스케쥴 리스트 테이블  
		--'' AS ??stayHotelList  -- 하단 가격 호텔 테이블  
		, GETDATE() AS NEW_DATE 
		--, GETDATE() AS NEW_DATE 
	FROM #TMP_PRODUCT Z WITH(NOLOCK) 
	INNER JOIN PKG_DETAIL B WITH(NOLOCK) ON Z.PRO_CODE = B.PRO_CODE
	INNER JOIN PKG_DETAIL_PRICE D WITH(NOLOCK) ON Z.PRO_CODE = D.PRO_CODE --AND D.PRICE_SEQ IN (SELECT TOP 1 PRICE_SEQ FROM PKG_DETAIL_PRICE AA WITH(NOLOCK) WHERE AA.PRO_CODE = B.PRO_CODE ORDER BY AA.PRICE_SEQ)
	AND Z.PRICE_SEQ = D.PRICE_SEQ 
	INNER JOIN PKG_MASTER C WITH(NOLOCK) ON B.MASTER_CODE = C.MASTER_CODE

	LEFT JOIN PKG_DETAIL_SELL_POINT  E WITH(NOLOCK) ON B.PRO_CODE = E.PRO_CODE
	LEFT JOIN PRO_TRANS_SEAT F WITH(NOLOCK) ON B.SEAT_CODE = F.SEAT_CODE
	LEFT JOIN PRO_TRANS_MASTER G1 WITH(NOLOCK) ON F.DEP_TRANS_CODE = G1.TRANS_CODE AND F.DEP_TRANS_NUMBER = G1.TRANS_NUMBER 
		AND F.DEP_DEP_AIRPORT_CODE = G1.DEP_AIRPORT_CODE AND F.DEP_ARR_AIRPORT_CODE = G1.ARR_AIRPORT_CODE  
	LEFT JOIN PRO_TRANS_MASTER G2 WITH(NOLOCK) ON F.ARR_TRANS_CODE = G2.TRANS_CODE AND F.ARR_TRANS_NUMBER = G2.TRANS_NUMBER 
		AND F.ARR_DEP_AIRPORT_CODE = G2.DEP_AIRPORT_CODE AND F.ARR_ARR_AIRPORT_CODE = G2.ARR_AIRPORT_CODE  
	
	LEFT JOIN PKG_DETAIL_PRICE_GROUP_COST H WITH(NOLOCK) ON D.PRO_CODE = H.PRO_CODE AND D.PRICE_SEQ = H.PRICE_SEQ AND H.COST_SEQ = 1

	WHERE 1=1
	AND F.SEAT_CODE IS NOT NULL 
	--ORDER BY Z.PRO_CODE , Z.PRICE_SEQ 
	) T 
	

	----------------------------------------------------------------------------------------
	-- 옵션 리스트   -- ????tourOptionList 
	----------------------------------------------------------------------------------------
	
	-- 최초 등록시 , 컬럼 변경시 
	--SELECT  * INTO NAVER_PKG_DETAIL_OPTION  FROM ( 

	-- 해당 마스터 삭제후 
	DELETE NAVER_PKG_DETAIL_OPTION 
	WHERE mstCode = @MASTER_CODE 
	--  재등록
	--  컬럼추가 주의!!!! 
	INSERT NAVER_PKG_DETAIL_OPTION
	SELECT * FROM (
		SELECT 
		UPPER(Z.MASTER_CODE) AS??mstCode,
		(UPPER(Z.PRO_CODE) + '|' + CONVERT(VARCHAR(3), Z.PRICE_SEQ)) AS ?childCode,
		OPT_SEQ as opt_seq, 
		OPT_NAME as opt_name,
		OPT_PRICE as opt_price, 
		OPT_CONTENT as opt_tourInfo,
		OPT_USETIME as opt_taketime,  
		CASE WHEN CHARINDEX('미동행',OPT_COMPANION) > 0 
			OR CHARINDEX('X',OPT_COMPANION) > 0 
			OR CHARINDEX('비동행',OPT_COMPANION) > 0  
			OR CHARINDEX('안함',OPT_COMPANION) > 0  
			THEN 'false' ELSE 'true' END  as isUseGuide,
	
		CASE WHEN OPT_PLACE = OPT_REPLACE THEN OPT_PLACE ELSE OPT_PLACE +'/' + OPT_REPLACE END AS opt_otherDescription ,
		OPT_COMPANION

		FROM #TMP_PRODUCT Z 
		INNER JOIN PKG_DETAIL_OPTION  C  WITH(NOLOCK) ON Z.PRO_CODE = C.PRO_CODE 
		--WHERE Z.MASTER_CODE ='APP5004'
		--WHERE Z.PRO_CODE IN ('APP5004-190501OZ','APP0717-190321VJ','JPP693-190330JJ','CPP345-190328','EPP4545-190410','EPP5000-190310TK','EPF001-190401KE','UPP243-190321OZ','UPP646-190408BIZ','IPF565-180325LJ5D')
		--ORDER BY Z.PRO_CODE,Z.PRICE_SEQ,C.OPT_SEQ 
	) T 
	
	----------------------------------------------------------------------------------------
	-- 일자별 호텔 식사 (추후 교통수단 ) 
	----------------------------------------------------------------------------------------
	-- 최초 등록시 , 컬럼 변경시 
	--SELECT  * INTO NAVER_PKG_DETAIL_HOTEL  FROM ( 

	-- 해당 마스터 삭제후 
	DELETE NAVER_PKG_DETAIL_HOTEL 
	WHERE mstCode = @MASTER_CODE 

	--  재등록
	--  컬럼추가 주의!!!! 
	INSERT INTO NAVER_PKG_DETAIL_HOTEL 
	SELECT * FROM (
		SELECT 
		UPPER(Z.MASTER_CODE) AS??mstCode,
		(UPPER(Z.PRO_CODE) + '|' + CONVERT(VARCHAR(3), Z.PRICE_SEQ)) AS ?childCode,
		--C.PRO_CODE , C.PRICE_SEQ , D.SCH_SEQ , 
		--E.DAY_SEQ , 
		( select count(*) from PKG_DETAIL_SCH_DAY AA where AA.PRO_CODE = E.PRO_CODE AND AA.SCH_SEQ = E.SCH_SEQ  ) AS dayTotal,
		E.DAY_NUMBER AS [day],
		'false' as isEatPlan,
		'' as eat_breakfast,
		F.DINNER_1 as eat_breakfastText,
		'' as eat_lunch,
		F.DINNER_2 as eat_lunchText,
		'' as eat_dinner,
		F.DINNER_3 as eat_dinnerText,

		'' AS stay_hotelPoiID,
		F.STAY_INFO as stay_text , 

		F.HTL_MASTER_CODE 

		FROM #TMP_PRODUCT Z WITH(NOLOCK)
		INNER JOIN PKG_DETAIL_SCH_MASTER  D  WITH(NOLOCK) ON Z.PRO_CODE = D.PRO_CODE AND Z.SCH_SEQ = D.SCH_SEQ 
		INNER JOIN PKG_DETAIL_SCH_DAY E  WITH(NOLOCK) ON Z.PRO_CODE = E.PRO_CODE AND Z.SCH_SEQ = E.SCH_SEQ 

		---- 가격에 물린 호텔 
		LEFT JOIN PKG_DETAIL_PRICE_HOTEL F  WITH(NOLOCK) ON Z.PRO_CODE = F.PRO_CODE AND Z.PRICE_SEQ = F.PRICE_SEQ AND E.DAY_NUMBER = F.DAY_NUMBER
		--WHERE Z.PRO_CODE=  'APP059-1905017C'
		--WHERE Z.PRO_CODE IN ('APP5004-190501OZ','APP0717-190321VJ','JPP693-190330JJ','CPP345-190328','EPP4545-190410','EPP5000-190310TK','EPF001-190401KE','UPP243-190321OZ','UPP646-190408BIZ','IPF565-180325LJ5D')
		--ORDER BY Z.PRO_CODE,Z.PRICE_SEQ,E.DAY_NUMBER 
	) T 
	--WHERE childCode not in ( select childCode from NAVER_PKG_DETAIL_HOTEL ) 

	----------------------------------------------------------------------------------------
	-- 일자별 스케쥴 
	----------------------------------------------------------------------------------------
	-- 최초 등록시 , 컬럼 변경시 
	--SELECT  * INTO NAVER_PKG_DETAIL_SCH  FROM ( 


	-- 해당 마스터 삭제후 
	DELETE NAVER_PKG_DETAIL_SCH 
	WHERE mstCode = @MASTER_CODE 
	
	--  재등록
	--  컬럼추가 주의!!!! 
	INSERT INTO NAVER_PKG_DETAIL_SCH 
	SELECT * FROM (
		SELECT
		UPPER(Z.MASTER_CODE) AS??mstCode,
		(UPPER(Z.PRO_CODE) + '|' + CONVERT(VARCHAR(3), Z.PRICE_SEQ)) AS childCode,
		--E.DAY_SEQ , 
		E.DAY_NUMBER as [day],
		ROW_NUMBER() OVER ( PARTITION BY Z.PRO_CODE,Z.PRICE_SEQ, E.DAY_NUMBER ORDER BY Z.PRO_CODE,Z.PRICE_SEQ, E.DAY_NUMBER, F.CITY_SHOW_ORDER ,G.CNT_SHOW_ORDER )    as [index], 
		H.KOR_TITLE AS [title],
		J.N_CNT_CODE as spotPoiID, -- 네이버 컨텐츠 ID 
		'http://contents.verygoodtour.com/content/' + H3.REGION_CODE + '/' + H3.NATION_CODE + '/' + H3.STATE_CODE + '/' + H3.CITY_CODE 
		+ '/image/' + CONVERT(VARCHAR(10), H3.FILE_CODE) + (CASE WHEN H3.FILE_NAME_M IS NOT NULL THEN '_2' ELSE '_3' END) + '.JPG' 
		AS imageUrl 
		 ,Z.PRO_CODE,Z.PRICE_SEQ,Z.SCH_SEQ,E.DAY_NUMBER
		--F.CITY_SEQ,
		--F.CITY_SHOW_ORDER,
		--F.CITY_CODE,
		--I.N_CITY_CODE ,  -- 네이버 도시 코드 
		--I2.NAME_KR ,I2.NAME_EN ,  -- 네이버 도시 코드 
		--F.MAINCITY_YN,

		--G.CNT_SEQ , 
		--G.CNT_SHOW_ORDER,
		--G.CNT_CODE,
		--J.N_CNT_CODE as spotPoiID -- 네이버 컨텐츠 ID 
		--J2.NAME_KR , J2.NAME_EN , 
		--G.CNT_INFO,
		--H.KOR_TITLE , H.CNT_TYPE 

		FROM #TMP_PRODUCT Z WITH(NOLOCK)
		INNER JOIN PKG_DETAIL_SCH_MASTER  D  WITH(NOLOCK) ON Z.PRO_CODE = D.PRO_CODE AND Z.SCH_SEQ = D.SCH_SEQ 
		INNER JOIN PKG_DETAIL_SCH_DAY E  WITH(NOLOCK) ON Z.PRO_CODE = E.PRO_CODE AND Z.SCH_SEQ = E.SCH_SEQ 

		INNER JOIN PKG_DETAIL_SCH_CITY F  WITH(NOLOCK) ON Z.PRO_CODE = F.PRO_CODE AND Z.SCH_SEQ = F.SCH_SEQ AND E.DAY_SEQ = F.DAY_SEQ 
		INNER JOIN PKG_DETAIL_SCH_CONTENT G  WITH(NOLOCK) ON Z.PRO_CODE = G.PRO_CODE AND Z.SCH_SEQ = G.SCH_SEQ AND E.DAY_SEQ = G.DAY_SEQ  AND F.CITY_SEQ = G.CITY_SEQ
		LEFT JOIN INF_MASTER H WITH(NOLOCK) ON G.CNT_CODE = H.CNT_CODE

		LEFT JOIN INF_FILE_MANAGER H2 WITH(NOLOCK) ON H.CNT_CODE = H2.CNT_CODE
			AND H2.FILE_CODE = ( SELECT TOP 1 FILE_CODE FROM INF_FILE_MANAGER WHERE CNT_CODE = H2.CNT_CODE ORDER BY SHOW_ORDER ) 

		LEFT JOIN INF_FILE_MASTER H3 WITH(NOLOCK) ON H2.FILE_CODE = H3.FILE_CODE

		LEFT JOIN PUB_CITY_MAP_NAVER I 
			ON F.CITY_CODE = I.CITY_CODE 
			AND I.N_CITY_CODE = (SELECT TOP 1 N_CITY_CODE FROM PUB_CITY_MAP_NAVER AA WHERE AA.CITY_CODE =  I.CITY_CODE ORDER BY SHOW_ORDER ) 

		LEFT JOIN NAVER_CITY_CODE I2 
			ON I.N_CITY_CODE = I2.N_CITY_CODE 

		LEFT JOIN INF_MASTER_MAP_NAVER J 
			ON H.CNT_CODE = J.CNT_CODE 
			AND J.N_CNT_CODE = (SELECT TOP 1 N_CNT_CODE FROM INF_MASTER_MAP_NAVER AA WHERE AA.CNT_CODE =  J.CNT_CODE ORDER BY SHOW_ORDER ) 

		LEFT JOIN NAVER_POI_SPOT_CODE J2 
			ON J.N_CNT_CODE = J2.N_CNT_CODE 

		WHERE H.CNT_TYPE = 1 
		AND F.CITY_CODE NOT IN ( SELECT CITY_CODE FROM PUB_CITY WHERE NATION_CODE = 'KR' ) 
		
		--WHERE Z.PRO_CODE=  'APP5004-190501KE'
		--WHERE Z.PRO_CODE IN ('APP5004-190501OZ','APP0717-190321VJ','JPP693-190330JJ','CPP345-190328','EPP4545-190410','EPP5000-190310TK','EPF001-190401KE','UPP243-190321OZ','UPP646-190408BIZ','IPF565-180325LJ5D')
		--WHERE Z.MASTEr_CODE = 'APP5004' AND B.DEP_DATE > '2019-03-01' AND B.DEP_DATE > '2019-04-01'
		--ORDER BY Z.PRO_CODE,Z.PRICE_SEQ,Z.SCH_SEQ,E.DAY_NUMBER,F.CITY_SHOW_ORDER ,G.CNT_SHOW_ORDER 
	) T 


	UPDATE NAVER_PKG_MASTER 
		set updateDate = getdate() 
		, updateChildCount = (select count(*) from NAVER_PKG_DETAIL where mstCode = @MASTER_CODE)
	WHERE mstCode = @MASTER_CODE

	--SELECT * FROM NAVER_PKG_DETAIL WHERE mstCode = @MASTER_CODE order by childCode 
	--SELECT * FROM NAVER_PKG_DETAIL_OPTION  WHERE mstCode = @MASTER_CODE  order by childCode , opt_seq 
	--SELECT * FROM NAVER_PKG_DETAIL_HOTEL  WHERE mstCode = @MASTER_CODE  order by childCode , [day]
	--SELECT * FROM NAVER_PKG_DETAIL_SCH  WHERE mstCode = @MASTER_CODE  order by childCode , [day],[index]

	DROP TABLE #TMP_PRODUCT
END 
GO
