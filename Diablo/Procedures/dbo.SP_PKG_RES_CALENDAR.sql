USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[SP_PKG_RES_CALENDAR]
	@SEARCH_TYPE	INT,
	@PRO_TYPE		INT,
	@EMP_CODE		VARCHAR(7),
	@TEAM_CODE		VARCHAR(3),
	@START_DATE		VARCHAR(10),
	@END_DATE		VARCHAR(10)
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	DECLARE @SQLSTRING NVARCHAR(4000), @PARMDEFINITION NVARCHAR(1000)

	-- WHERE 조건 만들기
		-- 담당자코드( 없으면 팀 전체, 팀 코드가 없으면 전체)
	IF ISNULL(@TEAM_CODE, '') <> ''
	BEGIN
		IF ISNULL(@EMP_CODE, '') <> ''
			SET @SQLSTRING = ' AND A.NEW_CODE = @EMP_CODE'
		ELSE
			SET @SQLSTRING = ' AND A.NEW_CODE IN (SELECT EMP_CODE FROM EMP_MASTER  WITH(NOLOCK) WHERE TEAM_CODE = @TEAM_CODE)'
	END

	-- 서브테이블
	IF @SEARCH_TYPE = 0				-- 예약일
	BEGIN
		SET @SQLSTRING = N'
	-- 평균
	SELECT
		COUNT(*) AS [RES_COUNT]
		, COUNT(CASE WHEN ROOM_YN = ''N'' THEN 1 END) AS [WT_COUNT]
		, COUNT(CASE WHEN RES_STATE IN (7, 9) THEN 1 END) AS [CXL_COUNT]
	FROM (
		SELECT
			A.RES_CODE, A.RES_STATE
			, (SELECT ISNULL(MIN(ROOM_YN), ''N'') FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [ROOM_YN]
		FROM RES_MASTER_damo A
		WHERE A.PRO_TYPE = @PRO_TYPE AND A.NEW_DATE BETWEEN @START_DATE AND @END_DATE
		' + @SQLSTRING + '
	) A

	-- 리스트
	SELECT A.NEW_DATE AS [DIS_DATE], A.*
		, DBO.FN_RES_HTL_GET_PAY_STATE(A.RES_CODE) AS [PAY_STATE]
		, (SELECT ISNULL(MIN(ROOM_YN), ''N'') FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [ROOM_YN]
		, B.DAY_COUNT
	FROM (
		SELECT A.RES_CODE, A.PRO_TYPE, A.RES_STATE, A.RES_NAME, A.NEW_DATE, A.NEW_CODE
		FROM RES_MASTER_damo A WITH(NOLOCK) 
		WHERE A.PRO_TYPE = @PRO_TYPE
		AND A.NEW_DATE BETWEEN @START_DATE AND @END_DATE
		' + @SQLSTRING + '
	) A
	LEFT OUTER JOIN (
		SELECT COUNT(*) AS [DAY_COUNT], CONVERT(VARCHAR(10), A.NEW_DATE, 120) AS [NEW_DATE]
		FROM (
			SELECT A.RES_CODE, A.NEW_DATE
			FROM RES_MASTER_damo A WITH(NOLOCK) 
			WHERE A.PRO_TYPE = @PRO_TYPE
		) A
		WHERE NEW_DATE BETWEEN @START_DATE AND @END_DATE
		GROUP BY CONVERT(VARCHAR(10), A.NEW_DATE, 120)
	) B ON CONVERT(VARCHAR(10), A.NEW_DATE, 120) = B.NEW_DATE
	ORDER BY A.NEW_DATE, A.RES_CODE'
	END
	ELSE IF @SEARCH_TYPE = 1		-- 체크인날짜
	BEGIN
		SET @SQLSTRING = N'
	-- 평균
	SELECT
		COUNT(*) AS [RES_COUNT]
		, COUNT(CASE WHEN ROOM_YN = ''N'' THEN 1 END) AS [WT_COUNT]
		, COUNT(CASE WHEN RES_STATE IN (7, 9) THEN 1 END) AS [CXL_COUNT]
	FROM (
		SELECT
			A.RES_CODE, A.RES_STATE, A.NEW_CODE
			, (SELECT ISNULL(MIN(ROOM_YN), ''N'') FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [ROOM_YN]
			, (SELECT MIN(CHECK_IN) FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [CHECK_IN]
		FROM RES_MASTER_damo A WITH(NOLOCK) 
		WHERE A.PRO_TYPE = @PRO_TYPE
		AND A.RES_CODE IN (SELECT RES_CODE FROM RES_HTL_ROOM_MASTER WITH(NOLOCK)  WHERE CHECK_IN BETWEEN @START_DATE AND @END_DATE)
	) A
	WHERE A.CHECK_IN BETWEEN @START_DATE AND @END_DATE
	' + @SQLSTRING + '

	-- 리스트
	SELECT A.CHECK_IN AS [DIS_DATE], A.*
		, DBO.FN_RES_HTL_GET_PAY_STATE(A.RES_CODE) AS [PAY_STATE]
		, (SELECT ISNULL(MIN(ROOM_YN), ''N'') FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [ROOM_YN]
		, B.DAY_COUNT
	FROM (
		SELECT A.RES_CODE, A.PRO_TYPE, A.RES_STATE, A.RES_NAME, A.NEW_DATE, A.NEW_CODE
			, (SELECT MIN(CHECK_IN) FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [CHECK_IN]
		FROM RES_MASTER_damo A WITH(NOLOCK) 
		WHERE A.PRO_TYPE = @PRO_TYPE
		AND A.RES_CODE IN (SELECT RES_CODE FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE CHECK_IN BETWEEN @START_DATE AND @END_DATE)
	) A
	LEFT OUTER JOIN (
		SELECT COUNT(*) AS [DAY_COUNT], CHECK_IN
		FROM (
			SELECT A.RES_CODE
				, (SELECT MIN(CHECK_IN) FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [CHECK_IN]
			FROM RES_MASTER_damo A WITH(NOLOCK) 
			WHERE A.PRO_TYPE = @PRO_TYPE
		) A
		WHERE CHECK_IN BETWEEN @START_DATE AND @END_DATE
		GROUP BY CHECK_IN
	) B ON A.CHECK_IN = B.CHECK_IN
	WHERE A.CHECK_IN BETWEEN @START_DATE AND @END_DATE
	' + @SQLSTRING + '
	ORDER BY A.CHECK_IN, A.RES_CODE'
	END
	ELSE IF @SEARCH_TYPE = 2		-- 취소마감일
	BEGIN
		SET @SQLSTRING = N'
	-- 평균
	SELECT
		COUNT(*) AS [RES_COUNT]
		, COUNT(CASE WHEN ROOM_YN = ''N'' THEN 1 END) AS [WT_COUNT]
		, COUNT(CASE WHEN RES_STATE IN (7, 9) THEN 1 END) AS [CXL_COUNT]
	FROM (
		SELECT
			A.RES_CODE, A.RES_STATE, A.NEW_CODE
			, (SELECT ISNULL(MIN(ROOM_YN), ''N'') FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [ROOM_YN]
			, (SELECT MIN(LAST_CXL_DATE) FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [LAST_CXL_DATE]
		FROM RES_MASTER_damo A WITH(NOLOCK) 
		WHERE A.PRO_TYPE = @PRO_TYPE
		AND A.RES_CODE IN (SELECT RES_CODE FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE LAST_CXL_DATE BETWEEN @START_DATE AND @END_DATE)
	) A
	WHERE A.LAST_CXL_DATE BETWEEN @START_DATE AND @END_DATE
	' + @SQLSTRING + '

	-- 리스트
	SELECT A.LAST_CXL_DATE AS [DIS_DATE], A.*
		, DBO.FN_RES_HTL_GET_PAY_STATE(A.RES_CODE) AS [PAY_STATE]
		, (SELECT ISNULL(MIN(ROOM_YN), ''N'') FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [ROOM_YN]
		, B.DAY_COUNT
	FROM (
		SELECT A.RES_CODE, A.PRO_TYPE, A.RES_STATE, A.RES_NAME, A.NEW_DATE, A.NEW_CODE
			, (SELECT MIN(LAST_CXL_DATE) FROM RES_HTL_ROOM_MASTER WITH(NOLOCK)  WHERE RES_CODE = A.RES_CODE) AS [LAST_CXL_DATE]
		FROM RES_MASTER_damo A WITH(NOLOCK) 
		WHERE A.PRO_TYPE = @PRO_TYPE
		AND A.RES_CODE IN (SELECT RES_CODE FROM RES_HTL_ROOM_MASTER WITH(NOLOCK)  WHERE LAST_CXL_DATE BETWEEN @START_DATE AND @END_DATE)
	) A
	LEFT OUTER JOIN (
		SELECT COUNT(*) AS [DAY_COUNT], LAST_CXL_DATE
		FROM (
			SELECT A.RES_CODE
				, (SELECT MIN(LAST_CXL_DATE) FROM RES_HTL_ROOM_MASTER  WITH(NOLOCK) WHERE RES_CODE = A.RES_CODE) AS [LAST_CXL_DATE]
			FROM RES_MASTER_damo A WITH(NOLOCK) 
			WHERE A.PRO_TYPE = @PRO_TYPE
		) A
		WHERE LAST_CXL_DATE BETWEEN @START_DATE AND @END_DATE
		GROUP BY LAST_CXL_DATE
	) B ON A.LAST_CXL_DATE = B.LAST_CXL_DATE
	WHERE A.LAST_CXL_DATE BETWEEN @START_DATE AND @END_DATE
	' + @SQLSTRING + '
	ORDER BY A.LAST_CXL_DATE, A.RES_CODE'
	END

	SET @PARMDEFINITION = N'@SEARCH_TYPE INT, @PRO_TYPE INT, @EMP_CODE VARCHAR(7), @TEAM_CODE VARCHAR(3), @START_DATE VARCHAR(10), @END_DATE VARCHAR(10)'

	PRINT @SQLSTRING
	--EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, @SEARCH_TYPE, @PRO_TYPE, @EMP_CODE , @TEAM_CODE, @START_DATE, @END_DATE
END

--	@SEARCH_TYPE, @EMP_CODE , @TEAM_CODE, @START_DATE, @END_DATE
--	SP_RES_HTL_CALENDAR 0, 3, '2008006', '529', '2009-03-01', '2009-03-31'


GO
