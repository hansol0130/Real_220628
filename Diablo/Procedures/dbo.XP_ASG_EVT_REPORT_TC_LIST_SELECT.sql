USE [Diablo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: XP_ASG_EVT_REPORT_TC_LIST_SELECT
■ DESCRIPTION				: 대외업무시스템 인솔자관리 인솔자평가현황 리스트 검색
■ INPUT PARAMETER			: 
	@PAGE_INDEX  INT		: 현재 페이지
	@PAGE_SIZE  INT			: 한 페이지 표시 게시물 수
	@KEY		VARCHAR(400): 검색 키
	@ORDER_BY	INT			: 정렬 순서
■ OUTPUT PARAMETER			: 
	@TOTAL_COUNT INT OUTPUT	: 총 검색된 수       
■ EXEC						: 
	DECLARE @PAGE_INDEX INT,
	@PAGE_SIZE  INT,
	@TOTAL_COUNT INT, 
	@KEY		VARCHAR(400),
	@ORDER_BY	INT

	SELECT @PAGE_INDEX=1,@PAGE_SIZE=2,@KEY=N'ProCode=CPP456-130503&ProName=&NewName=&AgtGrade&SDate=2013-04-01&EDate=2013-06-30&SignCode=',@ORDER_BY=0
	
	exec XP_ASG_EVT_REPORT_TC_LIST_SELECT @page_index, @page_size, @total_count output, @key, @order_by
	SELECT @TOTAL_COUNT
■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2013-04-25		이상일			최초생성    
================================================================================================================*/ 

 CREATE  PROCEDURE [dbo].[XP_ASG_EVT_REPORT_TC_LIST_SELECT]
(
	@PAGE_INDEX		INT,
	@PAGE_SIZE		INT,
	@TOTAL_COUNT	INT OUTPUT,
	@KEY			VARCHAR(400),
	@ORDER_BY		INT
)

AS  
BEGIN

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @SQLSTRING NVARCHAR(MAX), @PARMDEFINITION NVARCHAR(1000);
	DECLARE @WHERE NVARCHAR(4000),@ORDER NVARCHAR(4000);

	DECLARE
		@PRO_CODE	VARCHAR(20),--행사코드
		@PRO_NAME   NVARCHAR(100), --행사명
		@NEW_NAME  VARCHAR(20), --인솔자명
		@AGT_GRADE	VARCHAR(1), --인솔자등급
		@START_DATE DATETIME , 
		@END_DATE	DATETIME ,
		@SIGN_CODE	VARCHAR(1)  --지역

	SELECT
		@PRO_CODE = DBO.FN_PARAM(@KEY, 'ProCode'),
		@PRO_NAME = DBO.FN_PARAM(@KEY, 'ProName'), 
		@NEW_NAME = DBO.FN_PARAM(@KEY, 'NewName'), 
		@AGT_GRADE = DBO.FN_PARAM(@KEY, 'AgtGrade'), 
		@START_DATE = DBO.FN_PARAM(@KEY, 'SDate'),
		@END_DATE = DBO.FN_PARAM(@KEY, 'EDate'),
		@SIGN_CODE = DBO.FN_PARAM(@KEY, 'SignCode'),
		@WHERE = '',
		@ORDER = 0

   
	-- WHERE 조건 만들기
	IF ISNULL(@PRO_CODE, '') <> '' --행사코드
		SET @WHERE = ' AND D.PRO_CODE LIKE @PRO_CODE + ''%'' '
    ELSE 
	BEGIN
		IF ISNULL(@PRO_NAME, '') <> '' -- 행사명
			SET @WHERE =@WHERE + ' AND D.PRO_NAME LIKE ''%'' + @PRO_NAME + ''%'' '

		IF (ISNULL(@START_DATE, '') <> '' AND ISNULL(@END_DATE, '') <> '' )-- 출발일
			SET @WHERE =@WHERE + ' AND D.DEP_DATE BETWEEN @START_DATE AND @END_DATE '

		IF ( ISNULL(@NEW_NAME, '') <> '')
			SET @WHERE = @WHERE + ' AND C.KOR_NAME LIKE ''%'' + @NEW_NAME + ''%'' '
			
		IF ( ISNULL(@AGT_GRADE, '') <> '')
			SET @WHERE = @WHERE + ' AND C.AGT_GRADE LIKE ''%'' + @AGT_GRADE + ''%'' '

  		IF ISNULL(@SIGN_CODE, '') <> '' -- 지역
			SET @WHERE =@WHERE + ' AND E.SIGN_CODE = @SIGN_CODE'
	END


	--ORDER BY 조건 만들기
	
	SELECT @ORDER = (  
		CASE @ORDER_BY  
			WHEN 1 THEN ' A.NEW_NAME ASC'
			WHEN 2 THEN ' A.AGT_GRADE ASC'
			WHEN 3 THEN ' A.T_COUNT DESC '
			WHEN 4 THEN ' A.AVG_NUM DESC'
			WHEN 5 THEN ' A.AVG_NUM_LAST DESC'
			WHEN 6 THEN ' A.DEP_DATE DESC'
			ELSE ' A.PRO_CODE DESC'
		END
	)




	SET @SQLSTRING = N'
				SELECT @TOTAL_COUNT = COUNT(*)
				FROM (
					SELECT A.NEW_CODE
					FROM OTR_MASTER A
					INNER JOIN OTR_POL_MASTER B ON (A.OTR_SEQ = B.OTR_SEQ)
					INNER JOIN AGT_MEMBER C ON A.NEW_CODE = C.MEM_CODE
					INNER JOIN PKG_DETAIL D ON A.PRO_CODE = D.PRO_CODE
					INNER JOIN PKG_MASTER E ON D.MASTER_CODE = E.MASTER_CODE
					WHERE A.OTR_STATE =''3'' AND B.POL_TYPE =''5'' '+ @WHERE + '
					GROUP BY A.NEW_CODE) A	 ;

				WITH LIST AS
				(	
					SELECT A.NEW_CODE,
						   MAX(A.PRO_CODE) AS PRO_CODE, 
						   MAX(C.KOR_NAME) AS NEW_NAME, 
						   MAX(C.AGT_GRADE) AS AGT_GRADE,
						   MAX(D.DEP_DATE) AS DEP_DATE,
						   MAX(E.SIGN_CODE) AS SIGN_CODE,
						   (SELECT KOR_NAME FROM PUB_REGION WHERE SIGN = MAX(E.SIGN_CODE)) AS SIGN_NAME,
						   (SELECT COUNT(OTR_SEQ) FROM OTR_MASTER WHERE OTR_STATE =''3'' AND NEW_CODE = A.NEW_CODE) AS T_COUNT,
						   (SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
							  FROM OTR_MASTER H
							 INNER JOIN dbo.OTR_POL_MASTER I ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''5''
							 INNER JOIN dbo.OTR_POL_QUESTION J ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1'' AND J.OTR_POL_QUESTION_SEQ = 0
							 INNER JOIN dbo.OTR_POL_ANSWER K ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
							 INNER JOIN dbo.OTR_POL_DETAIL L ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
							 WHERE H.OTR_STATE = ''3'' AND I.CLIENT_CALL_YN = ''Y'' AND H.NEW_CODE = A.NEW_CODE) AS AVG_NUM ,
						   (SELECT ROUND((SUM(CONVERT(INT,L.EXAMPLE_DESC)) / CONVERT(FLOAT,COUNT(K.OTR_POL_EXAMPLE_SEQ))),1)
							  FROM OTR_MASTER H
							 INNER JOIN dbo.OTR_POL_MASTER I ON H.OTR_SEQ = I.OTR_SEQ AND I.POL_TYPE =''5''
							 INNER JOIN dbo.OTR_POL_QUESTION J ON I.OTR_POL_MASTER_SEQ = J.OTR_POL_MASTER_SEQ AND J.QUS_TYPE=''1'' AND J.OTR_POL_QUESTION_SEQ = 0
							 INNER JOIN dbo.OTR_POL_ANSWER K ON J.OTR_POL_MASTER_SEQ = K.OTR_POL_MASTER_SEQ AND J.OTR_POL_QUESTION_SEQ = K.OTR_POL_QUESTION_SEQ
							 INNER JOIN dbo.OTR_POL_DETAIL L ON K.OTR_POL_MASTER_SEQ = L.OTR_POL_MASTER_SEQ AND K.OTR_POL_QUESTION_SEQ = L.OTR_POL_QUESTION_SEQ AND K.OTR_POL_EXAMPLE_SEQ =L.OTR_POL_EXAMPLE_SEQ 
							 WHERE H.OTR_STATE = ''3'' AND I.CLIENT_CALL_YN = ''Y'' AND H.PRO_CODE = MAX(A.PRO_CODE) AND H.NEW_CODE = A.NEW_CODE) AS AVG_NUM_LAST
					FROM OTR_MASTER A
					INNER JOIN OTR_POL_MASTER B ON (A.OTR_SEQ = B.OTR_SEQ)
					INNER JOIN AGT_MEMBER C ON A.NEW_CODE = C.MEM_CODE
					INNER JOIN PKG_DETAIL D ON A.PRO_CODE = D.PRO_CODE
					INNER JOIN PKG_MASTER E ON D.MASTER_CODE = E.MASTER_CODE
					WHERE A.OTR_STATE =''3'' AND B.POL_TYPE =''5'' '+ @WHERE + '
					GROUP BY A.NEW_CODE
				)
				
				 SELECT A.NEW_CODE, 
						A.PRO_CODE, 
						A.NEW_NAME, 
						A.AGT_GRADE,
						A.DEP_DATE,
						A.SIGN_CODE,
						A.SIGN_NAME,
						A.T_COUNT, 
						A.AVG_NUM,
						A.AVG_NUM_LAST
				   FROM LIST A 			
				  ORDER BY ' + @ORDER + '
				  OFFSET ((@PAGE_INDEX - 1) * @PAGE_SIZE) ROWS FETCH NEXT @PAGE_SIZE
				  ROWS ONLY '

			

				 
	SET @PARMDEFINITION = N'@PAGE_INDEX  INT, @PAGE_SIZE  INT, @TOTAL_COUNT INT OUTPUT, @PRO_CODE VARCHAR(20), @PRO_NAME NVARCHAR(100), @NEW_NAME  VARCHAR(20), @AGT_GRADE	VARCHAR(1), @START_DATE DATETIME ,@END_DATE DATETIME ,@SIGN_CODE VARCHAR(1)';

	--PRINT @SQLSTRING
		
	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION, @PAGE_INDEX, @PAGE_SIZE, @TOTAL_COUNT OUTPUT, @PRO_CODE, @PRO_NAME, @NEW_NAME, @AGT_GRADE, @START_DATE ,@END_DATE, @SIGN_CODE;

END



GO
