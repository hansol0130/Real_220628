USE [Sirens]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*================================================================================================================
■ USP_NAME					: SP_CTI_PKG_MASTER_MONTH_DETAIL_LIST_SELECT
■ DESCRIPTION				: 마스터 월별 행사리스트
■ INPUT PARAMETER			: 
	@MASTER_CODE			: 마스터 코드
	@START_DATE				: 시작일
	@END_DATE				: 도착일
	@ORDER_BY				: 정렬순서 (1: 출발일 ASC, 2: 출발일 DESC, 3: 가격 ASC, 4: 가격 DESC)
■ OUTPUT PARAMETER			: 
■ EXEC						: 

	DECLARE @MASTER_CODE VARCHAR(10), @START_DATE DATETIME, @END_DATE DATETIME, @ORDER_BY INT
	SELECT @MASTER_CODE = 'epf002', @START_DATE = '2013-03-01', @END_DATE = '2013-04-01', @ORDER_BY = 1
	exec CTI.SP_CTI_PKG_MASTER_MONTH_DETAIL_LIST_SELECT @MASTER_CODE, @START_DATE, @END_DATE, @ORDER_BY

■ MEMO						: 
------------------------------------------------------------------------------------------------------------------
■ CHANGE HISTORY                   
------------------------------------------------------------------------------------------------------------------
   DATE				AUTHOR			DESCRIPTION           
------------------------------------------------------------------------------------------------------------------
   2014-10-22		정지용				최초생성
================================================================================================================*/ 

CREATE PROCEDURE [cti].[SP_CTI_PKG_MASTER_MONTH_DETAIL_LIST_SELECT]
(
	@MASTER_CODE	VARCHAR(10),
	@START_DATE		DATETIME,
	@END_DATE		DATETIME,
	@ORDER_BY		INT
)

AS  
BEGIN

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @SQLSTRING NVARCHAR(4000), @PARMDEFINITION NVARCHAR(1000), @SORT_STRING VARCHAR(50);

	-- SORT 조건 만들기  
	SELECT @SORT_STRING = (  
		CASE @ORDER_BY
			WHEN 1 THEN 'Z.DEP_DATE, Z.ADT_PRICE'
			WHEN 2 THEN 'Z.DEP_DATE DESC, Z.ADT_PRICE'
			WHEN 3 THEN 'Z.ADT_PRICE, Z.DEP_DATE'
			WHEN 4 THEN 'Z.ADT_PRICE DESC, Z.DEP_DATE'
			ELSE 'Z.DEP_DATE, Z.ADT_PRICE'
		END
	)

	SET @SQLSTRING = N'
	WITH LIST AS
	(
		SELECT A.PRO_CODE, A.DEP_DATE
			, (SELECT TOP 1 ADT_PRICE FROM DIABLO.DBO.PKG_DETAIL_PRICE WHERE PRO_CODE = A.PRO_CODE ORDER BY ADT_PRICE) AS [ADT_PRICE]
			, ISNULL(DIABLO.DBO.XN_PRO_DETAIL_SALE_PRICE_CUTTING(A.PRO_CODE,0) , 0) AS [ADT_SALE_PRICE]
			, (SELECT TOP 1 PRICE_SEQ FROM DIABLO.DBO.PKG_DETAIL_PRICE WITH(NOLOCK) WHERE PRO_CODE = A.PRO_CODE ORDER BY ADT_PRICE) AS [PRICE_SEQ]
		FROM DIABLO.DBO.PKG_DETAIL A WITH(NOLOCK)
		WHERE A.MASTER_CODE = @MASTER_CODE AND A.DEP_DATE >= @START_DATE AND A.DEP_DATE < @END_DATE AND A.SHOW_YN = ''Y''
	)
	SELECT @START_DATE AS [BASIC_DATE], A.PRO_CODE, A.DEP_DATE, A.ARR_DATE, A.PRO_NAME, A.MAX_COUNT, A.MIN_COUNT, A.FAKE_COUNT
		, A.TOUR_NIGHT, A.TOUR_DAY, A.RES_ADD_YN, A.DEP_CFM_YN, A.CONFIRM_YN, A.SALE_TYPE, A.PRICE_TYPE
		, C.DEP_TRANS_CODE AS [TRANS_CODE], C.DEP_DEP_DATE, C.DEP_DEP_TIME, C.ARR_ARR_DATE, C.ARR_ARR_TIME
		, CASE
			WHEN A.TRANSFER_TYPE = 1 THEN (SELECT KOR_NAME FROM DIABLO.DBO.PUB_AIRLINE WITH(NOLOCK) WHERE AIRLINE_CODE = C.DEP_TRANS_CODE)
			WHEN A.TRANSFER_TYPE = 2 THEN (SELECT KOR_NAME FROM DIABLO.DBO.PUB_SHIP WITH(NOLOCK) WHERE SHIP_CODE = C.DEP_TRANS_CODE)
			ELSE '''' 
		END AS [TRANS_NAME]
		, DIABLO.DBO.FN_PRO_GET_RES_COUNT(A.PRO_CODE) AS [RES_COUNT]
		, Z.ADT_PRICE, Z.ADT_SALE_PRICE, Z.PRICE_SEQ, B.BRANCH_CODE, B.ATT_CODE
		, (CASE WHEN A.PRO_CODE = B.EVENT_PRO_CODE THEN ''Y'' ELSE ''N'' END) AS [EVENT_YN]
	FROM LIST Z
	INNER JOIN DIABLO.DBO.PKG_DETAIL A WITH(NOLOCK) ON Z.PRO_CODE = A.PRO_CODE
	INNER JOIN DIABLO.DBO.PKG_MASTER B WITH(NOLOCK) ON A.MASTER_CODE = B.MASTER_CODE
	LEFT OUTER JOIN DIABLO.DBO.PRO_TRANS_SEAT C WITH(NOLOCK) ON A.SEAT_CODE = C.SEAT_CODE
	ORDER BY ' + @SORT_STRING

	SET @PARMDEFINITION = N'
		@MASTER_CODE	VARCHAR(10),
		@START_DATE		DATETIME,
		@END_DATE		DATETIME';

	--PRINT @SQLSTRING
		
	EXEC SP_EXECUTESQL @SQLSTRING, @PARMDEFINITION,
		@MASTER_CODE,
		@START_DATE,
		@END_DATE;

END


GO
